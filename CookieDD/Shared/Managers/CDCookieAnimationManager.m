//
//  CDCookieAnimationManager.m
//  CookieDD
//
//  Created by BLINDED AM ME on 5/19/14.
//  Copyright (c) 2014 Seven Gun Games. All rights reserved.
//

#import "CDCookieAnimationManager.h"
#import "SGCookieDunkDunkScene.h"
#import "SGPlayerPreferencesManager.h"
#import "BLINDED_Math.h"

static CDCookieAnimationManager *animationManager = nil;

@interface CDCookieAnimationManager ()

@property (strong, nonatomic) NSString* deviceModel;

// chip

//@property (strong, nonatomic) NSArray* chip_voices;
//@property (strong, nonatomic) NSArray* red_voices;
//@property (strong, nonatomic) NSArray* orange_voices;
//@property (strong, nonatomic) NSArray* yellow_voices;
//@property (strong, nonatomic) NSArray* green_voices;
//@property (strong, nonatomic) NSArray* blue_voices;
//@property (strong, nonatomic) NSArray* purple_voices;

@property (assign, nonatomic) BOOL isPlayingMilkwaveSound;

@property (strong, nonatomic) SKAction* chip_Animation_Character;
@property (strong, nonatomic) SKAction* chip_Animation_Idle;
@property (strong, nonatomic) SKAction* chip_Animation_Delete;
@property (strong, nonatomic) SKAction* chip_Animation_Falling;
@property (strong, nonatomic) SKAction* chip_Animation_Switch;
@property (strong, nonatomic) SKAction* chip_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* chip_Animation_PickMe;
@property (strong, nonatomic) SKAction* chip_Animation_Shocker;


@property (strong, nonatomic) SKAction* chip_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* chip_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* chip_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* chip_Animation_hero_SwitchBack;

@property (strong, nonatomic) NSArray* chip_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* chip_hero_Hor_Animations;


// mikey

@property (strong, nonatomic) SKAction* mikey_Animation_Character;
@property (strong, nonatomic) SKAction* mikey_Animation_Idle;
@property (strong, nonatomic) SKAction* mikey_Animation_Delete;
@property (strong, nonatomic) SKAction* mikey_Animation_Falling;
@property (strong, nonatomic) SKAction* mikey_Animation_Switch;
@property (strong, nonatomic) SKAction* mikey_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* mikey_Animation_PickMe;
@property (strong, nonatomic) SKAction* mikey_Animation_Shocker;

@property (strong, nonatomic) SKAction* mikey_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* mikey_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* mikey_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* mikey_Animation_hero_SwitchBack;


@property (strong, nonatomic) NSArray* mikey_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* mikey_hero_Hor_Animations;

// reginald

@property (strong, nonatomic) SKAction* reginald_Animation_Character;
@property (strong, nonatomic) SKAction* reginald_Animation_Idle;
@property (strong, nonatomic) SKAction* reginald_Animation_Delete;
@property (strong, nonatomic) SKAction* reginald_Animation_Falling;
@property (strong, nonatomic) SKAction* reginald_Animation_Switch;
@property (strong, nonatomic) SKAction* reginald_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* reginald_Animation_PickMe;
@property (strong, nonatomic) SKAction* reginald_Animation_Shocker;

@property (strong, nonatomic) SKAction* reginald_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* reginald_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* reginald_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* reginald_Animation_hero_SwitchBack;

@property (strong, nonatomic) NSArray* reginald_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* reginald_hero_Hor_Animations;

@property (strong, nonatomic) NSArray* reginald_hero_Particles;

// luke

@property (strong, nonatomic) SKAction* luke_Animation_Character;
@property (strong, nonatomic) SKAction* luke_Animation_Idle;
@property (strong, nonatomic) SKAction* luke_Animation_Delete;
@property (strong, nonatomic) SKAction* luke_Animation_Falling;
@property (strong, nonatomic) SKAction* luke_Animation_Switch;
@property (strong, nonatomic) SKAction* luke_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* luke_Animation_PickMe;
@property (strong, nonatomic) SKAction* luke_Animation_Shocker;

@property (strong, nonatomic) SKAction* luke_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* luke_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* luke_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* luke_Animation_hero_SwitchBack;

@property (strong, nonatomic) NSArray* luke_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* luke_hero_Hor_Animations;

// dustin

@property (strong, nonatomic) SKAction* dustin_Animation_Character;
@property (strong, nonatomic) SKAction* dustin_Animation_Idle;
@property (strong, nonatomic) SKAction* dustin_Animation_Delete;
@property (strong, nonatomic) SKAction* dustin_Animation_Falling;
@property (strong, nonatomic) SKAction* dustin_Animation_Switch;
@property (strong, nonatomic) SKAction* dustin_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* dustin_Animation_PickMe;
@property (strong, nonatomic) SKAction* dustin_Animation_Shocker;

@property (strong, nonatomic) SKAction* dustin_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* dustin_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* dustin_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* dustin_Animation_hero_SwitchBack;

@property (strong, nonatomic) NSArray* dustin_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* dustin_hero_Hor_Animations;

// gerry

@property (strong, nonatomic) SKAction* gerry_Animation_Character;
@property (strong, nonatomic) SKAction* gerry_Animation_Idle;
@property (strong, nonatomic) SKAction* gerry_Animation_Delete;
@property (strong, nonatomic) SKAction* gerry_Animation_Falling;
@property (strong, nonatomic) SKAction* gerry_Animation_Switch;
@property (strong, nonatomic) SKAction* gerry_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* gerry_Animation_PickMe;
@property (strong, nonatomic) SKAction* gerry_Animation_Shocker;

@property (strong, nonatomic) SKAction* gerry_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* gerry_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* gerry_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* gerry_Animation_hero_SwitchBack;

@property (strong, nonatomic) NSArray* gerry_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* gerry_hero_Hor_Animations;

// jj

@property (strong, nonatomic) SKAction* jj_Animation_Character;
@property (strong, nonatomic) SKAction* jj_Animation_Idle;
@property (strong, nonatomic) SKAction* jj_Animation_Delete;
@property (strong, nonatomic) SKAction* jj_Animation_Falling;
@property (strong, nonatomic) SKAction* jj_Animation_Switch;
@property (strong, nonatomic) SKAction* jj_Animation_SwitchBack;
@property (strong, nonatomic) SKAction* jj_Animation_PickMe;
@property (strong, nonatomic) SKAction* jj_Animation_Shocker;

@property (strong, nonatomic) SKAction* jj_Animation_hero_Idle;
@property (strong, nonatomic) SKAction* jj_Animation_hero_PickMe;
@property (strong, nonatomic) SKAction* jj_Animation_hero_Switch;
@property (strong, nonatomic) SKAction* jj_Animation_hero_SwitchBack;

@property (strong, nonatomic) NSArray* jj_hero_Vert_Animations;
@property (strong, nonatomic) NSArray* jj_hero_Hor_Animations;

@property (strong, nonatomic) NSMutableArray *cookieCostumeSelectedArray;

@end

@implementation CDCookieAnimationManager


+ (CDCookieAnimationManager *)animationManager
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        
        animationManager = [CDCookieAnimationManager new];
        
        
        if(IS_IPHONE_4 || IS_IPHONE_5){
            
            animationManager.deviceModel = @"@2x";
            
        }else
            if(IS_IPAD){
                
                animationManager.deviceModel = @"@2x~ipad";
            }

        
//        animationManager.chip_voices = @[
//                         
//                         [SGAudioManager MakeSoundEffectAction:@"Chip-Character" withFileType:@".m4a"],
//                         [SGAudioManager MakeSoundEffectAction:@"Chip-PickMe" withFileType:@".m4a"],
//                         [SGAudioManager MakeSoundEffectAction:@"Chip-Idle" withFileType:@".m4a"]
//                         
//                         ];
//        
//        animationManager.red_voices = @[
//                        
//                        [SGAudioManager MakeSoundEffectAction:@"JJ-Character" withFileType:@".m4a"],
//                        [SGAudioManager MakeSoundEffectAction:@"JJ-PickMe" withFileType:@".m4a"],
//                        [SGAudioManager MakeSoundEffectAction:@"JJ-Idle" withFileType:@".m4a"]
//                        
//                        ];
//        
//        animationManager.orange_voices = @[
//                           
//                           [SGAudioManager MakeSoundEffectAction:@"Reginald-Character" withFileType:@".m4a"],
//                           [SGAudioManager MakeSoundEffectAction:@"Reginald-PickMe" withFileType:@".m4a"],
//                           [SGAudioManager MakeSoundEffectAction:@"Reginald-Idle" withFileType:@".m4a"]
//                           
//                           ];
//        
//        animationManager.yellow_voices = @[
//                           
//                           [SGAudioManager MakeSoundEffectAction:@"Luke-Character" withFileType:@".m4a"],
//                           [SGAudioManager MakeSoundEffectAction:@"Luke-PickMe" withFileType:@".m4a"],
//                           [SGAudioManager MakeSoundEffectAction:@"Luke-Idle" withFileType:@".m4a"]
//                           
//                           ];
//        
//        animationManager.green_voices = @[
//                          
//                          [SGAudioManager MakeSoundEffectAction:@"Alien-Character" withFileType:@".m4a"],
//                          [SGAudioManager MakeSoundEffectAction:@"Alien-PickMe" withFileType:@".m4a"],
//                          [SGAudioManager MakeSoundEffectAction:@"Alien-Idle" withFileType:@".m4a"]
//                          
//                          ];
//        
//        animationManager.blue_voices = @[
//                         
//                         [SGAudioManager MakeSoundEffectAction:@"Mikey-Character" withFileType:@".m4a"],
//                         [SGAudioManager MakeSoundEffectAction:@"Mikey-Idle" withFileType:@".m4a"],
//                         [SGAudioManager MakeSoundEffectAction:@"Mikey-Idle" withFileType:@".m4a"]
//                         
//                         ];
//        
//        animationManager.purple_voices = @[
//                           
//                           [SGAudioManager MakeSoundEffectAction:@"Gerry-Character" withFileType:@".m4a"],
//                           [SGAudioManager MakeSoundEffectAction:@"Gerry-PickMe" withFileType:@".m4a"],
//                           [SGAudioManager MakeSoundEffectAction:@"Gerry-Idle" withFileType:@".m4a"]
//                           
//                           ];

        
    });
    
    return animationManager;
}

#pragma mark - Normal cookie loading texture

-(void)loadCookieAnimations{
    
    _cookieCostumeSelectedArray = [NSMutableArray new];
    
    
    [self loadChipAnimations];
    [self loadMikeyAnimations];
    [self loadReginaldAnimations];
    [self loadLukeAnimations];
    [self loadDustinAnimations];
    [self loadGerryAnimations];
    [self loadJJAnimations];
    
}

-(void)loadChipAnimations{
    
    NSArray* allchipframes = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip12%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip13%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip14%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip15%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip16%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip17%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip18%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip19%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip20%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip21%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip22%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip23%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip24%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip25%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip26%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip27%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip28%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-chip29%@",_deviceModel]]
                               
                               ];
    
    _chip_Animation_Switch = [SKAction animateWithTextures:@[
                                                             allchipframes[1],
                                                             allchipframes[2]] timePerFrame:0.06];
    
    _chip_Animation_Shocker = [SKAction animateWithTextures:@[
                                                              
                                                              allchipframes[28],
                                                              allchipframes[2],
                                                              
                                                              ] timePerFrame:0.1];
    
    _chip_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                                 
                                                                 allchipframes[1],
                                                                 allchipframes[0]] timePerFrame:0.06];
    
    _chip_Animation_Character = [SKAction animateWithTextures:@[
                                                                allchipframes[0],
                                                                allchipframes[20],
                                                                allchipframes[21],
                                                                allchipframes[22],
                                                                allchipframes[23],
                                                                
                                                                allchipframes[24],
                                                                allchipframes[25],
                                                                allchipframes[26],
                                                                allchipframes[27],
                                                                allchipframes[26],
                                                                
                                                                allchipframes[25],// 11
                                                                allchipframes[26],
                                                                allchipframes[27],
                                                                allchipframes[26],
                                                                allchipframes[25],
                                                                
                                                                allchipframes[26],// 16
                                                                allchipframes[27],
                                                                allchipframes[26],
                                                                allchipframes[25],
                                                                allchipframes[24],
                                                                
                                                                allchipframes[23],// 21
                                                                allchipframes[22],
                                                                allchipframes[21],
                                                                allchipframes[20],
                                                                allchipframes[0]
                                                                
                                                                ] timePerFrame:0.06];
    
    _chip_Animation_Delete = [SKAction animateWithTextures:@[
                                                             
                                                             allchipframes[3],
                                                             allchipframes[4]
                                                             
                                                             ] timePerFrame:0.06];
    
    _chip_Animation_Falling = [SKAction animateWithTextures:@[
                                                              
                                                              allchipframes[3],
                                                              allchipframes[4],
                                                              allchipframes[4],
                                                              allchipframes[4],
                                                              allchipframes[4],
                                                              allchipframes[4],
                                                              allchipframes[3],
                                                              allchipframes[0]
                                                              
                                                              ] timePerFrame:0.06];
    
    _chip_Animation_Idle = [SKAction animateWithTextures:@[
                                                           
                                                           allchipframes[0],
                                                           allchipframes[14],
                                                           allchipframes[15],
                                                           allchipframes[16],
                                                           
                                                           allchipframes[17],
                                                           allchipframes[18],
                                                           allchipframes[19],
                                                           allchipframes[0]
                                                           
                                                           
                                                           ] timePerFrame:0.06];
    
    _chip_Animation_PickMe = [SKAction animateWithTextures:@[
                                                             
                                                             allchipframes[0],
                                                             allchipframes[5],
                                                             allchipframes[6],
                                                             allchipframes[7],
                                                             allchipframes[8],
                                                             
                                                             allchipframes[9],
                                                             allchipframes[10],
                                                             allchipframes[11],
                                                             allchipframes[12],
                                                             allchipframes[11],
                                                             
                                                             allchipframes[10],
                                                             allchipframes[9],
                                                             allchipframes[8],
                                                             allchipframes[7],
                                                             allchipframes[6],
                                                             
                                                             allchipframes[5],
                                                             allchipframes[13],
                                                             allchipframes[0]
                                                             
                                                             ] timePerFrame:0.06];
    
}

-(void)loadMikeyAnimations{
    
    NSArray* allmikeyframes = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey1%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey2%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey3%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey4%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey5%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey6%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey7%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey8%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey9%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey10%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey11%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey12%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey13%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey14%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey15%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey16%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey17%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey18%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey19%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey20%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey21%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey22%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey23%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey24%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey25%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey26%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey27%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey28%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey29%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey30%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey31%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey32%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey33%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey34%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey35%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey36%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey37%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey38%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey39%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey40%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey41%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey42%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey43%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey44%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey45%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey46%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey47%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey48%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey49%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey50%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey51%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey52%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey53%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey54%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey55%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-mikey56%@",_deviceModel]]
                                
                                ];
    
    _mikey_Animation_Shocker = [SKAction animateWithTextures:@[
                                                               
                                                               allmikeyframes[55],
                                                               allmikeyframes[2],
                                                               
                                                               ] timePerFrame:0.1];
    
    
    _mikey_Animation_Switch = [SKAction animateWithTextures:@[
                                                              
                                                              allmikeyframes[1],
                                                              allmikeyframes[2]
                                                              
                                                              ] timePerFrame:0.06];
    
    _mikey_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                                  
                                                                  allmikeyframes[1],
                                                                  allmikeyframes[0]
                                                                  
                                                                  ] timePerFrame:0.06];
    
    _mikey_Animation_Character = [SKAction animateWithTextures:@[
                                                                 
                                                                 allmikeyframes[30],
                                                                 allmikeyframes[31],
                                                                 allmikeyframes[32],
                                                                 allmikeyframes[33],
                                                                 
                                                                 allmikeyframes[34],
                                                                 allmikeyframes[35],
                                                                 allmikeyframes[36],
                                                                 allmikeyframes[37],
                                                                 allmikeyframes[38],
                                                                 
                                                                 allmikeyframes[39],
                                                                 allmikeyframes[40],
                                                                 allmikeyframes[41],
                                                                 allmikeyframes[42],
                                                                 allmikeyframes[43],
                                                                 
                                                                 allmikeyframes[44],
                                                                 allmikeyframes[45],
                                                                 allmikeyframes[46],
                                                                 allmikeyframes[47],
                                                                 allmikeyframes[48],
                                                                 
                                                                 allmikeyframes[49],
                                                                 allmikeyframes[50],
                                                                 allmikeyframes[51],
                                                                 allmikeyframes[52],
                                                                 allmikeyframes[53],
                                                                 
                                                                 allmikeyframes[54],
                                                                 allmikeyframes[0]
                                                                 
                                                                 ] timePerFrame:0.06];
    
    _mikey_Animation_Delete = [SKAction animateWithTextures:@[
                                                              
                                                              allmikeyframes[0],
                                                              allmikeyframes[3],
                                                              allmikeyframes[4]
                                                              
                                                              
                                                              ] timePerFrame:0.06];
    
    _mikey_Animation_Falling = [SKAction animateWithTextures:@[
                                                               
                                                               allmikeyframes[0],
                                                               allmikeyframes[3],
                                                               allmikeyframes[4],
                                                               
                                                               allmikeyframes[4],
                                                               allmikeyframes[4],
                                                               allmikeyframes[4],
                                                               
                                                               allmikeyframes[4],
                                                               allmikeyframes[3],
                                                               allmikeyframes[0]
                                                               
                                                               ] timePerFrame:0.06];
    
    _mikey_Animation_Idle = [SKAction animateWithTextures:@[
                                                            
                                                            allmikeyframes[15],
                                                            allmikeyframes[16],
                                                            allmikeyframes[17],
                                                            allmikeyframes[18], // 5
                                                            
                                                            allmikeyframes[19],
                                                            
                                                            allmikeyframes[20],allmikeyframes[20],
                                                            allmikeyframes[20],allmikeyframes[20],
                                                            
                                                            allmikeyframes[21],
                                                            allmikeyframes[22],
                                                            allmikeyframes[21],
                                                            
                                                            allmikeyframes[20],
                                                            allmikeyframes[21],
                                                            allmikeyframes[22],
                                                            allmikeyframes[21],
                                                            
                                                            allmikeyframes[20],// 15
                                                            allmikeyframes[20],
                                                            allmikeyframes[20],
                                                            allmikeyframes[20],
                                                            
                                                            
                                                            allmikeyframes[19],
                                                            allmikeyframes[18],
                                                            allmikeyframes[16],
                                                            allmikeyframes[23],
                                                            allmikeyframes[24],
                                                            
                                                            allmikeyframes[25],
                                                            
                                                            allmikeyframes[26],//22
                                                            allmikeyframes[26],
                                                            allmikeyframes[26],
                                                            allmikeyframes[26],
                                                            
                                                            allmikeyframes[27],
                                                            allmikeyframes[28],
                                                            allmikeyframes[27], // 25
                                                            
                                                            allmikeyframes[26],
                                                            allmikeyframes[27],
                                                            allmikeyframes[28],
                                                            allmikeyframes[27],
                                                            
                                                            allmikeyframes[26], // 30
                                                            allmikeyframes[26],
                                                            allmikeyframes[26],
                                                            allmikeyframes[26],
                                                            allmikeyframes[26],
                                                            
                                                            
                                                            allmikeyframes[25],
                                                            allmikeyframes[24],
                                                            allmikeyframes[16],
                                                            allmikeyframes[29],
                                                            allmikeyframes[0]
                                                            
                                                            ] timePerFrame:0.06];
    
    _mikey_Animation_PickMe = [SKAction animateWithTextures:@[
                                                              
                                                              allmikeyframes[5],
                                                              allmikeyframes[6],
                                                              allmikeyframes[7],
                                                              allmikeyframes[8],
                                                              
                                                              allmikeyframes[9],
                                                              allmikeyframes[10],
                                                              allmikeyframes[11],
                                                              allmikeyframes[12],
                                                              allmikeyframes[11],
                                                              
                                                              allmikeyframes[10],
                                                              allmikeyframes[13],
                                                              allmikeyframes[6],
                                                              allmikeyframes[7],
                                                              allmikeyframes[14], // 15
                                                              
                                                              allmikeyframes[0]
                                                              
                                                              ] timePerFrame:0.06];
    
    
    
}

-(void)loadReginaldAnimations{
    
    NSArray* allreginaldframes = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald1%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald2%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald3%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald4%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald5%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald6%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald7%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald8%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald9%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald10%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald11%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald12%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald13%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald14%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald15%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald16%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald17%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald18%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald19%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald20%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald21%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald22%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald23%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald24%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald25%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald26%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald27%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald28%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald29%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald30%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald31%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald32%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald33%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald34%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald35%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald36%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald37%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald38%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald39%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald40%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald41%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald42%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald43%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-reginald44%@",_deviceModel]]
                                   
                                   ];
    
    _reginald_Animation_Shocker = [SKAction animateWithTextures:@[
                                                                  
                                                                  allreginaldframes[43],
                                                                  allreginaldframes[2],
                                                                  
                                                                  ] timePerFrame:0.1];
    
    _reginald_Animation_Switch = [SKAction animateWithTextures:@[
                                                                 
                                                                 allreginaldframes[1],
                                                                 allreginaldframes[2]
                                                                 
                                                                 ] timePerFrame:0.06];
    
    _reginald_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                                     
                                                                     allreginaldframes[1],
                                                                     allreginaldframes[0]
                                                                     
                                                                     ] timePerFrame:0.06];
    
    _reginald_Animation_Character = [SKAction animateWithTextures:@[
                                                                    
                                                                    allreginaldframes[24],
                                                                    allreginaldframes[25],
                                                                    allreginaldframes[26],
                                                                    allreginaldframes[27],//5
                                                                    
                                                                    allreginaldframes[28],
                                                                    allreginaldframes[29],
                                                                    allreginaldframes[30],
                                                                    allreginaldframes[31],
                                                                    allreginaldframes[32],// 10
                                                                    
                                                                    allreginaldframes[33],
                                                                    allreginaldframes[34],
                                                                    allreginaldframes[35],
                                                                    allreginaldframes[36],
                                                                    allreginaldframes[37],// 15
                                                                    
                                                                    allreginaldframes[38],
                                                                    allreginaldframes[39],
                                                                    allreginaldframes[40],
                                                                    allreginaldframes[41],
                                                                    allreginaldframes[42],// 20
                                                                    
                                                                    allreginaldframes[0]
                                                                    
                                                                    ] timePerFrame:0.06];
    
    _reginald_Animation_Delete = [SKAction animateWithTextures:@[
                                                                 
                                                                 allreginaldframes[0],
                                                                 allreginaldframes[3],
                                                                 allreginaldframes[4]
                                                                 
                                                                 
                                                                 ] timePerFrame:0.06];
    
    _reginald_Animation_Falling = [SKAction animateWithTextures:@[
                                                                  
                                                                  allreginaldframes[0],
                                                                  allreginaldframes[1],
                                                                  allreginaldframes[2],
                                                                  
                                                                  allreginaldframes[2],
                                                                  allreginaldframes[2],
                                                                  allreginaldframes[2],
                                                                  
                                                                  allreginaldframes[2],
                                                                  allreginaldframes[1],
                                                                  allreginaldframes[0]
                                                                  
                                                                  ] timePerFrame:0.06];
    
    _reginald_Animation_Idle = [SKAction animateWithTextures:@[
                                                               
                                                               allreginaldframes[18],
                                                               allreginaldframes[19],
                                                               allreginaldframes[20],
                                                               allreginaldframes[21], // 5
                                                               
                                                               allreginaldframes[22],
                                                               
                                                               // hold
                                                               allreginaldframes[23],allreginaldframes[23],allreginaldframes[23],
                                                               allreginaldframes[23],allreginaldframes[23],allreginaldframes[23],
                                                               allreginaldframes[23],allreginaldframes[23],allreginaldframes[23],
                                                               
                                                               allreginaldframes[22],
                                                               allreginaldframes[21],
                                                               allreginaldframes[20],//10
                                                               
                                                               allreginaldframes[19],
                                                               allreginaldframes[18],                                                            allreginaldframes[0]
                                                               
                                                               ] timePerFrame:0.06];
    
    _reginald_Animation_PickMe = [SKAction animateWithTextures:@[
                                                                 
                                                                 allreginaldframes[5],
                                                                 allreginaldframes[6],
                                                                 allreginaldframes[7],
                                                                 allreginaldframes[8],//5
                                                                 
                                                                 allreginaldframes[7],
                                                                 allreginaldframes[9],
                                                                 allreginaldframes[10],
                                                                 allreginaldframes[11],
                                                                 allreginaldframes[12],// 10
                                                                 
                                                                 allreginaldframes[13],
                                                                 allreginaldframes[14],
                                                                 allreginaldframes[15],
                                                                 allreginaldframes[16],
                                                                 allreginaldframes[17], // 15
                                                                 
                                                                 allreginaldframes[6],
                                                                 allreginaldframes[5],
                                                                 allreginaldframes[0]
                                                                 
                                                                 ] timePerFrame:0.06];
    
    
    
}

-(void)loadLukeAnimations{
    
    NSArray* alllukeframes = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke10%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke12%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke13%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke14%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke15%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke16%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke17%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke18%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke19%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke20%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke21%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke22%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke23%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke24%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke25%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke26%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke27%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke28%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke29%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke30%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke31%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke32%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke33%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke34%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke35%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-luke36%@",_deviceModel]]
                               
                               ];
    
    
    _luke_Animation_Shocker = [SKAction animateWithTextures:@[
                                                              
                                                              alllukeframes[35],
                                                              alllukeframes[2],
                                                              
                                                              ] timePerFrame:0.1];
    
    _luke_Animation_Switch = [SKAction animateWithTextures:@[
                                                             
                                                             alllukeframes[1],
                                                             alllukeframes[2]
                                                             
                                                             ] timePerFrame:0.06];
    
    _luke_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                                 
                                                                 alllukeframes[1],
                                                                 alllukeframes[0]
                                                                 
                                                                 ] timePerFrame:0.06];
    
    _luke_Animation_Character = [SKAction animateWithTextures:@[
                                                                
                                                                alllukeframes[25], //2
                                                                
                                                                // hold
                                                                alllukeframes[26], alllukeframes[26],alllukeframes[26],
                                                                alllukeframes[26],alllukeframes[26],alllukeframes[26],
                                                                alllukeframes[26], alllukeframes[26],alllukeframes[26],
                                                                
                                                                
                                                                alllukeframes[27],//4
                                                                alllukeframes[28],//5
                                                                
                                                                alllukeframes[29],
                                                                alllukeframes[30],
                                                                alllukeframes[31],
                                                                
                                                                // hold
                                                                alllukeframes[32],alllukeframes[32],alllukeframes[32],alllukeframes[32],alllukeframes[32],alllukeframes[32],alllukeframes[32],alllukeframes[32],alllukeframes[32],
                                                                
                                                                
                                                                alllukeframes[31],// 10
                                                                
                                                                alllukeframes[30],
                                                                alllukeframes[33],
                                                                alllukeframes[34],
                                                                alllukeframes[0] // 14
                                                                
                                                                
                                                                ] timePerFrame:0.06];
    
    _luke_Animation_Delete = [SKAction animateWithTextures:@[
                                                             
                                                             alllukeframes[0],
                                                             alllukeframes[3],
                                                             alllukeframes[4]
                                                             
                                                             
                                                             ] timePerFrame:0.06];
    
    _luke_Animation_Falling = [SKAction animateWithTextures:@[
                                                              
                                                              alllukeframes[0],
                                                              alllukeframes[1],
                                                              alllukeframes[2],
                                                              
                                                              alllukeframes[2],
                                                              alllukeframes[2],
                                                              alllukeframes[2],
                                                              
                                                              alllukeframes[2],
                                                              alllukeframes[1],
                                                              alllukeframes[0]
                                                              
                                                              ] timePerFrame:0.06];
    
    _luke_Animation_Idle = [SKAction animateWithTextures:@[
                                                           
                                                           alllukeframes[14],
                                                           alllukeframes[15],
                                                           alllukeframes[16],
                                                           alllukeframes[17], // 5
                                                           
                                                           alllukeframes[18],
                                                           alllukeframes[19],
                                                           alllukeframes[20],
                                                           //hold
                                                           alllukeframes[21],alllukeframes[21],alllukeframes[21],
                                                           alllukeframes[21],alllukeframes[21],alllukeframes[21],
                                                           
                                                           alllukeframes[22],//10
                                                           
                                                           alllukeframes[23],
                                                           alllukeframes[24],
                                                           alllukeframes[0]
                                                           
                                                           ] timePerFrame:0.06];
    
    _luke_Animation_PickMe = [SKAction animateWithTextures:@[
                                                             
                                                             alllukeframes[5],
                                                             alllukeframes[6],
                                                             alllukeframes[7],
                                                             alllukeframes[8],//5
                                                             
                                                             alllukeframes[9],
                                                             alllukeframes[10],
                                                             alllukeframes[11],
                                                             alllukeframes[12],
                                                             alllukeframes[8],// 10
                                                             
                                                             alllukeframes[7],
                                                             alllukeframes[6],
                                                             alllukeframes[13],
                                                             alllukeframes[0]
                                                             
                                                             ] timePerFrame:0.06];
    
    
    
}

-(void)loadDustinAnimations{
    
    NSArray* alldustinframes = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin1%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin2%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin3%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin4%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin5%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin6%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin7%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin8%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin9%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin10%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin11%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin12%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin13%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin14%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin15%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin16%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin17%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin18%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin19%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin20%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin21%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin22%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin23%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin24%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin25%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin26%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin27%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin28%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin29%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin30%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin31%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin32%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin33%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin34%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin35%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin36%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-dustin37%@",_deviceModel]]
                                 
                                 ];
    
    _dustin_Animation_Shocker = [SKAction animateWithTextures:@[
                                                                
                                                                alldustinframes[36],
                                                                alldustinframes[2],
                                                                
                                                                ] timePerFrame:0.1];
    
    _dustin_Animation_Switch = [SKAction animateWithTextures:@[
                                                               
                                                               alldustinframes[1],
                                                               alldustinframes[2]
                                                               
                                                               ] timePerFrame:0.06];
    
    _dustin_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                                   
                                                                   alldustinframes[1],
                                                                   alldustinframes[0]
                                                                   
                                                                   ] timePerFrame:0.06];
    
    _dustin_Animation_Character = [SKAction animateWithTextures:@[
                                                                  
                                                                  alldustinframes[18], //2
                                                                  alldustinframes[19],
                                                                  alldustinframes[20],
                                                                  alldustinframes[21],//5
                                                                  
                                                                  alldustinframes[22],
                                                                  alldustinframes[23], // 7
                                                                  alldustinframes[23], // 8
                                                                  alldustinframes[24],
                                                                  alldustinframes[20],// 10
                                                                  
                                                                  alldustinframes[20],
                                                                  alldustinframes[25],//12
                                                                  alldustinframes[26],
                                                                  alldustinframes[27],
                                                                  alldustinframes[28],// 15
                                                                  
                                                                  alldustinframes[29],
                                                                  alldustinframes[30],
                                                                  alldustinframes[31],
                                                                  alldustinframes[32], // 19
                                                                  alldustinframes[32], // 20
                                                                  
                                                                  alldustinframes[33],//21
                                                                  alldustinframes[29],
                                                                  alldustinframes[34],
                                                                  alldustinframes[26],
                                                                  alldustinframes[35],// 25
                                                                  
                                                                  alldustinframes[18],
                                                                  alldustinframes[0] // 27
                                                                  
                                                                  ] timePerFrame:0.06];
    
    _dustin_Animation_Delete = [SKAction animateWithTextures:@[
                                                               
                                                               alldustinframes[0],
                                                               alldustinframes[1],
                                                               alldustinframes[2]
                                                               
                                                               
                                                               ] timePerFrame:0.06];
    
    _dustin_Animation_Falling = [SKAction animateWithTextures:@[
                                                                
                                                                alldustinframes[0],
                                                                alldustinframes[1],
                                                                alldustinframes[2],
                                                                
                                                                alldustinframes[2],
                                                                alldustinframes[2],
                                                                alldustinframes[2],
                                                                
                                                                alldustinframes[2],
                                                                alldustinframes[1],
                                                                alldustinframes[0]
                                                                
                                                                ] timePerFrame:0.06];
    
    _dustin_Animation_Idle = [SKAction animateWithTextures:@[
                                                             
                                                             alldustinframes[3],
                                                             alldustinframes[4],
                                                             alldustinframes[5],
                                                             alldustinframes[6], // 5
                                                             
                                                             alldustinframes[7],
                                                             alldustinframes[8],
                                                             alldustinframes[9],
                                                             alldustinframes[10],
                                                             alldustinframes[11],//10
                                                             
                                                             alldustinframes[3],
                                                             alldustinframes[0]
                                                             
                                                             ] timePerFrame:0.06];
    
    _dustin_Animation_PickMe = [SKAction animateWithTextures:@[
                                                               
                                                               alldustinframes[12],
                                                               alldustinframes[13],
                                                               alldustinframes[14],
                                                               alldustinframes[0],//5
                                                               
                                                               alldustinframes[14],
                                                               alldustinframes[15],
                                                               alldustinframes[16],
                                                               alldustinframes[17],
                                                               alldustinframes[0],// 10
                                                               
                                                               alldustinframes[12],
                                                               alldustinframes[13],
                                                               alldustinframes[12],
                                                               alldustinframes[0]
                                                               
                                                               ] timePerFrame:0.06];
    
    
    
}

-(void)loadGerryAnimations{
    
    NSArray* allgerryframes = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry1%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry2%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry3%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry4%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry5%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry6%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry7%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry8%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry9%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry10%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry11%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry12%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry13%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry14%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry15%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry16%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry17%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry18%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry19%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry20%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry21%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry22%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry23%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry24%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry25%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry26%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry27%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry28%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry29%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry30%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry31%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry32%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry33%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry34%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry35%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry36%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry37%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry38%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry39%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry40%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry41%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry42%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry43%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry44%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry45%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry46%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry47%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry48%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-gerry49%@",_deviceModel]]
                                
                                ];
    
    _gerry_Animation_Shocker = [SKAction animateWithTextures:@[
                                                               
                                                               allgerryframes[48],
                                                               allgerryframes[2],
                                                               
                                                               ] timePerFrame:0.1];
    
    _gerry_Animation_Switch = [SKAction animateWithTextures:@[
                                                              
                                                              allgerryframes[1],
                                                              allgerryframes[2]
                                                              
                                                              ] timePerFrame:0.06];
    
    _gerry_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                                  
                                                                  allgerryframes[1],
                                                                  allgerryframes[0]
                                                                  
                                                                  ] timePerFrame:0.06];
    
    _gerry_Animation_Character = [SKAction animateWithTextures:@[
                                                                 
                                                                 allgerryframes[36], //2
                                                                 allgerryframes[37],
                                                                 allgerryframes[38],
                                                                 allgerryframes[39],//5
                                                                 
                                                                 allgerryframes[40],
                                                                 allgerryframes[41],
                                                                 allgerryframes[42],
                                                                 allgerryframes[43],
                                                                 allgerryframes[44],// 10
                                                                 
                                                                 allgerryframes[45],
                                                                 allgerryframes[46],
                                                                 allgerryframes[46],
                                                                 allgerryframes[46],
                                                                 allgerryframes[46],//15
                                                                 
                                                                 allgerryframes[46],
                                                                 allgerryframes[47],
                                                                 allgerryframes[43],
                                                                 allgerryframes[41],
                                                                 allgerryframes[39],// 20
                                                                 
                                                                 allgerryframes[38],
                                                                 allgerryframes[37],
                                                                 allgerryframes[0]// 23
                                                                 
                                                                 ] timePerFrame:0.06];
    
    _gerry_Animation_Delete = [SKAction animateWithTextures:@[
                                                              
                                                              allgerryframes[0],
                                                              allgerryframes[3],
                                                              allgerryframes[4]
                                                              
                                                              
                                                              ] timePerFrame:0.06];
    
    _gerry_Animation_Falling = [SKAction animateWithTextures:@[
                                                               
                                                               allgerryframes[0],
                                                               allgerryframes[1],
                                                               allgerryframes[2],
                                                               
                                                               allgerryframes[2],
                                                               allgerryframes[2],
                                                               allgerryframes[2],
                                                               
                                                               allgerryframes[2],
                                                               allgerryframes[1],
                                                               allgerryframes[0]
                                                               
                                                               ] timePerFrame:0.06];
    
    _gerry_Animation_Idle = [SKAction animateWithTextures:@[
                                                            
                                                            allgerryframes[20],
                                                            allgerryframes[21],
                                                            allgerryframes[22],
                                                            allgerryframes[23], // 5
                                                            
                                                            allgerryframes[24],
                                                            allgerryframes[25],
                                                            allgerryframes[26],
                                                            allgerryframes[27],
                                                            allgerryframes[28],//10
                                                            
                                                            allgerryframes[29],
                                                            allgerryframes[30],
                                                            allgerryframes[31],
                                                            allgerryframes[32],
                                                            allgerryframes[33],//15
                                                            
                                                            allgerryframes[34],
                                                            allgerryframes[35],
                                                            allgerryframes[0] // 18
                                                            
                                                            ] timePerFrame:0.06];
    
    _gerry_Animation_PickMe = [SKAction animateWithTextures:@[
                                                              
                                                              allgerryframes[5],
                                                              allgerryframes[6],
                                                              allgerryframes[7],
                                                              allgerryframes[8],//5
                                                              
                                                              allgerryframes[9],
                                                              allgerryframes[10],
                                                              allgerryframes[11],
                                                              allgerryframes[12],
                                                              allgerryframes[13],// 10
                                                              
                                                              allgerryframes[14],
                                                              allgerryframes[15],
                                                              allgerryframes[16],
                                                              allgerryframes[17],
                                                              allgerryframes[18],// 15
                                                              
                                                              allgerryframes[19],
                                                              allgerryframes[5],
                                                              allgerryframes[0]
                                                              
                                                              ] timePerFrame:0.06];
    
    
    
}

-(void)loadJJAnimations{
    
    NSArray* alljjframes = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj10%@",_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj16%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj17%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj18%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj19%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj20%@",_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj21%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj22%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj23%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj24%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj25%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj26%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj27%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj28%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj29%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj30%@",_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj31%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj32%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj33%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj34%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj35%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj36%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj37%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj38%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj39%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj40%@",_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj41%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj42%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cookie-jj43%@",_deviceModel]]
                             
                             ];
    
    _jj_Animation_Shocker = [SKAction animateWithTextures:@[
                                                            
                                                            alljjframes[42],
                                                            alljjframes[2],
                                                            
                                                            ] timePerFrame:0.1];
    
    _jj_Animation_Switch = [SKAction animateWithTextures:@[
                                                           
                                                           alljjframes[1],
                                                           alljjframes[2]
                                                           
                                                           ] timePerFrame:0.06];
    
    _jj_Animation_SwitchBack = [SKAction animateWithTextures:@[
                                                               
                                                               alljjframes[1],
                                                               alljjframes[0]
                                                               
                                                               ] timePerFrame:0.06];
    
    _jj_Animation_Character = [SKAction animateWithTextures:@[
                                                              
                                                              alljjframes[13], //2
                                                              alljjframes[14],
                                                              alljjframes[15],
                                                              alljjframes[16],//5
                                                              
                                                              alljjframes[17],
                                                              alljjframes[16],
                                                              alljjframes[15],
                                                              alljjframes[14],
                                                              alljjframes[18],// 10
                                                              
                                                              alljjframes[19],
                                                              alljjframes[20],
                                                              alljjframes[19],
                                                              alljjframes[18],
                                                              alljjframes[14],//15
                                                              
                                                              alljjframes[15],
                                                              alljjframes[16],
                                                              alljjframes[17],
                                                              alljjframes[16],
                                                              alljjframes[15],// 20
                                                              
                                                              alljjframes[14],
                                                              alljjframes[18],
                                                              alljjframes[19],
                                                              alljjframes[20],
                                                              alljjframes[18],// 25
                                                              
                                                              alljjframes[14],
                                                              alljjframes[13],
                                                              
                                                              alljjframes[0]// 28
                                                              
                                                              
                                                              ] timePerFrame:0.06];
    
    _jj_Animation_Delete = [SKAction animateWithTextures:@[
                                                           
                                                           alljjframes[0],
                                                           alljjframes[3],
                                                           alljjframes[4]
                                                           
                                                           
                                                           ] timePerFrame:0.06];
    
    _jj_Animation_Falling = [SKAction animateWithTextures:@[
                                                            
                                                            alljjframes[0],
                                                            alljjframes[1],
                                                            alljjframes[2],
                                                            
                                                            alljjframes[2],
                                                            alljjframes[2],
                                                            alljjframes[2],
                                                            
                                                            alljjframes[2],
                                                            alljjframes[1],
                                                            alljjframes[0]
                                                            
                                                            ] timePerFrame:0.06];
    
    _jj_Animation_Idle = [SKAction animateWithTextures:@[
                                                         
                                                         alljjframes[21],
                                                         alljjframes[22],
                                                         alljjframes[23],
                                                         alljjframes[24], // 5
                                                         
                                                         alljjframes[25],
                                                         alljjframes[26],
                                                         alljjframes[27],
                                                         alljjframes[28],
                                                         alljjframes[29],//10
                                                         
                                                         alljjframes[30],
                                                         alljjframes[31],
                                                         alljjframes[32],
                                                         alljjframes[33],
                                                         alljjframes[34],//15
                                                         
                                                         alljjframes[35],
                                                         alljjframes[36],
                                                         alljjframes[37],
                                                         alljjframes[38],
                                                         alljjframes[29],//20
                                                         
                                                         alljjframes[30],
                                                         alljjframes[31],
                                                         alljjframes[32],
                                                         alljjframes[33],
                                                         alljjframes[34],//25
                                                         
                                                         alljjframes[35],
                                                         alljjframes[39],
                                                         alljjframes[40],
                                                         alljjframes[41],
                                                         alljjframes[0]//30
                                                         
                                                         
                                                         ] timePerFrame:0.06];
    
    _jj_Animation_PickMe = [SKAction animateWithTextures:@[
                                                           
                                                           alljjframes[5],
                                                           alljjframes[6],
                                                           alljjframes[5],
                                                           alljjframes[7],//5
                                                           
                                                           alljjframes[8],
                                                           alljjframes[9],
                                                           alljjframes[10],
                                                           alljjframes[5],
                                                           alljjframes[6],// 10
                                                           
                                                           alljjframes[5],
                                                           alljjframes[0],
                                                           alljjframes[11],
                                                           alljjframes[0],
                                                           alljjframes[12],// 15
                                                           
                                                           alljjframes[0]
                                                           
                                                           ] timePerFrame:0.06];
    
    
    
}

#pragma mark - Super cookie loading

// Gary J.: HERE ARE THE SUPER COSTUME CHECKS >>>>

-(void)SetupSuperLooks
{
    [_cookieCostumeSelectedArray removeAllObjects];
    
    for (NSDictionary *dictionary in [[SGAppDelegate appDelegate].accountDict objectForKey:@"cookieCostumes"])
    {
        if ([dictionary objectForKey:@"isSelected"] == [NSNumber numberWithBool:YES])
        {
            [_cookieCostumeSelectedArray addObject:dictionary];
        }
    }
    
    if(self.parent != nil)
    {
        [self removeFromParent];
    }
    
    [[[SGGameManager gameManager] CurrentScene] addChild:self];
    
    self.superCookieTextures = [NSMutableArray new];
    
    SKTexture* placeHolderTexture = [SKTexture textureWithImageNamed:@"cdd-main-board-hud-icon-erron@2x"];
    [self.superCookieTextures addObjectsFromArray:@[
                                                    
                                                    placeHolderTexture,
                                                    placeHolderTexture,
                                                    placeHolderTexture,
                                                    placeHolderTexture,
                                                    placeHolderTexture,
                                                    placeHolderTexture,
                                                    placeHolderTexture
                                                    
                                                    ]];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
    
    
    NSMutableArray *selectedSuperCookieCostumes = [self selectedCookieCostumes];
    // supers
    NSPredicate *cookieNamePredicate = nil;
    
    // CHIP
    NSString* chipPref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].brownSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameChip];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0)
        {
            cookieInfo = cookieArray[0];
        }
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameChip])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
            
//            for (NSDictionary *dictionary in _cookieCostumeSelectedArray)
//            {
//                if ([[dictionary objectForKey:@"name"] isEqualToString:KeyNameChip])
//                {
//                    cookieTheme = [dictionary objectForKey:@"theme"];
//                }
//            }
        }
        cookieCostumeTypeString = cookieTheme;
        chipPref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].brownSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        chipPref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].brownSuperLooks isEqualToString:KeyThemeChef])
    {
        chipPref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].brownSuperLooks isEqualToString:KeyThemeFarmer])
    {
        chipPref = KeyThemeFarmer;
    }else if ([[SGPlayerPreferencesManager preferenceManager].brownSuperLooks isEqualToString:KeyThemeZombie])
    {
        chipPref = KeyThemeZombie;
    }
    
    
    
    // DUSTIN
    NSString* dustinPref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].greenSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameDustinMartianMint];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0)
            cookieInfo = cookieArray[0];
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameDustinMartianMint])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
        }
        cookieCostumeTypeString = cookieTheme;
        dustinPref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].greenSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        dustinPref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].greenSuperLooks isEqualToString:KeyThemeChef])
    {
        dustinPref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].greenSuperLooks isEqualToString:KeyThemeFarmer])
    {
        dustinPref = KeyThemeFarmer;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].greenSuperLooks isEqualToString:KeyThemeZombie])
    {
        dustinPref = KeyThemeZombie;
    }
    
    // JJ-JAMS
    NSString* jjPref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].redSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameJJJams];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0)
        {
            cookieInfo = cookieArray[0];
        }
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameJJJams])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
        }
        cookieCostumeTypeString = cookieTheme;
        jjPref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].redSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        jjPref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].redSuperLooks isEqualToString:KeyThemeChef])
    {
        jjPref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].redSuperLooks isEqualToString:KeyThemeFarmer])
    {
        jjPref = KeyThemeFarmer;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].redSuperLooks isEqualToString:KeyThemeZombie])
    {
        jjPref = KeyThemeZombie;
    }
    
    // REGINALD
    NSString* reginaldPref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].orangeSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameReginald];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0) cookieInfo = cookieArray[0];
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameReginald])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
        }
        cookieCostumeTypeString = cookieTheme;
        reginaldPref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].orangeSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        reginaldPref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].orangeSuperLooks isEqualToString:KeyThemeChef])
    {
        reginaldPref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].orangeSuperLooks isEqualToString:KeyThemeFarmer])
    {
        reginaldPref = KeyThemeFarmer;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].orangeSuperLooks isEqualToString:KeyThemeZombie])
    {
        reginaldPref = KeyThemeZombie;
    }
    
    
    // LUKE
    NSString* lukePref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].yellowSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameLukeLocoLemon];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0) cookieInfo = cookieArray[0];
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameLukeLocoLemon])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
        }
        cookieCostumeTypeString = cookieTheme;
        lukePref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].yellowSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        lukePref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].yellowSuperLooks isEqualToString:KeyThemeChef])
    {
        lukePref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].yellowSuperLooks isEqualToString:KeyThemeFarmer])
    {
        lukePref = KeyThemeFarmer;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].yellowSuperLooks isEqualToString:KeyThemeZombie])
    {
        lukePref = KeyThemeZombie;
    }
    
    // MIKE
    NSString* mikePref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].blueSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameMikeyMcSprinkles];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0) cookieInfo = cookieArray[0];
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameMikeyMcSprinkles])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
        }
        cookieCostumeTypeString = cookieTheme;
        mikePref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].blueSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        mikePref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].blueSuperLooks isEqualToString:KeyThemeChef])
    {
        mikePref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].blueSuperLooks isEqualToString:KeyThemeFarmer])
    {
        mikePref = KeyThemeFarmer;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].blueSuperLooks isEqualToString:KeyThemeZombie])
    {
        mikePref = KeyThemeZombie;
    }
    
    // GERRY J
    NSString* garryPref = @"";
    if([[SGPlayerPreferencesManager preferenceManager].purpleSuperLooks isEqualToString:KeyThemeDefault])
    {
        cookieNamePredicate = [NSPredicate predicateWithFormat:@"name MATCHES[cd] %@", KeyNameGerryJ];
        
        NSArray *cookieArray = [selectedSuperCookieCostumes filteredArrayUsingPredicate:cookieNamePredicate];
        
        NSDictionary *cookieInfo = nil;
        
        if ([cookieArray count] > 0) cookieInfo = cookieArray[0];
        
        NSString *cookieCostumeTypeString = nil;
        
        NSString *cookieTheme = nil;
        
        if (cookieInfo && cookieInfo[@"theme"])
        {
            //cookieTheme = cookieInfo[@"theme"];
            NSArray *cookieInfoArray = [[NSUserDefaults standardUserDefaults] objectForKey:CookieCostumeArrayDefault];
            for (NSMutableDictionary *dictionary in cookieInfoArray)
            {
                if ([[dictionary objectForKey:@"cookieName"] isEqualToString:KeyNameGerryJ])
                {
                    cookieTheme = [dictionary objectForKey:@"imageTheme"];
                }
            }
        }
        cookieCostumeTypeString = cookieTheme;
        garryPref = cookieCostumeTypeString;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].purpleSuperLooks isEqualToString:KeyThemeSuperHero])
    {
        garryPref = KeyThemeSuperHero;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].purpleSuperLooks isEqualToString:KeyThemeChef])
    {
        garryPref = KeyThemeChef;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].purpleSuperLooks isEqualToString:KeyThemeFarmer])
    {
        garryPref = KeyThemeFarmer;
    }
    else if ([[SGPlayerPreferencesManager preferenceManager].purpleSuperLooks isEqualToString:KeyThemeZombie])
    {
        garryPref = KeyThemeZombie;
    }
    
    // Gary J.: remove this later!!!!
    {
        /*
        chipPref = KeyThemeUndead;

        mikePref = KeyThemeUndead;

        reginaldPref = KeyThemeUndead;
        
        lukePref = KeyThemeUndead;
        
        dustinPref = KeyThemeUndead;

        garryPref = KeyThemeUndead;

        jjPref = KeyThemeUndead;
      */
    }
    
    
    [SGPlayerPreferencesManager preferenceManager].brownSuperLooks = chipPref;
    [SGPlayerPreferencesManager preferenceManager].blueSuperLooks = mikePref;
    [SGPlayerPreferencesManager preferenceManager].orangeSuperLooks = reginaldPref;
    [SGPlayerPreferencesManager preferenceManager].yellowSuperLooks = lukePref;
    [SGPlayerPreferencesManager preferenceManager].greenSuperLooks = dustinPref;
    [SGPlayerPreferencesManager preferenceManager].purpleSuperLooks = garryPref;
    [SGPlayerPreferencesManager preferenceManager].redSuperLooks = jjPref;

    
    // now call the loading methods
    
    if([chipPref isEqualToString:KeyThemeDefault]){
        [self LoadingChipSuper_old];
    }else if([chipPref isEqualToString:KeyThemeChef]){
        [self LoadingChipSuper_Chef];
    }else if([chipPref isEqualToString:KeyThemeSuperHero]){
        [self LoadingChipSuper_SuperHero];
    }else if([chipPref isEqualToString:KeyThemeFarmer]){
        [self LoadingChipSuper_Farmer];
    }else if([chipPref isEqualToString:KeyThemeZombie]){
        [self LoadingChipSuper_Zombie];
    }
    
    if([mikePref isEqualToString:KeyThemeDefault]){
        [self LoadingMikeySuper_old];
    }else if([mikePref isEqualToString:KeyThemeChef]){
        [self LoadingMikeySuper_Chef];
    }else if([mikePref isEqualToString:KeyThemeSuperHero]){
        [self LoadingMikeySuper_SuperHero];
    }else if([mikePref isEqualToString:KeyThemeFarmer]){
        [self LoadingMikeySuper_Farmer];
    }else if([mikePref isEqualToString:KeyThemeZombie]){
        [self LoadingMikeySuper_Zombie];
    }
    
    if([reginaldPref isEqualToString:KeyThemeDefault]){
        [self LoadingReginaldSuper_old];
    }else if([reginaldPref isEqualToString:KeyThemeChef]){
        [self LoadingReginaldSuper_Chef];
    }else if([reginaldPref isEqualToString:KeyThemeSuperHero]){
        [self LoadingReginaldSuper_SuperHero];
    }else if([reginaldPref isEqualToString:KeyThemeFarmer]){
        [self LoadingReginaldSuper_Farmer];
    }else if([reginaldPref isEqualToString:KeyThemeZombie]){
        [self LoadingReginaldSuper_Zombie];
    }
    
    if([lukePref isEqualToString:KeyThemeDefault]){
        [self LoadingLukeSuper_old];
    }else if([lukePref isEqualToString:KeyThemeChef]){
        [self LoadingLukeSuper_Chef];
    }else if([lukePref isEqualToString:KeyThemeSuperHero]){
        [self LoadingLukeSuper_SuperHero];
    }else if([lukePref isEqualToString:KeyThemeFarmer]){
        [self LoadingLukeSuper_Farmer];
    }else if([lukePref isEqualToString:KeyThemeZombie]){
        [self LoadingLukeSuper_Zombie];
    }
    
    if([dustinPref isEqualToString:KeyThemeDefault]){
        [self LoadingDustinSuper_old];
    }else if([dustinPref isEqualToString:KeyThemeChef]){
        [self LoadingDustinSuper_Chef];
    }else if([dustinPref isEqualToString:KeyThemeSuperHero]){
        [self LoadingDustinSuper_SuperHero];
    }else if([dustinPref isEqualToString:KeyThemeFarmer]){
        [self LoadingDustinSuper_Farmer];
    }else if([dustinPref isEqualToString:KeyThemeZombie]){
        [self LoadingDustinSuper_Zombie];
    }
    
    if([garryPref isEqualToString:KeyThemeDefault]){
        [self LoadingGerrySuper_old];
    }else if([garryPref isEqualToString:KeyThemeChef]){
        [self LoadingGerrySuper_Chef];
    }else if([garryPref isEqualToString:KeyThemeSuperHero]){
        [self LoadingGerrySuper_SuperHero];
    }else if([garryPref isEqualToString:KeyThemeFarmer]){
        [self LoadingGerrySuper_Farmer];
    }else if([garryPref isEqualToString:KeyThemeZombie]){
        [self LoadingGerrySuper_Zombie];
    }
    
    if([jjPref isEqualToString:KeyThemeDefault]){
        [self LoadingJJSuper_old];
    }else if([jjPref isEqualToString:KeyThemeChef]){
        [self LoadingJJSuper_Chef];
    }else if([jjPref isEqualToString:KeyThemeSuperHero]){
        [self LoadingJJSuper_SuperHero];
    }else if([jjPref isEqualToString:KeyThemeFarmer]){
        [self LoadingJJSuper_Farmer];
    }else if([jjPref isEqualToString:KeyThemeZombie]){
        [self LoadingJJSuper_Zombie];
    }
    
}


#pragma mark - Old supers loading

-(void)LoadingChipSuper_old
{
    
    NSString *chipPref = @"milkyway";
    
    // CHIP ANIMATION FRAMES
    
    NSArray* chipFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side1%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side2%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side3%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side4%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side5%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side6%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side7%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side8%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side9%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side10%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side11%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side12%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side13%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-side14%@",chipPref,_deviceModel]],
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up1%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up2%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up3%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up4%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up5%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up6%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up7%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up8%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up9%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up10%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up11%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up12%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up13%@",chipPref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-chip-up14%@",chipPref,_deviceModel]]
                            
                            ];
    
    // animation
        
    NSArray* runTransition = @[
                               chipFrames[0],
                               chipFrames[1],
                               chipFrames[2],
                               chipFrames[3],
                               chipFrames[4],
                               chipFrames[5]
                               
                               ];
    NSArray* runLoop = @[
                         
                         chipFrames[6],
                         chipFrames[7],
                         chipFrames[8],
                         chipFrames[9],
                         chipFrames[10],
                         chipFrames[11],
                         chipFrames[12],
                         chipFrames[13]
                         
                         ];
    
    SKAction* chip_Animation_hero_Hor = [SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                    [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]];
    NSArray* flyTransition = @[
                               chipFrames[14],
                               chipFrames[15],
                               chipFrames[16],
                               chipFrames[17],
                               chipFrames[18],
                               chipFrames[19],
                               chipFrames[20],
                               chipFrames[21],
                               chipFrames[22],
                               chipFrames[23],
                               chipFrames[24]
                               
                               ];
    NSArray* flyLoop = @[
                         
                         chipFrames[25],
                         chipFrames[26],
                         chipFrames[27]
                         
                         ];
    
    SKAction* chip_Animation_hero_Vert = [SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                   [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]];


    _chip_Animation_hero_Switch = nil;
    _chip_Animation_hero_SwitchBack = nil;
    _chip_Animation_hero_PickMe = nil;
    _chip_Animation_hero_Idle = nil;
    
    _chip_hero_Hor_Animations = @[chip_Animation_hero_Hor];
    
    _chip_hero_Vert_Animations = @[chip_Animation_hero_Vert];
    
    _superCookieTextures[6] = chipFrames[0];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
    
}

-(void)LoadingMikeySuper_old
{
    NSString *mikePref = @"milkyway";
    
    // MIKE ANIMATION FRAMES
    
    NSArray* mikeFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side1%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side2%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side3%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side4%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side5%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side6%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side7%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side8%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side9%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side10%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side11%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side12%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side13%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-side14%@",mikePref,_deviceModel]],
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up1%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up2%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up3%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up4%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up5%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up6%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up7%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up8%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up9%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up10%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up11%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up12%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up13%@",mikePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-mike-up14%@",mikePref,_deviceModel]]
                            
                            ];
    
    // animation
    {
        
        NSArray* runTransition = @[
                                   mikeFrames[0],
                                   mikeFrames[1],
                                   mikeFrames[2],
                                   mikeFrames[3],
                                   mikeFrames[4],
                                   mikeFrames[5]
                                   
                                   ];
        NSArray* runLoop = @[
                             
                             mikeFrames[6],
                             mikeFrames[7],
                             mikeFrames[8],
                             mikeFrames[9],
                             mikeFrames[10],
                             mikeFrames[11],
                             mikeFrames[12],
                             mikeFrames[13]
                             
                             ];
        
        _mikey_hero_Hor_Animations = @[
                                       [SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]]
                                       ];
                                       
        NSArray* flyTransition = @[
                                   mikeFrames[14],
                                   mikeFrames[15],
                                   mikeFrames[16],
                                   mikeFrames[17],
                                   mikeFrames[18],
                                   mikeFrames[19],
                                   mikeFrames[20],
                                   mikeFrames[21],
                                   mikeFrames[22],
                                   mikeFrames[23],
                                   mikeFrames[24]
                                   
                                   ];
        NSArray* flyLoop = @[
                             
                             mikeFrames[25],
                             mikeFrames[26],
                             mikeFrames[27]
                             
                             ];
        
        _mikey_hero_Vert_Animations = @[
                                        [SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]]
                                        ];
        
    }
    
    _mikey_Animation_hero_Switch = nil;
    _mikey_Animation_hero_SwitchBack = nil;
    _mikey_Animation_hero_PickMe = nil;
    _mikey_Animation_hero_Idle = nil;
    
    _superCookieTextures[4] = mikeFrames[0];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
    
    
}
-(void)LoadingReginaldSuper_old
{
    NSString *reginaldPref = @"milkyway";
    
    // REGINALD ANIMATION FRAMES
    
    NSArray* reginaldFrames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side1%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side2%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side3%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side4%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side5%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side6%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side7%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side8%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side9%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side10%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side11%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side12%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side13%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-side14%@",reginaldPref,_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up1%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up2%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up3%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up4%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up5%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up6%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up7%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up8%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up9%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up10%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up11%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up12%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up13%@",reginaldPref,_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-reginald-up14%@",reginaldPref,_deviceModel]]
                                
                                ];
    
    // animation
    {
        
        NSArray* runTransition = @[
                                   reginaldFrames[0],
                                   reginaldFrames[1],
                                   reginaldFrames[2],
                                   reginaldFrames[3],
                                   reginaldFrames[4],
                                   reginaldFrames[5]
                                   
                                   ];
        NSArray* runLoop = @[
                             
                             reginaldFrames[6],
                             reginaldFrames[7],
                             reginaldFrames[8],
                             reginaldFrames[9],
                             reginaldFrames[10],
                             reginaldFrames[11],
                             reginaldFrames[12],
                             reginaldFrames[13]
                             
                             ];
        
        _reginald_hero_Hor_Animations = @[
                                     [SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                            [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]]
                                      
                                      ];
        
        NSArray* flyTransition = @[
                                   reginaldFrames[14],
                                   reginaldFrames[15],
                                   reginaldFrames[16],
                                   reginaldFrames[17],
                                   reginaldFrames[18],
                                   reginaldFrames[19],
                                   reginaldFrames[20],
                                   reginaldFrames[21],
                                   reginaldFrames[22],
                                   reginaldFrames[23],
                                   reginaldFrames[24]
                                   
                                   ];
        NSArray* flyLoop = @[
                             
                             reginaldFrames[25],
                             reginaldFrames[26],
                             reginaldFrames[27]
                             
                             ];
        
        _reginald_hero_Vert_Animations = @[
                                      [SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                            [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]]
                                       
                                       ];
        
    }
    
    _reginald_Animation_hero_Switch = nil;
    _reginald_Animation_hero_SwitchBack = nil;
    _reginald_Animation_hero_PickMe = nil;
    _reginald_Animation_hero_Idle = nil;
    
    _superCookieTextures[1] = reginaldFrames[0];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
}

-(void)LoadingLukeSuper_old
{
    NSString *lukePref = @"milkyway";
    
    // LUKE ANIMATION FRAMES
    
    NSArray* lukeFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side1%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side2%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side3%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side4%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side5%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side6%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side7%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side8%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side9%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side10%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side11%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side12%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side13%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-side14%@",lukePref,_deviceModel]],
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up1%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up2%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up3%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up4%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up5%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up6%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up7%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up8%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up9%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up10%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up11%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up12%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up13%@",lukePref,_deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-luke-up14%@",lukePref,_deviceModel]]
                            
                            ];
    
    // animation
    {
        
        NSArray* runTransition = @[
                                   lukeFrames[0],
                                   lukeFrames[1],
                                   lukeFrames[2],
                                   lukeFrames[3],
                                   lukeFrames[4],
                                   lukeFrames[5]
                                   
                                   ];
        NSArray* runLoop = @[
                             
                             lukeFrames[6],
                             lukeFrames[7],
                             lukeFrames[8],
                             lukeFrames[9],
                             lukeFrames[10],
                             lukeFrames[11],
                             lukeFrames[12],
                             lukeFrames[13]
                             
                             ];
        
        _luke_hero_Hor_Animations = @[[SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                        [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]]];
        NSArray* flyTransition = @[
                                   lukeFrames[14],
                                   lukeFrames[15],
                                   lukeFrames[16],
                                   lukeFrames[17],
                                   lukeFrames[18],
                                   lukeFrames[19],
                                   lukeFrames[20],
                                   lukeFrames[21],
                                   lukeFrames[22],
                                   lukeFrames[23],
                                   lukeFrames[24]
                                   
                                   ];
        NSArray* flyLoop = @[
                             
                             lukeFrames[25],
                             lukeFrames[26],
                             lukeFrames[27]
                             
                             ];
        
        _luke_hero_Vert_Animations = @[
                                       [SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                        [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]]
                                       ];
        
    }
    
    _luke_Animation_hero_Switch = nil;
    _luke_Animation_hero_SwitchBack = nil;
    _luke_Animation_hero_PickMe = nil;
    _luke_Animation_hero_Idle = nil;
    
    _superCookieTextures[2] = lukeFrames[0];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
}
-(void)LoadingDustinSuper_old
{
    
    NSString *dustinPref = @"milkyway";
    
    // DUSTIN ANIMATION FRAMES
    
    NSArray* dustinFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side1%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side2%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side3%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side4%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side5%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side6%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side7%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side8%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side9%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side10%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side11%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side12%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side13%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-side14%@",dustinPref,_deviceModel]],
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up1%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up2%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up3%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up4%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up5%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up6%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up7%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up8%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up9%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up10%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up11%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up12%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up13%@",dustinPref,_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-dustin-up14%@",dustinPref,_deviceModel]]
                              
                              ];
    
    // animation
    {
        
        NSArray* runTransition = @[
                                   dustinFrames[0],
                                   dustinFrames[1],
                                   dustinFrames[2],
                                   dustinFrames[3],
                                   dustinFrames[4],
                                   dustinFrames[5]
                                   
                                   ];
        NSArray* runLoop = @[
                             
                             dustinFrames[6],
                             dustinFrames[7],
                             dustinFrames[8],
                             dustinFrames[9],
                             dustinFrames[10],
                             dustinFrames[11],
                             dustinFrames[12],
                             dustinFrames[13]
                             
                             ];
        
        SKAction* dustin_Animation_hero_run = [SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                          [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]];
        NSArray* flyTransition = @[
                                   dustinFrames[14],
                                   dustinFrames[15],
                                   dustinFrames[16],
                                   dustinFrames[17],
                                   dustinFrames[18],
                                   dustinFrames[19],
                                   dustinFrames[20],
                                   dustinFrames[21],
                                   dustinFrames[22],
                                   dustinFrames[23],
                                   dustinFrames[24]
                                   
                                   ];
        NSArray* flyLoop = @[
                             
                             dustinFrames[25],
                             dustinFrames[26],
                             dustinFrames[27]
                             
                             ];
        
        SKAction* dustin_Animation_hero_fly = [SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                          [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]];
        
        
        _dustin_hero_Hor_Animations = @[dustin_Animation_hero_run];
        
        _dustin_hero_Vert_Animations = @[dustin_Animation_hero_fly];
        
        
    }
    
    _dustin_Animation_hero_Switch = nil;
    _dustin_Animation_hero_SwitchBack = nil;
    _dustin_Animation_hero_PickMe = nil;
    _dustin_Animation_hero_Idle = nil;
    
    _superCookieTextures[3] = dustinFrames[0];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
    
}
-(void)LoadingGerrySuper_old
{
    NSString *garryPref = @"milkyway";
    
    // GERRY J ANIMATION FRAMES
    
    NSArray* garryFrames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side1%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side2%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side3%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side4%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side5%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side6%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side7%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side8%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side9%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side10%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side11%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side12%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side13%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-side14%@",garryPref,_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up1%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up2%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up3%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up4%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up5%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up6%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up7%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up8%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up9%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up10%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up11%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up12%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up13%@",garryPref,_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-garry-up14%@",garryPref,_deviceModel]]
                             
                             ];
    
    // animation
    {
        
        NSArray* runTransition = @[
                                   garryFrames[0],
                                   garryFrames[1],
                                   garryFrames[2],
                                   garryFrames[3],
                                   garryFrames[4],
                                   garryFrames[5]
                                   
                                   ];
        NSArray* runLoop = @[
                             
                             garryFrames[6],
                             garryFrames[7],
                             garryFrames[8],
                             garryFrames[9],
                             garryFrames[10],
                             garryFrames[11],
                             garryFrames[12],
                             garryFrames[13]
                             
                             ];
        
        _gerry_hero_Hor_Animations = @[ [SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]]
                                        
                                        ];
        
        NSArray* flyTransition = @[
                                   garryFrames[14],
                                   garryFrames[15],
                                   garryFrames[16],
                                   garryFrames[17],
                                   garryFrames[18],
                                   garryFrames[19],
                                   garryFrames[20],
                                   garryFrames[21],
                                   garryFrames[22],
                                   garryFrames[23],
                                   garryFrames[24]
                                   
                                   ];
        NSArray* flyLoop = @[
                             
                             garryFrames[25],
                             garryFrames[26],
                             garryFrames[27]
                             
                             ];
        
        _gerry_hero_Vert_Animations = @[[SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                              [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]]
                                         
                                         ];
        
    }
    
    _gerry_Animation_hero_Switch = nil;
    _gerry_Animation_hero_SwitchBack = nil;
    _gerry_Animation_hero_PickMe = nil;
    _gerry_Animation_hero_Idle = nil;
    
    _superCookieTextures[5] = garryFrames[0];
    
    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
    
}
-(void)LoadingJJSuper_old
{
    
    NSString *jjPref = @"milkyway";
    // JJ-JAMS ANIMATION FRAMES
    
    NSArray* jjFrames = @[
                          
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side1%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side2%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side3%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side4%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side5%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side6%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side7%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side8%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side9%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side10%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side11%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side12%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side13%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-side14%@",jjPref,_deviceModel]],
                          
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up1%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up2%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up3%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up4%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up5%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up6%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up7%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up8%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up9%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up10%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up11%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up12%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up13%@",jjPref,_deviceModel]],
                          [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"%@-hero-jj-up14%@",jjPref,_deviceModel]]
                          
                          ];
    
    // animation
    {
        
        NSArray* runTransition = @[
                                   jjFrames[0],
                                   jjFrames[1],
                                   jjFrames[2],
                                   jjFrames[3],
                                   jjFrames[4],
                                   jjFrames[5]
                                   
                                   ];
        NSArray* runLoop = @[
                             
                             jjFrames[6],
                             jjFrames[7],
                             jjFrames[8],
                             jjFrames[9],
                             jjFrames[10],
                             jjFrames[11],
                             jjFrames[12],
                             jjFrames[13]
                             
                             ];
        
        _jj_hero_Hor_Animations = @[
                                    [SKAction sequence:@[[SKAction animateWithTextures:runTransition timePerFrame:0.06],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:runLoop timePerFrame:0.06]]]]
        
        ];
        
        NSArray* flyTransition = @[
                                   jjFrames[14],
                                   jjFrames[15],
                                   jjFrames[16],
                                   jjFrames[17],
                                   jjFrames[18],
                                   jjFrames[19],
                                   jjFrames[20],
                                   jjFrames[21],
                                   jjFrames[22],
                                   jjFrames[23],
                                   jjFrames[24]
                                   
                                   ];
        NSArray* flyLoop = @[
                             
                             jjFrames[25],
                             jjFrames[26],
                             jjFrames[27]
                             
                             ];
        
        _jj_hero_Vert_Animations = @[
                                     [SKAction sequence:@[[SKAction animateWithTextures:flyTransition timePerFrame:0.06],
                                                      [SKAction repeatActionForever:[SKAction animateWithTextures:flyLoop timePerFrame:0.06]]]]
                                       ];
        
    }
    
    _jj_Animation_hero_Switch = nil;
    _jj_Animation_hero_SwitchBack = nil;
    _jj_Animation_hero_PickMe = nil;
    _jj_Animation_hero_Idle = nil;
    
    _superCookieTextures[0] = jjFrames[0];

    /*
     self.superCookieTextures = @[
     
     jjFrames[0],
     reginaldFrames[0],
     lukeFrames[0],
     dustinFrames[0],
     mikeFrames[0],
     garryFrames[0],
     chipFrames[0]
     
     ];
     */
    
}

#pragma mark - Chef loading

-(void)LoadingChipSuper_Chef
{
    NSString* hero = @"chip";
    
    SKTexture* idle_stance = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]];
    _superCookieTextures[6] = idle_stance;
    
    NSArray* idleFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle5%@", hero, _deviceModel]]
                            
                            ];
    
    _chip_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                idle_stance,
                                                                idleFrames[0],
                                                                
                                                                idleFrames[1], // dance
                                                                idleFrames[2],
                                                                idleFrames[3],
                                                                idleFrames[2],
                                                                idleFrames[1],
                                                                
                                                                idleFrames[1], // dance
                                                                idleFrames[2],
                                                                idleFrames[3],
                                                                idleFrames[2],
                                                                idleFrames[1],
                                                                
                                                                idleFrames[0],
                                                                idle_stance
                                                                
                                                                ] timePerFrame:0.07f];
    
    NSArray* switchFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                            
                            ];
    
    _chip_Animation_hero_Switch = [SKAction animateWithTextures:@[
                                                                  idle_stance,
                                                                  switchFrames[0],
                                                                  switchFrames[1]
                                                                  ] timePerFrame:0.06f];
    
    _chip_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      switchFrames[1],
                                                                      switchFrames[0],
                                                                      idle_stance
                                                                      ] timePerFrame:0.06f];
    
    NSArray* pickMeFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme9%@", hero, _deviceModel]]
                              
                              ];
    
    _chip_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  idle_stance,
                                                                  pickMeFrames[0],
                                                                  pickMeFrames[1],
                                                                  pickMeFrames[2],
                                                                  pickMeFrames[3],
                                                                  pickMeFrames[4],
                                                                  pickMeFrames[5],
                                                                  pickMeFrames[6],
                                                                  pickMeFrames[7],
                                                                  idle_stance
                                                                  
                                                                  ] timePerFrame:0.06f];
    NSArray* horFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz9%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz10%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz11%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz12%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz13%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz14%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz15%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz16%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz17%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz18%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz19%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz20%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz21%@", hero, _deviceModel]]
                              
                              ];
    
    _chip_hero_Hor_Animations = @[
                                  [SKAction sequence:@[
                                                       [SKAction animateWithTextures:horFrames timePerFrame:0.06f],
                                                       [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                     horFrames[14],
                                                                                                                     horFrames[15],
                                                                                                                     horFrames[16],
                                                                                                                     horFrames[17],
                                                                                                                     horFrames[18],
                                                                                                                     horFrames[19]
                                                                                                                     ] timePerFrame:0.06f]]
                                                       ]]
                                  ];
    
    
    NSArray* vertFrames = @[
                           
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert2%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert3%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert4%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert5%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert6%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert7%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert8%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert9%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert10%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert11%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert12%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert13%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert14%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert15%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert16%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert17%@", hero, _deviceModel]]
                           
                           ];
    
    _chip_hero_Vert_Animations = @[
                                  [SKAction sequence:@[
                                                       [SKAction animateWithTextures:vertFrames timePerFrame:0.06f],
                                                       [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                     vertFrames[4],
                                                                                                                     vertFrames[5],
                                                                                                                     vertFrames[6],
                                                                                                                     vertFrames[7],
                                                                                                                     vertFrames[8],
                                                                                                                     vertFrames[9],
                                                                                                                     vertFrames[10],
                                                                                                                     vertFrames[11],
                                                                                                                     vertFrames[12],
                                                                                                                     vertFrames[13],
                                                                                                                     vertFrames[14],
                                                                                                                     vertFrames[15]
                                                                                                                     ] timePerFrame:0.06f]]
                                                       ]]
                                  ];

    
}
-(void)LoadingMikeySuper_Chef
{
    
    NSString* hero = @"mikey";
    
    NSArray* switchFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                              
                              ];

    _mikey_Animation_hero_Switch = [SKAction animateWithTextures:switchFrames timePerFrame:0.06f];
    
    _mikey_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                    
                                                                       switchFrames[1],
                                                                       switchFrames[0]
                                                                       
                                                                       ] timePerFrame:0.06f];
    
    
    NSArray* hor_frames = @[
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz1%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz2%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz3%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz4%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz5%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz6%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz7%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz8%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz9%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz10%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz11%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz12%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz13%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz14%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz15%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz16%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz17%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz18%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz19%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz20%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-horiz21%@", _deviceModel]]
                              
                              ];
    
    NSArray* vert_frames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert1%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert2%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert3%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert4%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert5%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert6%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert7%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert8%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert9%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert10%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert11%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert12%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert13%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert14%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert15%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert16%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-mikey-vert17%@", _deviceModel]]
                              
                              ];
    
    
    _mikey_hero_Hor_Animations = @[
                                   [SKAction group:@[
                                   [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                   hor_frames[0],
                                                                   hor_frames[1],
                                                                   hor_frames[2],
                                                                   hor_frames[3],
                                                                   hor_frames[4],
                                                                   hor_frames[5],
                                                                   hor_frames[6],
                                                                   hor_frames[7],
                                                                   hor_frames[8],
                                                                   hor_frames[9],
                                                                   hor_frames[10],
                                                                   hor_frames[11],
                                                                   hor_frames[12],
                                                                   hor_frames[13],
                                                                   hor_frames[14],
                                                                   hor_frames[15],
                                                                   hor_frames[16],
                                                                   hor_frames[17],
                                                                   hor_frames[18],
                                                                   hor_frames[19],
                                                                   hor_frames[20]
                                                                   
                                                                   ] timePerFrame:0.06f],
                                                        [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                      hor_frames[15],
                                                                                                                      hor_frames[16],
                                                                                                                      hor_frames[17],
                                                                                                                      hor_frames[18],
                                                                                                                      hor_frames[19],
                                                                                                                      hor_frames[20]
                                                                                                                      ] timePerFrame:0.06f]]]],
                                   [SKAction scaleXTo:1.1319f y:1.0f duration:0.0f]
                                   ]]];
    
    
    _mikey_hero_Vert_Animations = @[
                                    [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                         vert_frames[0],
                                                                                         vert_frames[1],
                                                                                         vert_frames[2],
                                                                                         vert_frames[3],
                                                                                         vert_frames[4],
                                                                                         vert_frames[5],
                                                                                         vert_frames[6],
                                                                                         vert_frames[7],
                                                                                         vert_frames[8],
                                                                                         vert_frames[9],
                                                                                         vert_frames[10],
                                                                                         vert_frames[11],
                                                                                         vert_frames[12],
                                                                                         vert_frames[13],
                                                                                         vert_frames[14],
                                                                                         vert_frames[15],
                                                                                         vert_frames[16]
                                                                                         
                                                                                         ] timePerFrame:0.06f],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                       vert_frames[11],
                                                                                                                       vert_frames[12],
                                                                                                                       vert_frames[13],
                                                                                                                       vert_frames[14],
                                                                                                                       vert_frames[15],
                                                                                                                       vert_frames[16]
                                                                                                                       ] timePerFrame:0.06f]]
                                                         ]]

                                    
                                    ];
    
    
    NSArray* pickmeFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me9%@", hero, _deviceModel]]
                              
                              ];
    
    _mikey_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                   
                                                                   pickmeFrames[0],
                                                                   pickmeFrames[1],
                                                                   pickmeFrames[2],
                                                                   pickmeFrames[3],
                                                                   pickmeFrames[4],
                                                                   pickmeFrames[5],
                                                                   pickmeFrames[6],
                                                                   pickmeFrames[7],
                                                                   pickmeFrames[8],
                                                                   
                                                                   pickmeFrames[1],
                                                                   pickmeFrames[0],
                                                                   switchFrames[0]
                                                                   
                                                                   ] timePerFrame:0.07f];
    
    NSArray* idleFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character9%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character10%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character11%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character12%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character13%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-character14%@", hero, _deviceModel]]
                              
                              ];
    
    _mikey_Animation_hero_Idle = [SKAction group:@[
                                                   [SKAction scaleXTo:1.2361f y:1.0f duration:0.0f],
                                                   [SKAction sequence:@[
                                                   [SKAction animateWithTextures:@[
                                                                 
                                                                 idleFrames[0],
                                                                 idleFrames[1],
                                                                 idleFrames[2],
                                                                 idleFrames[3],
                                                                 idleFrames[4],
                                                                 idleFrames[5],
                                                                 idleFrames[6],
                                                                 idleFrames[7],
                                                                 idleFrames[8],
                                                                 idleFrames[9],
                                                                 idleFrames[10],
                                                                 idleFrames[11],
                                                                 idleFrames[12],
                                                                 idleFrames[13],
                                                                 
                                                                 idleFrames[1],
                                                                 idleFrames[0],
                                                                 
                                                                 ] timePerFrame:0.06f],
                                                   [SKAction group:@[
                                                                     [SKAction scaleXTo:1.0f y:1.0f duration:0.0f],
                                                                     [SKAction animateWithTextures:@[switchFrames[0]] timePerFrame:0.0f]
                                                                     ]]
                                                   ]]
                                                ]];
    
    _superCookieTextures[4] = switchFrames[0];
    
}
-(void)LoadingReginaldSuper_Chef
{
    
    NSString* hero = @"reginald";
    
    NSArray* switchFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                              
                              ];
    
    _reginald_Animation_hero_Switch = [SKAction animateWithTextures:switchFrames timePerFrame:0.06f];
    
    _reginald_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                       
                                                                       switchFrames[1],
                                                                       switchFrames[0]
                                                                       
                                                                       ] timePerFrame:0.06f];
    
    NSArray* hor_frames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz1%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz2%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz3%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz4%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz5%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz6%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz7%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz8%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz9%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz10%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz11%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz12%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz13%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz14%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz15%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz16%@", _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-horiz17%@", _deviceModel]]
                              
                              ];
    
    NSArray* vert_frames = @[
                             
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert1%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert2%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert3%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert4%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert5%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert6%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert7%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert8%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert9%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert10%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert11%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert12%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert13%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert14%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert15%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert16%@", _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-reginald-vert17%@", _deviceModel]]
                            
                            ];

    _reginald_hero_Vert_Animations = @[
                                 [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                      vert_frames[0],
                                                                                      vert_frames[1],
                                                                                      vert_frames[2],
                                                                                      vert_frames[3],
                                                                                      vert_frames[4]
                                                                                      
                                                                                      ] timePerFrame:0.06f],
                                                      [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                    
                                                                                                                    vert_frames[5],
                                                                                                                    vert_frames[6],
                                                                                                                    vert_frames[7],
                                                                                                                    vert_frames[8],
                                                                                                                    vert_frames[9],
                                                                                                                    vert_frames[10],
                                                                                                                    vert_frames[11],
                                                                                                                    vert_frames[12],
                                                                                                                    vert_frames[13],
                                                                                                                    vert_frames[14],
                                                                                                                    vert_frames[15],
                                                                                                                    vert_frames[16]
                                                                                                                    
                                                                                                                    ] timePerFrame:0.06f]]
                                                      ]]
                                 
                                 ];
    
    _reginald_hero_Hor_Animations = @[
                                 [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                      hor_frames[0],
                                                                                      hor_frames[1],
                                                                                      hor_frames[2],
                                                                                      hor_frames[3],
                                                                                      hor_frames[4],
                                                                                      hor_frames[5],
                                                                                      hor_frames[6],
                                                                                      hor_frames[7],
                                                                                      hor_frames[8],
                                                                                      hor_frames[9],
                                                                                      hor_frames[10]
                                                                                      
                                                                                      ] timePerFrame:0.06f],
                                                      [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                    
                                                                                                                    hor_frames[11],
                                                                                                                    hor_frames[12],
                                                                                                                    hor_frames[13],
                                                                                                                    hor_frames[14],
                                                                                                                    hor_frames[15],
                                                                                                                    hor_frames[16]
                                                                                                                    
                                                                                                                    ] timePerFrame:0.06f]]
                                                      ]]
                                 
                                 ];
    
    
    NSArray* idleFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle10%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle11%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle12%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle13%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle14%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle15%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle16%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle17%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle18%@", hero, _deviceModel]]
                            
                            ];
    
    
    _reginald_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                
                                                                idleFrames[0],
                                                                idleFrames[1],
                                                                idleFrames[2],
                                                                idleFrames[3],
                                                                idleFrames[4],
                                                                idleFrames[5],
                                                                idleFrames[6],
                                                                idleFrames[7],
                                                                idleFrames[8],
                                                                idleFrames[8],
                                                                idleFrames[9],
                                                                idleFrames[10],
                                                                idleFrames[10],
                                                                idleFrames[11],
                                                                idleFrames[12],
                                                                idleFrames[12],
                                                                idleFrames[13],
                                                                idleFrames[14],
                                                                idleFrames[14],
                                                                idleFrames[15],
                                                                idleFrames[16],
                                                                idleFrames[17],
                                                                idleFrames[1],
                                                                idleFrames[0],
                                                                
                                                                ] timePerFrame:0.07f];
    
    NSArray* pickmeFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pick me9%@", hero, _deviceModel]]
                            
                            ];
    
    _reginald_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                      pickmeFrames[0],
                                                                      pickmeFrames[1],
                                                                      pickmeFrames[2],
                                                                      pickmeFrames[3],
                                                                      pickmeFrames[4],
                                                                      pickmeFrames[5],
                                                                      pickmeFrames[6],
                                                                      pickmeFrames[7],
                                                                      pickmeFrames[8],
                                                                      
                                                                      pickmeFrames[1],
                                                                      pickmeFrames[0],
                                                                      
                                                                      switchFrames[0]
                                                                      ] timePerFrame:0.07f];
    
    
    _superCookieTextures[1] = switchFrames[0];
    
}
-(void)LoadingLukeSuper_Chef
{
    
    NSArray* vert_frames = @[
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert1%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert2%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert3%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert4%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert5%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert6%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert7%@", _deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-vert8%@", _deviceModel]]
                    
                                 
                                 ];
    
    NSArray* hor_frames = @[
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz1%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz2%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz3%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz4%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz5%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz6%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz7%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz8%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz9%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz10%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz11%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz12%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz13%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz14%@", _deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-luke-horiz15%@", _deviceModel]]
                             
                             ];
    
    _luke_hero_Vert_Animations = @[
                                  [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                       vert_frames[0],
                                                                                       vert_frames[1],
                                                                                       vert_frames[2],
                                                                                       vert_frames[3],
                                                                                       vert_frames[4],
                                                                                       vert_frames[5],
                                                                                       vert_frames[6],
                                                                                       vert_frames[7]
                                                                                       
                                                                                       ] timePerFrame:0.06f],
                                                       [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                     
                                                                                                                     vert_frames[2],
                                                                                                                     vert_frames[3],
                                                                                                                     vert_frames[4],
                                                                                                                     vert_frames[5],
                                                                                                                     vert_frames[6],
                                                                                                                     vert_frames[7]
                                                                                                                     
                                                                                                                     ] timePerFrame:0.06f]]
                                                       ]]
                                  
                                  ];
    
    _luke_hero_Hor_Animations = @[
                                 [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                      hor_frames[0],
                                                                                      hor_frames[1],
                                                                                      hor_frames[2],
                                                                                      hor_frames[3],
                                                                                      hor_frames[4],
                                                                                      hor_frames[5],
                                                                                      hor_frames[6],
                                                                                      hor_frames[7],
                                                                                      hor_frames[8],
                                                                                      hor_frames[9],
                                                                                      hor_frames[10],
                                                                                      hor_frames[11],
                                                                                      hor_frames[12],
                                                                                      hor_frames[13],
                                                                                      hor_frames[14]
                                                                                      
                                                                                      ] timePerFrame:0.06f],
                                                      [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                    
                                                                                                                    hor_frames[9],
                                                                                                                    hor_frames[10],
                                                                                                                    hor_frames[11],
                                                                                                                    hor_frames[12],
                                                                                                                    hor_frames[13],
                                                                                                                    hor_frames[14]
                                                                                                                    
                                                                                                                    ] timePerFrame:0.06f]]
                                                      ]]
                                 
                                 ];
    
    
    NSString* hero = @"luke";
   
    NSArray* switchFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                            
                            ];
    
    _luke_Animation_hero_Switch = [SKAction animateWithTextures:switchFrames timePerFrame:0.06f];
    _luke_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                    switchFrames[1],
                                                                    switchFrames[0]
                                                                    ] timePerFrame:0.06f];
    
    NSArray* idleFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle10%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle11%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle12%@", hero, _deviceModel]]
                            
                            ];
    
    
    _luke_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                  
                                                                  idleFrames[0],
                                                                  idleFrames[1],
                                                                  idleFrames[2],
                                                                  idleFrames[3],
                                                                  idleFrames[4],
                                                                  idleFrames[5],
                                                                  idleFrames[6],
                                                                  idleFrames[7],
                                                                  idleFrames[8],
                                                                  idleFrames[9],
                                                                  idleFrames[10],
                                                                  idleFrames[11],
                                                                  idleFrames[0],
                                                                  switchFrames[0]
                                                                  
                                                                  ] timePerFrame:0.07f];
    
    NSArray* pickmeFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme8%@", hero, _deviceModel]]
                            
                            ];
    
    _luke_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  
                                                                  pickmeFrames[0],
                                                                  pickmeFrames[1],
                                                                  pickmeFrames[2],
                                                                  pickmeFrames[3],
                                                                  pickmeFrames[4],
                                                                  pickmeFrames[5],
                                                                  pickmeFrames[6],
                                                                  pickmeFrames[7],
                                                                  
                                                                  pickmeFrames[2],
                                                                  pickmeFrames[1],
                                                                  pickmeFrames[0],
                                                                  switchFrames[0]
                                                                  
                                                                  ] timePerFrame:0.07f];
    
    
    _superCookieTextures[2] = switchFrames[0];
    
}-(void)LoadingDustinSuper_Chef
{
    
    NSString* hero = @"dustin";
    
    NSArray* switchFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                              
                              ];
    
    _dustin_Animation_hero_Switch = [SKAction animateWithTextures:switchFrames timePerFrame:0.06f];
    
    _dustin_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                        switchFrames[1],
                                                                        switchFrames[0]
                                                                        ] timePerFrame:0.06f];
    
    NSArray* idleFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle10%@", hero, _deviceModel]]
                            
                            ];
    
    _dustin_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                  
                                                                  idleFrames[0],
                                                                  idleFrames[1],
                                                                  idleFrames[2],
                                                                  idleFrames[3],
                                                                  idleFrames[4],
                                                                  idleFrames[5],
                                                                  idleFrames[6],
                                                                  idleFrames[7],
                                                                  idleFrames[8],
                                                                  idleFrames[9],
                                                                  
                                                                  idleFrames[1],
                                                                  idleFrames[0],
                                                                  switchFrames[0]
                                                                  
                                                                  ] timePerFrame:0.06f];
    
    NSArray* vertFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert10%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert11%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert12%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert13%@", hero, _deviceModel]]
                            
                            ];
    
    
    _dustin_hero_Vert_Animations = @[
                                    [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                         
                                                                                         vertFrames[0],
                                                                                         vertFrames[1],
                                                                                         vertFrames[2],
                                                                                         vertFrames[3],
                                                                                         vertFrames[4],
                                                                                         vertFrames[5],
                                                                                         vertFrames[6],
                                                                                         vertFrames[7],
                                                                                         vertFrames[8],
                                                                                         vertFrames[9],
                                                                                         vertFrames[10],
                                                                                         vertFrames[11],
                                                                                         vertFrames[12]
                                                                                         
                                                                                         
                                                                                         ] timePerFrame:0.06f],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                       
                                                                                                                       vertFrames[9],
                                                                                                                       vertFrames[10],
                                                                                                                       vertFrames[11],
                                                                                                                       vertFrames[12]
                                                                                                                       
                                                                                                                       ] timePerFrame:0.06f]]
                                                         ]]
                                    ];

    
    NSArray* horFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz10%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz11%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz12%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz13%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz14%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz15%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz16%@", hero, _deviceModel]]
                            
                            ];
    
    _dustin_hero_Hor_Animations = @[
                                    
                                    [SKAction sequence:@[[SKAction animateWithTextures:horFrames timePerFrame:0.06f],
                                                         [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                       
                                                                                                                       horFrames[11],
                                                                                                                       horFrames[12],
                                                                                                                       horFrames[13],
                                                                                                                       horFrames[14],
                                                                                                                       horFrames[15]
                                                                                                                       
                                                                                                                       ] timePerFrame:0.06f]]
                                                         ]]
                                    ];

    
    
    NSArray* pickmeFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme9%@", hero, _deviceModel]]
                              
                              ];
    
    _dustin_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                    pickmeFrames[0],
                                                                    pickmeFrames[1],
                                                                    pickmeFrames[2],
                                                                    pickmeFrames[3],
                                                                    pickmeFrames[4],
                                                                    pickmeFrames[5],
                                                                    pickmeFrames[6],
                                                                    pickmeFrames[7],
                                                                    pickmeFrames[8],
                                                                    switchFrames[0]
                                                                    
                                                                    ] timePerFrame:0.07f];
    
    
    _superCookieTextures[3] = switchFrames[0];
    
    
}-(void)LoadingGerrySuper_Chef
{
    
    NSString* hero = @"gerry";
    
    NSArray* switchFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                            
                            ];
    
    _gerry_Animation_hero_Switch = [SKAction animateWithTextures:switchFrames timePerFrame:0.06f];
    _gerry_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                       switchFrames[1],
                                                                       switchFrames[0]
                                                                       ] timePerFrame:0.06f];
    
    
    NSArray* idleFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle10%@", hero, _deviceModel]]
                            
                            ];
    
    
    _gerry_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                  
                                                                  idleFrames[0],
                                                                  idleFrames[1],
                                                                  idleFrames[2],
                                                                  idleFrames[3],
                                                                  idleFrames[4],
                                                                  idleFrames[5],
                                                                  idleFrames[6],
                                                                  idleFrames[7],
                                                                  idleFrames[8],
                                                                  idleFrames[9],
                                                                  
                                                                  idleFrames[8],
                                                                  idleFrames[7],
                                                                  idleFrames[6],
                                                                  idleFrames[5],
                                                                  idleFrames[4],
                                                                  idleFrames[3],
                                                                  idleFrames[2],
                                                                  idleFrames[1],
                                                                  idleFrames[0],
                                                                  switchFrames[0]
                                                                  
                                                                  ] timePerFrame:0.07f];
    
    
    NSArray* horFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz9%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz10%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz11%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz12%@", hero, _deviceModel]]
                              
                              ];
    
    //milkyway-hero-gerry-knifeparticle1
    
    NSArray* knife_frames = @[
                           
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-gerry-knifeparticle1%@", _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-gerry-knifeparticle2%@", _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-gerry-knifeparticle3%@", _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-gerry-knifeparticle4%@", _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-gerry-knifeparticle5%@", _deviceModel]]
                           
                           ];
    
    _gerry_hero_Hor_Animations = @[
                                   [SKAction animateWithTextures:horFrames timePerFrame:0.06f],
                                   [SKAction repeatActionForever:[SKAction animateWithTextures:knife_frames timePerFrame:0.06f]]
                                   ];
    
    NSArray* vertFrames = @[
                           
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert1%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert2%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert3%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert4%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert5%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert6%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert7%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert8%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert9%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert10%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert11%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert12%@", hero, _deviceModel]],
                           [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert13%@", hero, _deviceModel]]
                           ];
    
    _gerry_hero_Vert_Animations = @[
                                   [SKAction animateWithTextures:vertFrames timePerFrame:0.06f],
                                   [SKAction repeatActionForever:[SKAction animateWithTextures:knife_frames timePerFrame:0.06f]]
                                   ];
    
    NSArray* pickmeFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme8%@", hero, _deviceModel]]
                            
                            ];
    
    _gerry_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                   
                                                                   pickmeFrames[0],
                                                                   pickmeFrames[1],
                                                                   pickmeFrames[2],
                                                                   pickmeFrames[3],
                                                                   pickmeFrames[4],
                                                                   pickmeFrames[5],
                                                                   pickmeFrames[6],
                                                                   pickmeFrames[7],
                                                                   pickmeFrames[2],
                                                                   pickmeFrames[1],
                                                                   pickmeFrames[0],
                                                                   
                                                                   switchFrames[0]
                                                                   
                                                                   ] timePerFrame:0.07f];
    
    
    _superCookieTextures[5] = switchFrames[0];
    
}

-(void)LoadingJJSuper_Chef
{
    
    NSString* hero = @"jj";
    
    NSArray* switchFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-switch3%@", hero, _deviceModel]]
                            
                            ];
    
    _jj_Animation_hero_Switch = [SKAction animateWithTextures:switchFrames timePerFrame:0.06f];
    
    _jj_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                    
                                                                    switchFrames[1],
                                                                    switchFrames[0]
                                                                    
                                                                    ] timePerFrame:0.06f];

    
    NSArray* idleFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle8%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle9%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle10%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle11%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle12%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle13%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle14%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle15%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle16%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle17%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-idle18%@", hero, _deviceModel]]
                            
                            ];
    
    
    _jj_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                 
                                                                 idleFrames[0],
                                                                 idleFrames[1],
                                                                 idleFrames[2],
                                                                 idleFrames[3],
                                                                 idleFrames[4],
                                                                 idleFrames[5],
                                                                 idleFrames[6],
                                                                 idleFrames[7],
                                                                 idleFrames[8],
                                                                 idleFrames[9],
                                                                 
                                                                 idleFrames[10],
                                                                 idleFrames[11],
                                                                 idleFrames[12],
                                                                 idleFrames[13],
                                                                 idleFrames[14],
                                                                 idleFrames[15],
                                                                 idleFrames[16],
                                                                 idleFrames[17],
                                                                 idleFrames[0],
                                                                 switchFrames[0]
                                                                 
                                                                 ] timePerFrame:0.07f];
    
    NSArray* pickmeFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-pickme8%@", hero, _deviceModel]]
                              
                              ];
    
    _jj_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                pickmeFrames[0],
                                                                pickmeFrames[1],
                                                                pickmeFrames[2],
                                                                pickmeFrames[3],
                                                                pickmeFrames[4],
                                                                pickmeFrames[5],
                                                                pickmeFrames[6],
                                                                pickmeFrames[7],
                                                                
                                                                pickmeFrames[2],
                                                                pickmeFrames[1],
                                                                pickmeFrames[0],
                                                                switchFrames[0]
                                                                
                                                                ] timePerFrame:0.07f];
    
    NSArray* vertFrames = @[
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert1%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert2%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert3%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert4%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert5%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert6%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert7%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert8%@", hero, _deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-vert9%@", hero, _deviceModel]]
                              
                              ];
    
    //milkyway-hero-jj-icing-thrown-horiz
    SKTexture* vertIcing = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-jj-icing-thrown-vert"]];
    SKTexture* horIcing = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-jj-icing-thrown-horiz"]];

    _jj_hero_Vert_Animations = @[
                                 
                                 [SKAction animateWithTextures:vertFrames timePerFrame:0.06f],
                                 [SKAction animateWithTextures:@[vertIcing] timePerFrame:0.06f]
                                 
                                 ];

    NSArray* horFrames = @[
                            
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz1%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz2%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz3%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz4%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz5%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz6%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz7%@", hero, _deviceModel]],
                            [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-%@-horiz8%@", hero, _deviceModel]]
                            
                            ];
    
    _jj_hero_Hor_Animations = @[
                                 
                                 [SKAction animateWithTextures:horFrames timePerFrame:0.06f],
                                 [SKAction animateWithTextures:@[horIcing] timePerFrame:0.06f]
                                 
                                 ];

    
    _superCookieTextures[0] = switchFrames[0];
    
}

#pragma mark - Super Hero loading

-(void)LoadingChipSuper_SuperHero
{
    
    NSArray* chip_hor_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz08%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz09%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-horiz10%@",_deviceModel]]
                               
                               ];
    NSArray* chip_vert_frames = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert01%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert02%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert03%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert04%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert05%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert06%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert07%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert08%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert09%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-vert10%@",_deviceModel]]
                                 
                                 ];
    
    NSArray* chip_idle_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-idle08%@",_deviceModel]]
                               
                               ];
    
    NSArray* chip_pickMe_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme01%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme02%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme03%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme04%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme05%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme06%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme07%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme08%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme09%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme12%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme13%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-pickme14%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* chip_switch_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-switch01%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-switch02%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-chip-switch03%@",_deviceModel]]

                                    ];
    
    
    NSArray* shield_hor_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz01%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz02%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz03%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz04%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz05%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz06%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz07%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz08%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz09%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz10%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-horiz11%@",_deviceModel]]
                                    
                                    ];
    
    NSArray* shield_vert_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert01%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert02%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert03%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert04%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert05%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert06%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert07%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert08%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert09%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert10%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"shield-vert11%@",_deviceModel]]
                                   
                                   ];
    
    _chip_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                chip_idle_frames[0],
                                                                chip_idle_frames[1],
                                                                chip_idle_frames[2],
                                                                
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4], // peak
                                                                chip_idle_frames[4], // peak
                                                                chip_idle_frames[4], // peak
                                                                chip_idle_frames[5],
                                                                chip_idle_frames[6],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4], // peak
                                                                chip_idle_frames[4], // peak
                                                                chip_idle_frames[4], // peak
                                                                chip_idle_frames[5],
                                                                chip_idle_frames[6],
                                                                
                                                                
                                                                chip_idle_frames[7]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    
    _chip_Animation_hero_PickMe = [SKAction animateWithTextures:chip_pickMe_frames timePerFrame:0.06f];
    
    _chip_Animation_hero_Switch = [SKAction animateWithTextures:chip_switch_frames timePerFrame:0.06f];
    
    _chip_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                 chip_switch_frames[2],
                                                                 chip_switch_frames[1],
                                                                 chip_switch_frames[0],
                                                                 ] timePerFrame:0.06f];
    
    
    _chip_hero_Hor_Animations = @[
                                  
                                  [SKAction animateWithTextures:chip_hor_frames timePerFrame:0.06f],
                                  [SKAction animateWithTextures:@[
                                                                  shield_hor_frames[0],
                                                                  shield_hor_frames[1],
                                                                  shield_hor_frames[2],
                                                                  shield_hor_frames[3],
                                                                  shield_hor_frames[4],
                                                                  shield_hor_frames[5],
                                                                  shield_hor_frames[6],
                                                                  shield_hor_frames[7]
                                                                  
                                                                  ] timePerFrame:0.06f],
                                  [SKAction animateWithTextures:@[
                                                                  shield_hor_frames[8],
                                                                  shield_hor_frames[9],
                                                                  shield_hor_frames[10]
                                                                  
                                                                  ] timePerFrame:0.06f]
                                  
                                
                                ];
    
    _chip_hero_Vert_Animations = @[
                                   
                                   [SKAction animateWithTextures:chip_vert_frames timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   shield_vert_frames[0],
                                                                   shield_vert_frames[1],
                                                                   shield_vert_frames[2],
                                                                   shield_vert_frames[3],
                                                                   shield_vert_frames[2],
                                                                   shield_vert_frames[4],
                                                                   shield_vert_frames[5],
                                                                   shield_vert_frames[6],
                                                                   shield_vert_frames[7]
                                                                   
                                                                   ] timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   shield_vert_frames[8],
                                                                   shield_vert_frames[9],
                                                                   shield_vert_frames[10]
                                                                   
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    _superCookieTextures[6] = chip_switch_frames[0];
    
    
}
-(void)LoadingMikeySuper_SuperHero
{
    
    NSArray* mikey_hor_frames = @[
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz01%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz02%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz03%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz04%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz05%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz06%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz07%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz08%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz09%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz10%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz11%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz12%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz13%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz14%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-horiz15%@",_deviceModel]]
                                     
                                     ];
    
    NSArray* mikey_vert_frames = @[
                                      
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert01%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert02%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert03%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert04%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert05%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert06%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert07%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert08%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert09%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert10%@",_deviceModel]],
                                      
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert11%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert12%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert13%@",_deviceModel]]
                                      
                                      ];
    
    NSArray* mikey_vertical_extras = @[
                                       [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert-clawtrail1%@",_deviceModel]],
                                       [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert-clawtrail2%@",_deviceModel]],
                                       [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-vert-end%@",_deviceModel]]
                                       ];
    
    
    _mikey_hero_Hor_Animations = @[
                                  [SKAction sequence:@[[SKAction animateWithTextures:mikey_hor_frames timePerFrame:0.06f],
                                                       [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                                     mikey_hor_frames[9],
                                                                                                                     mikey_hor_frames[10],
                                                                                                                     mikey_hor_frames[11],
                                                                                                                     mikey_hor_frames[12],
                                                                                                                     mikey_hor_frames[13],
                                                                                                                     mikey_hor_frames[14]
                                                                                                                     ] timePerFrame:0.06f]]
                                                       ]]
                                  
                                  ];
    
    _mikey_hero_Vert_Animations = @[
                                    [SKAction animateWithTextures:mikey_vert_frames timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[mikey_vertical_extras[0]] timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[mikey_vertical_extras[1]] timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[mikey_vertical_extras[2]] timePerFrame:0.01f]
                                   ];
    
    
    NSArray* mikey_switch_frames = @[
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-switch01%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-switch02%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-switch03%@",_deviceModel]]
                                     ];
    
    _mikey_Animation_hero_Switch = [SKAction animateWithTextures:mikey_switch_frames timePerFrame:0.06f];
    _mikey_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                  mikey_switch_frames[2],
                                                                  mikey_switch_frames[1],
                                                                  mikey_switch_frames[0]
                                                                  ] timePerFrame:0.06f];
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme08%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme09%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-pickme12%@",_deviceModel]]
                               
                               ];
    
    
    _mikey_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  
                                                                  pickMe_frames[0],
                                                                  pickMe_frames[1],
                                                                  pickMe_frames[2],
                                                                  pickMe_frames[3],
                                                                  pickMe_frames[4],
                                                                  
                                                                  pickMe_frames[5],
                                                                  pickMe_frames[6],
                                                                  pickMe_frames[7],
                                                                  
                                                                  pickMe_frames[8],
                                                                  pickMe_frames[9],
                                                                  pickMe_frames[10],
                                                                  pickMe_frames[11],
                                                                  pickMe_frames[0],
                                                                  mikey_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.06f];
    
    NSArray* idle_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle01%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle02%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle03%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle04%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle05%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle06%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle07%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle08%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle09%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle10%@",_deviceModel]],
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle11%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle12%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle13%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle14%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle15%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle16%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle17%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle18%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-mikey-idle19%@",_deviceModel]]
                                
                                ];
    
    _mikey_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                              
                                                              idle_frames[0],
                                                              idle_frames[1],
                                                              
                                                              idle_frames[2], // scratching
                                                              idle_frames[3],
                                                              idle_frames[4],
                                                              
                                                              idle_frames[3],
                                                              
                                                              idle_frames[2], // scratching
                                                              idle_frames[3],
                                                              idle_frames[4],
                                                              
                                                              idle_frames[3],
                                                              
                                                              idle_frames[2], // scratching
                                                              idle_frames[3],
                                                              idle_frames[4],
                                                              
                                                              idle_frames[5], // pause in shock
                                                              idle_frames[5],
                                                              idle_frames[5],
                                                              
                                                              idle_frames[6],
                                                              idle_frames[7],
                                                              
                                                              idle_frames[8],
                                                              idle_frames[9],
                                                              
                                                              idle_frames[10], // cry loop
                                                              idle_frames[11],
                                                              idle_frames[12],
                                                              idle_frames[13],
                                                              
                                                              idle_frames[10], // cry loop
                                                              idle_frames[11],
                                                              idle_frames[12],
                                                              idle_frames[13],
                                                              
                                                              idle_frames[10], // cry loop
                                                              idle_frames[11],
                                                              idle_frames[12],
                                                              idle_frames[13],
                                                              
                                                              idle_frames[14],
                                                              idle_frames[15],
                                                              idle_frames[16],
                                                              idle_frames[17],
                                                              idle_frames[18],
                                                              idle_frames[0]
                                                              
                                                              ] timePerFrame:0.08f];
    
    _superCookieTextures[4] = mikey_switch_frames[0];

}
-(void)LoadingReginaldSuper_SuperHero
{
    NSArray* reginald_hor_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz01%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz02%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz03%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz04%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz05%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz06%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz07%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz08%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz09%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz10%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-horiz11%@",_deviceModel]]
                                   
                                   ];
    
    NSArray* reginald_vert_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert01%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert02%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert03%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert04%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert05%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert06%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert07%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert08%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert09%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert10%@",_deviceModel]],
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert11%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert12%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert13%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert14%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert15%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert16%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert17%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-vert18%@",_deviceModel]]
                                    
                                    ];
    
    _reginald_hero_Hor_Animations = @[
                                 [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                                      reginald_hor_frames[0],
                                                                                      reginald_hor_frames[1],
                                                                                      reginald_hor_frames[2],
                                                                                      reginald_hor_frames[3],
                                                                                      reginald_hor_frames[4],
                                                                                      reginald_hor_frames[5]
                                                                                      ] timePerFrame:0.06f],
                                                     [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                      reginald_hor_frames[6],
                                                                                      reginald_hor_frames[7],
                                                                                      reginald_hor_frames[8],
                                                                                      reginald_hor_frames[9],
                                                                                      reginald_hor_frames[10]
                                                                                      ] timePerFrame:0.06f]]
                                                      ]]
                                 ];
    
    _reginald_hero_Vert_Animations = @[
                                  [SKAction animateWithTextures:@[
                                                                  reginald_vert_frames[0],
                                                                  reginald_vert_frames[1],
                                                                  reginald_vert_frames[2],
                                                                  reginald_vert_frames[3],
                                                                  reginald_vert_frames[4],
                                                                  reginald_vert_frames[5],
                                                                  reginald_vert_frames[6],
                                                                  reginald_vert_frames[7],
                                                                  reginald_vert_frames[8],
                                                                  reginald_vert_frames[9],
                                                                  reginald_vert_frames[10],
                                                                  reginald_vert_frames[11]
                                                                  ] timePerFrame:0.06f],
                                  
                                  [SKAction animateWithTextures:@[
                                                                  reginald_vert_frames[12],
                                                                  reginald_vert_frames[13],
                                                                  reginald_vert_frames[11]
                                                                  ] timePerFrame:0.06f],
                                  
                                  [SKAction animateWithTextures:@[
                                                                  reginald_vert_frames[14],
                                                                  reginald_vert_frames[15]
                                                                  ] timePerFrame:0.06f],
                                  
                                  [SKAction animateWithTextures:@[
                                                                  reginald_vert_frames[16],
                                                                  reginald_vert_frames[17],
                                                                  reginald_vert_frames[15]
                                                                  ] timePerFrame:0.06f]
                                  
                                  ];
    
    
    NSArray* reginald_switch_frames = @[
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-switch01%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-switch02%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-switch03%@",_deviceModel]]
                                     ];
    
    _reginald_Animation_hero_Switch = [SKAction sequence:@[
                                                           [SKAction scaleTo:1.0f duration:0.0f],
                                                           [SKAction animateWithTextures:reginald_switch_frames timePerFrame:0.06f]
                                                           ]];
    _reginald_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                  reginald_switch_frames[2],
                                                                  reginald_switch_frames[1],
                                                                  reginald_switch_frames[0]
                                                                  ] timePerFrame:0.06f];
    
    
    NSArray* pickMe_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme01%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme02%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme03%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme04%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme05%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme06%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme07%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme08%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-pickme09%@",_deviceModel]]
                                  
                                  ];
    
    _reginald_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                
                                                                      pickMe_frames[0],
                                                                      pickMe_frames[1],
                                                                      pickMe_frames[2],
                                                                      
                                                                      pickMe_frames[3],
                                                                      pickMe_frames[4],
                                                                      pickMe_frames[5],
                                                                      
                                                                      pickMe_frames[6],
                                                                      pickMe_frames[7],
                                                                      pickMe_frames[8],
                                                                      
                                                                      pickMe_frames[3],
                                                                      pickMe_frames[2],
                                                                      pickMe_frames[1],
                                                                      pickMe_frames[0],
                                                                      reginald_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle01%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle02%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle03%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle04%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle05%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle06%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle07%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle08%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle09%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle10%@",_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle16%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle17%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-reggie-idle18%@",_deviceModel]]
                             
                             ];
    
    _reginald_Animation_hero_Idle = [SKAction group:@[ [SKAction scaleXTo:1.3056f duration:0.0f],
                                                       [SKAction sequence:@[[SKAction animateWithTextures:@[
                                                                 
                                                                 idle_frames[0],
                                                                 idle_frames[1],
                                                                 idle_frames[2],
                                                                 idle_frames[3],
                                                                 idle_frames[4],
                                                                 idle_frames[5],
                                                                 idle_frames[6],
                                                                 idle_frames[7],
                                                                 idle_frames[8],
                                                                 idle_frames[9],
                                                                 idle_frames[10],
                                                                 
                                                                 idle_frames[11], // slow down
                                                                 idle_frames[11],
                                                                 idle_frames[12],
                                                                 idle_frames[12],
                                                                 idle_frames[13],
                                                                 idle_frames[13],
                                                                 idle_frames[14],
                                                                 idle_frames[14],
                                                                 idle_frames[15],
                                                                 idle_frames[15],
                                                                 
                                                                 idle_frames[16],
                                                                 idle_frames[17],
                                                                 idle_frames[0]
                                                                 
                                                                 ] timePerFrame:0.08f],
                                                                
                                                                [SKAction group:@[[SKAction scaleTo:1.0f duration:0],[SKAction animateWithTextures:@[reginald_switch_frames[0]] timePerFrame:0.1f]]]
                                                                
                                                                ]]
                                                          ]];
    
    
    _superCookieTextures[1] = reginald_switch_frames[0];
    
    
    // particle GunFlash
    NSString *path = [[NSBundle mainBundle] pathForResource:@"GunFlash" ofType:@"sks"];
    SKEmitterNode* gunFlash = [NSKeyedUnarchiver unarchiveObjectWithFile:path];
    
    _reginald_hero_Particles = @[
                                 gunFlash
                                 ];
    
}
-(void)LoadingLukeSuper_SuperHero
{
    
    NSArray* luke_hor_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz01%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz02%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz03%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz04%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz05%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz06%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz07%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz08%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz09%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz10%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz11%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz12%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz13%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz14%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-horiz15%@",_deviceModel]]

                                   
                                   ];
    
    NSArray* luke_vert_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert01%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert02%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert03%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert04%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert05%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert06%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert07%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert08%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-vert09%@",_deviceModel]]
                                    
                                    ];
    
    _luke_hero_Hor_Animations = @[
                                  [SKAction animateWithTextures:luke_hor_frames timePerFrame:0.06f]
                                  ];
    
    _luke_hero_Vert_Animations = @[
                                   [SKAction animateWithTextures:luke_vert_frames timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   luke_hor_frames[8],
                                                                   luke_hor_frames[9],
                                                                   luke_hor_frames[10]
                                                                   ] timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   luke_hor_frames[11],
                                                                   luke_hor_frames[12],
                                                                   luke_hor_frames[13],
                                                                   luke_hor_frames[14]
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    
    NSArray* luke_switch_frames = @[
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-switch01%@",_deviceModel]],
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-switch02%@",_deviceModel]],
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-switch03%@",_deviceModel]]
                                        ];
    
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-pickme08%@",_deviceModel]]
                               
                               ];
    
    
    _luke_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                   
                                                                   pickMe_frames[0],
                                                                   pickMe_frames[1],
                                                                   pickMe_frames[2],
                                                                   pickMe_frames[3],
                                                                   pickMe_frames[4],
                                            
                                                                   pickMe_frames[5],
                                                                   pickMe_frames[6],
                                                                   pickMe_frames[7],
                                                                   
                                                                   pickMe_frames[4],
                                                                   pickMe_frames[3],
                                                                   pickMe_frames[2],
                                                                   pickMe_frames[1],
                                                                   pickMe_frames[0],
                                                                   luke_switch_frames[0]
                                                                   
                                                                   ] timePerFrame:0.06f];
    
    _luke_Animation_hero_Switch = [SKAction animateWithTextures:luke_switch_frames timePerFrame:0.06f];
    _luke_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      luke_switch_frames[2],
                                                                      luke_switch_frames[1],
                                                                      luke_switch_frames[0]
                                                                      ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle01%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle02%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle03%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle04%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle05%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle06%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle07%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle08%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle09%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-idle10%@",_deviceModel]]
                             
                             ];
    
    _luke_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                 
                                                                 idle_frames[0],
                                                                 idle_frames[1],
                                                                 idle_frames[2],
                                                                 idle_frames[3],
                                                                 idle_frames[4],
                                                                 idle_frames[5],
                                                                 idle_frames[6],
                                                                 idle_frames[7],
                                                                 idle_frames[8],
                                                                 idle_frames[9],
                                                                 
                                                                 idle_frames[2],
                                                                 idle_frames[1],
                                                                 idle_frames[0]
                                                                 
                                                                 ] timePerFrame:0.08f];
    
    _superCookieTextures[2] = luke_switch_frames[0];
    
}
-(void)LoadingDustinSuper_SuperHero
{
    NSArray* dustin_hor_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz08%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz09%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz10%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-horiz12%@",_deviceModel]]
                               
                               ];
    
    NSArray* dustin_vert_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert01%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert02%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert03%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert04%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert05%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert06%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert07%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert08%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert09%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert10%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-vert11%@",_deviceModel]]
                                
                                ];
    
    NSArray* dustin_switch_frames = @[
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-switch01%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-switch02%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-switch03%@",_deviceModel]]
                                      
                                      ];
    
    NSArray* pickMe_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme01%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme02%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme03%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme04%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme05%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme06%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme07%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme08%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme09%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme12%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme13%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-pickme14%@",_deviceModel]]
                                  
                                  ];
    
    _dustin_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                    
                                                                    pickMe_frames[0],
                                                                    pickMe_frames[1],
                                                                    pickMe_frames[2],
                                                                    pickMe_frames[3],
                                                                    pickMe_frames[4],
                                                                    pickMe_frames[5],
                                                                    
                                                                    pickMe_frames[6],
                                                                    pickMe_frames[7],
                                                                    pickMe_frames[8],
                                                                    pickMe_frames[9],
                                                                    
                                                                    pickMe_frames[6],
                                                                    pickMe_frames[7],
                                                                    pickMe_frames[8],
                                                                    pickMe_frames[9],
                                                                    
                                                                    pickMe_frames[6],
                                                                    pickMe_frames[7],
                                                                    pickMe_frames[8],
                                                                    pickMe_frames[9],
                                                                    
                                                                    pickMe_frames[10],
                                                                    pickMe_frames[11],
                                                                    pickMe_frames[12],
                                                                    pickMe_frames[13],
                                                                    dustin_switch_frames[0]
                                                                    
                                                                ] timePerFrame:0.06f];
    
    _dustin_hero_Hor_Animations = @[
                                    [SKAction animateWithTextures:@[
                                                                    
                                                                    dustin_hor_frames[0],
                                                                    dustin_hor_frames[1],
                                                                    dustin_hor_frames[2],
                                                                    dustin_hor_frames[3],
                                                                    dustin_hor_frames[4],
                                                                    dustin_hor_frames[5],
                                                                    dustin_hor_frames[6],
                                                                    
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],
                                                                    dustin_hor_frames[7],// 9x
                                                                    
                                                                    
                                                                    dustin_hor_frames[8],
                                                                    dustin_hor_frames[9],
                                                                    dustin_hor_frames[10],
                                                                    
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11],
                                                                    dustin_hor_frames[11] // 9x
                                                                    
                                                                    ] timePerFrame:0.06f]
                                    ];
    
    
    _dustin_hero_Vert_Animations = @[
                                     [SKAction sequence:@[
                                     [SKAction animateWithTextures:@[
                                                                     
                                                                     dustin_vert_frames[0],
                                                                     dustin_vert_frames[1],
                                                                     dustin_vert_frames[2],
                                                                     dustin_vert_frames[3],
                                                                     dustin_vert_frames[4],
                                                                     dustin_vert_frames[5],
                                                                     dustin_vert_frames[6],
                                                                     dustin_vert_frames[7],
                                                                     dustin_vert_frames[8],
                                                                     dustin_vert_frames[9],
                                                                     dustin_vert_frames[10]
                                                                     
                                                                     ] timePerFrame:0.06f],
                                     
                                     [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                   
                                                                                                   dustin_vert_frames[8],
                                                                                                   dustin_vert_frames[9],
                                                                                                   dustin_vert_frames[10]
                                                                                                   
                                                                                                   ] timePerFrame:0.06f]]
                                     ]]
                                     ];
    

    
    _dustin_Animation_hero_Switch = [SKAction animateWithTextures:dustin_switch_frames timePerFrame:0.06f];
    _dustin_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      dustin_switch_frames[2],
                                                                      dustin_switch_frames[1],
                                                                      dustin_switch_frames[0]
                                                                      ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-idle3%@",_deviceModel]]
                             
                             ];
    
    _dustin_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                
                                                                idle_frames[0],
                                                                idle_frames[1],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[2],
                                                                idle_frames[1],
                                                                idle_frames[0],
                                                                dustin_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.08f];

    
    
    _superCookieTextures[3] = dustin_switch_frames[0];
    
}

-(void)LoadingGerrySuper_SuperHero
{
    
    NSArray* gerry_hor_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz01%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz02%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz03%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz04%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz05%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz06%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz07%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz08%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz09%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz10%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz11%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz12%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz13%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz14%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz15%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz16%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz17%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz18%@",_deviceModel]]
                                   
                                   ];
    
    NSArray* gerry_hor_extras = @[
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz-blur%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz-onion1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz-onion2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-horiz-onion3%@",_deviceModel]]
                                  ];
    
    NSArray* gerry_vert_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert01%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert02%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert03%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert04%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert05%@",_deviceModel]],
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert06%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert07%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert08%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert09%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert10%@",_deviceModel]],
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert11%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert12%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert13%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert14%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-vert15%@",_deviceModel]]
                                    
                                    
                                    ];
    
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme08%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme09%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-pickme11%@",_deviceModel]]
                               
                               ];
    
    NSArray* gerry_switch_frames = @[
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-switch01%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-switch02%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-switch03%@",_deviceModel]]
                                     
                                     ];

    
    _gerry_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                    
                                                                    pickMe_frames[0],
                                                                    pickMe_frames[1],
                                                                    pickMe_frames[2],
                                                                    pickMe_frames[3],
                                                                    pickMe_frames[4],
                                                                    pickMe_frames[5],
                                                                    pickMe_frames[6],
                                                                    pickMe_frames[7],
                                                                    pickMe_frames[8],
                                                                    pickMe_frames[9],
                                                                    pickMe_frames[10],
                                                                    pickMe_frames[2],
                                                                    pickMe_frames[1],
                                                                    pickMe_frames[0],
                                                                    gerry_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.06f];
    
    
    _gerry_hero_Hor_Animations = @[
                                   [SKAction animateWithTextures:gerry_hor_frames timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[ gerry_hor_extras[0] ] timePerFrame:0.01f],
                                   [SKAction animateWithTextures:@[ gerry_hor_extras[1] ] timePerFrame:0.01f],
                                   [SKAction animateWithTextures:@[ gerry_hor_extras[2] ] timePerFrame:0.01f],
                                   [SKAction animateWithTextures:@[ gerry_hor_extras[3] ] timePerFrame:0.01f]
                                   ];
     
    _gerry_hero_Vert_Animations = @[
                                    
                                    [SKAction animateWithTextures:gerry_vert_frames timePerFrame:0.06f],
                                    
                                    [SKAction repeatActionForever:[SKAction animateWithTextures:@[
                                                                                                  
                                                                                                  gerry_vert_frames[11],
                                                                                                  gerry_vert_frames[12],
                                                                                                  gerry_vert_frames[13],
                                                                                                  gerry_vert_frames[14]
                                                                                                  
                                                                                                  ] timePerFrame:0.06f]]
                                    
                                    ];
    
    
    _gerry_Animation_hero_Switch = [SKAction animateWithTextures:gerry_switch_frames timePerFrame:0.06f];
    _gerry_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                        gerry_switch_frames[2],
                                                                        gerry_switch_frames[1],
                                                                        gerry_switch_frames[0]
                                                                        ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle10%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle16%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle17%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle18%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-idle19%@",_deviceModel]]
                             
                             ];
    
    _gerry_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                  
                                                                  idle_frames[0],
                                                                  idle_frames[1],
                                                                  idle_frames[2],
                                                                  idle_frames[2],
                                                                  idle_frames[2],
                                                                  idle_frames[2],
                                                                  idle_frames[2],
                                                                  idle_frames[3],
                                                                  
                                                                  idle_frames[4],
                                                                  idle_frames[5],
                                                                  idle_frames[6],// left stretch
                                                                  idle_frames[5],
                                                               
                                                                  idle_frames[4],
                                                                  idle_frames[3], // transition to right
                                                                  idle_frames[2],
                                                                  idle_frames[7],
                                                                  
                                                                  idle_frames[8],
                                                                  idle_frames[9],
                                                                  idle_frames[10], // right stretch
                                                                  idle_frames[9],
                                                                  
                                                                  idle_frames[8],
                                                                  idle_frames[7], // transtition to legs right
                                                                  idle_frames[2],
                                                                  idle_frames[11],
                                                                  
                                                                  idle_frames[12],
                                                                  idle_frames[13], // right leg stretch
                                                                  idle_frames[14],
                                                                  idle_frames[13],
                                                                  
                                                                  idle_frames[15],
                                                                  
                                                                  idle_frames[16],
                                                                  idle_frames[17], // left leg stretch
                                                                  idle_frames[18],
                                                                  idle_frames[17],
                                                                
                                                                  idle_frames[16], // end
                                                                  idle_frames[15],
                                                                  idle_frames[2],
                                                                  idle_frames[1],
                                                                  idle_frames[0],
                                                                  
                                                                  gerry_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.06f];

    _superCookieTextures[5] = gerry_switch_frames[0];
    
}

-(void)LoadingJJSuper_SuperHero
{
    
    NSArray* jj_hor_frames = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz01%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz02%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz03%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz04%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz05%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz06%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz07%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz08%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz09%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz10%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz11%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz12%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz13%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz14%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz15%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz16%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz17%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz18%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-horiz19%@",_deviceModel]]

                                 ];
    
    NSArray* jj_vert_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert03%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert04%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert05%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert06%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert07%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert08%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert09%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-vert12%@",_deviceModel]]
                               
                               ];
    
    NSArray* jj_switch_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-switch01%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-switch02%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-switch03%@",_deviceModel]]
                               
                               ];
    
    
    NSArray* jj_PickMe_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme01%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme02%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme03%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme04%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme05%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme06%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme07%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-pickme08%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* jj_idle_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle01%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle02%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle03%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle04%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle05%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle06%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle07%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle08%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle09%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle10%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle12%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle13%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle14%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle15%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle16%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle17%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle18%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle19%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle20%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-idle21%@",_deviceModel]]
                                  
                                  ];
    
    _jj_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                              
                                                              jj_idle_frames[0],
                                                              jj_idle_frames[1],
                                                              jj_idle_frames[2],
                                                              jj_idle_frames[3],
                                                              jj_idle_frames[4],
                                                              jj_idle_frames[5],
                                                              jj_idle_frames[6],
                                                              jj_idle_frames[7],
                                                              jj_idle_frames[8],
                                                              jj_idle_frames[9],
                                                              jj_idle_frames[10],
                                                              
                                                              jj_idle_frames[11],
                                                              
                                                              jj_idle_frames[12],
                                                              
                                                              jj_idle_frames[13],
                                                              
                                                              jj_idle_frames[14],
                                                              jj_idle_frames[14],
                                                              jj_idle_frames[14],
                                                              
                                                              jj_idle_frames[15],
                                                              jj_idle_frames[15],
                                                              jj_idle_frames[15],
                                                              
                                                              jj_idle_frames[16],
                                                              jj_idle_frames[17],
                                                              jj_idle_frames[18],
                                                              jj_idle_frames[19],
                                                              jj_idle_frames[20],
                                                              jj_idle_frames[0]
                                                              
                                                              ] timePerFrame:0.08f];

    
    _jj_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                jj_PickMe_frames[0],
                                                                jj_PickMe_frames[1],
                                                                jj_PickMe_frames[2],
                                                                jj_PickMe_frames[3],
                                                                jj_PickMe_frames[4],
                                                                jj_PickMe_frames[5],
                                                                jj_PickMe_frames[6],
                                                                
                                                                jj_PickMe_frames[7],
                                                                jj_PickMe_frames[7],
                                                                jj_PickMe_frames[7],
                                                                
                                                                jj_PickMe_frames[6],
                                                                jj_PickMe_frames[5],
                                                                jj_PickMe_frames[4],
                                                                jj_PickMe_frames[3],
                                                                jj_PickMe_frames[2],
                                                                jj_PickMe_frames[1],
                                                                jj_PickMe_frames[0]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    _jj_Animation_hero_Switch = [SKAction animateWithTextures:jj_switch_frames timePerFrame:0.06f];
    
    _jj_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                    
                                                                    jj_switch_frames[2],
                                                                    jj_switch_frames[1],
                                                                    jj_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.06f];
    
    _jj_hero_Hor_Animations = @[
                                
                                [SKAction animateWithTextures:jj_hor_frames timePerFrame:0.06f]
                                
                                ];
    
    _jj_hero_Vert_Animations = @[
                                 [SKAction animateWithTextures:jj_vert_frames timePerFrame:0.06f]
                                 ];
    
    
    _superCookieTextures[0] = jj_switch_frames[0];
    
}

#pragma mark - Farmer loading

-(void)LoadingChipSuper_Farmer
{
    
    NSArray* chip_hor_frames = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz1%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz2%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz3%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz4%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz5%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz6%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz7%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz8%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz9%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz10%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz11%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz12%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz13%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz14%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz15%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz16%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-horiz17%@",_deviceModel]]
                                 
                                 ];
    NSArray* chip_vert_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert12%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* chip_idle_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-idle1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-idle2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-idle3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-idle4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-idle5%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* chip_pickMe_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme3%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme4%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme5%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme6%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme7%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme8%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme9%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme10%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme11%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-pickme12%@",_deviceModel]]
                                    
                                    ];
    
    NSArray* chip_switch_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-switch1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-switch2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-switch3%@",_deviceModel]]
                                    
                                    ];
    

    
    NSArray* fork_vert_frames = @[
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-chip-vert-fork%@",_deviceModel]]
                                    
                                    ];
    
    _chip_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                chip_idle_frames[0],
                                                                
                                                                chip_idle_frames[1], // laugh with me
                                                                chip_idle_frames[2],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[2],
                                                                
                                                                chip_idle_frames[1], // laugh with me
                                                                chip_idle_frames[2],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[2],
                                                                
                                                                chip_idle_frames[1], // laugh with me
                                                                chip_idle_frames[2],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[2],
                                                                
                                                                chip_idle_frames[1], // laugh with me
                                                                chip_idle_frames[2],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[2],
                                                                
                                                                chip_idle_frames[1],
                                                                chip_idle_frames[0],
                                                                chip_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    
    _chip_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  
                                                                  chip_pickMe_frames[0],
                                                                  chip_pickMe_frames[1],
                                                                  chip_pickMe_frames[2],
                                                                  chip_pickMe_frames[3],
                                                                  chip_pickMe_frames[4],
                                                                  chip_pickMe_frames[5],
                                                                  chip_pickMe_frames[6],
                                                                  chip_pickMe_frames[7],
                                                                  chip_pickMe_frames[8],
                                                                  chip_pickMe_frames[9],
                                                                  chip_pickMe_frames[10],
                                                                  chip_pickMe_frames[11],
                                                                  chip_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.08f];
    
    _chip_Animation_hero_Switch = [SKAction animateWithTextures:chip_switch_frames timePerFrame:0.06f];
    
    _chip_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      chip_switch_frames[2],
                                                                      chip_switch_frames[1],
                                                                      chip_switch_frames[0],
                                                                      ] timePerFrame:0.06f];
    
    
    _chip_hero_Hor_Animations = @[
                                  
                                  [SKAction animateWithTextures:chip_hor_frames timePerFrame:0.06f],
                                  [SKAction animateWithTextures:@[
                                                                  chip_hor_frames[11],
                                                                  chip_hor_frames[12],
                                                                  chip_hor_frames[13],
                                                                  chip_hor_frames[14],
                                                                  chip_hor_frames[15],
                                                                  chip_hor_frames[16]
                                                                  
                                                                  ] timePerFrame:0.06f]
                                  
                                  
                                  ];
    
    _chip_hero_Vert_Animations = @[
                                   
                                   [SKAction animateWithTextures:chip_vert_frames timePerFrame:0.06f],
                                   [SKAction animateWithTextures:fork_vert_frames timePerFrame:0.06f]
                                   
                                   ];
    
    _superCookieTextures[6] = chip_switch_frames[0];
    
    
}
-(void)LoadingMikeySuper_Farmer
{
    
    NSArray* mikey_hor_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz10%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz12%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz13%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz14%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz15%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz16%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz17%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz18%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz19%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* mikey_vert_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert1%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert2%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert3%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert4%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert5%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert6%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert7%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert8%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert9%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert10%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert11%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert12%@",_deviceModel]]
                                   
                                   ];
    
    NSArray* mikey_extra_hor_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows1%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows2%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows3%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows4%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows5%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows6%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows7%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-horiz-cows8%@",_deviceModel]]
                                   
                                   ];
    
    NSArray* mikey_extra_vert_frames = @[
                                        
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert-beamtile%@",_deviceModel]],
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-vert-UFO%@",_deviceModel]]
                                        
                                        ];

    
    _mikey_hero_Hor_Animations = @[
                                   [SKAction animateWithTextures:mikey_hor_frames timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                                        
                                                                  mikey_hor_frames[13],
                                                                  mikey_hor_frames[14],
                                                                  mikey_hor_frames[15],
                                                                  mikey_hor_frames[16],
                                                                  mikey_hor_frames[17],
                                                                  mikey_hor_frames[18]
                                                                  
                                                                  ] timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   
                                                                   mikey_extra_hor_frames[0],
                                                                   mikey_extra_hor_frames[1],
                                                                   mikey_extra_hor_frames[2],
                                                                   mikey_extra_hor_frames[3],
                                                                   mikey_extra_hor_frames[4],
                                                                   mikey_extra_hor_frames[5],
                                                                   mikey_extra_hor_frames[6],
                                                                   mikey_extra_hor_frames[7]
                                                                   
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    _mikey_hero_Vert_Animations = @[
                                    [SKAction animateWithTextures:mikey_vert_frames timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[
                                                                    
                                                                    mikey_vert_frames[10],
                                                                    mikey_vert_frames[9],
                            
                                                                    mikey_vert_frames[8],
                                                                    mikey_vert_frames[9],
                                                                    mikey_vert_frames[10],
                                                                    mikey_vert_frames[11],
                                                                    
                                                                    ] timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[mikey_extra_vert_frames[0]] timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[mikey_extra_vert_frames[1]] timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[mikey_vert_frames[6]] timePerFrame:0.06f]
                                    ];
    
    
    NSArray* mikey_switch_frames = @[
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-switch1%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-switch2%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-switch3%@",_deviceModel]]
                                     ];
    
    _mikey_Animation_hero_Switch = [SKAction animateWithTextures:mikey_switch_frames timePerFrame:0.06f];
    _mikey_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                       mikey_switch_frames[2],
                                                                       mikey_switch_frames[1],
                                                                       mikey_switch_frames[0]
                                                                       ] timePerFrame:0.06f];
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-pickme12%@",_deviceModel]]
                               
                               ];
    
    
    _mikey_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                   
                                                                   pickMe_frames[0],
                                                                   pickMe_frames[1],
                                                                   pickMe_frames[2],
                                                                   pickMe_frames[3],
                                                                   pickMe_frames[4],
                                                                   
                                                                   pickMe_frames[5],
                                                                   pickMe_frames[6],
                                                                   pickMe_frames[7],
                                                                   
                                                                   pickMe_frames[8],
                                                                   pickMe_frames[9],
                                                                   pickMe_frames[10],
                                                                   pickMe_frames[11],
                                                                   pickMe_frames[1],
                                                                   pickMe_frames[0],
                                                                   mikey_switch_frames[0]
                                                                   
                                                                   ] timePerFrame:0.08f];
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle10%@",_deviceModel]],
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-mikey-idle16%@",_deviceModel]]
                             
                             ];
    
    _mikey_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                 
                                                                 idle_frames[0],
                                                                 idle_frames[1],
                                                                 idle_frames[2],
                                                                 idle_frames[3],
                                                                 idle_frames[4],
                                                                 idle_frames[5],
                                                                 idle_frames[6],
                                                                 idle_frames[7],
                                                                 idle_frames[8],
                                                                 idle_frames[9],
                                                                 idle_frames[10],
                                                                 
                                                                 idle_frames[11],
                                                                 idle_frames[12],
                                                                 idle_frames[13],
                                                                 idle_frames[14],
                                                                 idle_frames[15],
                                                                 
                                                                 idle_frames[4],
                                                                 idle_frames[5],
                                                                 idle_frames[6],
                                                                 idle_frames[7],
                                                                 idle_frames[8],
                                                                 idle_frames[9],
                                                                 idle_frames[10],
                                                                 
                                                                 idle_frames[11],
                                                                 idle_frames[12],
                                                                 idle_frames[13],
                                                                 idle_frames[14],
                                                                 idle_frames[15],
                                                                 
                                                                 idle_frames[2],
                                                                 idle_frames[1],
                                                                 idle_frames[0],
                                                                 mikey_switch_frames[0]
                                                                 
                                                                 ] timePerFrame:0.07f];
    
    _superCookieTextures[4] = mikey_switch_frames[0];
    
}
-(void)LoadingReginaldSuper_Farmer
{
    NSArray* reginald_hor_frames = @[
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz1%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz2%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz3%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz4%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz5%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz6%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz7%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz8%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz9%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz10%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz11%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz12%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz13%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz14%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz15%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz16%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz17%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz18%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-horiz19%@",_deviceModel]]
                                     
                                     ];
    
    NSArray* reginald_vert_frames = @[
                                      
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert1%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert2%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert3%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert4%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert5%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert6%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert7%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert8%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert9%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert10%@",_deviceModel]],
                                      
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert11%@",_deviceModel]]
                                      
                                      ];
    
    NSArray* reginald_extra_vert_frames = @[
                                      
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert-hole1%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert-hole2%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert-hole3%@",_deviceModel]],
                                      
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-vert-rock1%@",_deviceModel]]
                                      
                                      ];
    
    _reginald_hero_Hor_Animations = @[
                                      [SKAction animateWithTextures:reginald_hor_frames timePerFrame:0.06f],
                                      [SKAction animateWithTextures:@[
                                                                      reginald_hor_frames[14],
                                                                      reginald_hor_frames[15],
                                                                      reginald_hor_frames[16],
                                                                      reginald_hor_frames[17],
                                                                      reginald_hor_frames[18]
                                                                      ] timePerFrame:0.06f]
                                      
                                      ];
    
    _reginald_hero_Vert_Animations = @[
                                       [SKAction animateWithTextures:reginald_vert_frames timePerFrame:0.06f],
                                       [SKAction animateWithTextures:@[
                                                                       reginald_vert_frames[3],
                                                                       reginald_vert_frames[4],
                                                                       reginald_vert_frames[5],
                                                                       reginald_vert_frames[6],
                                                                       reginald_vert_frames[7],
                                                                       reginald_vert_frames[8],
                                                                       reginald_vert_frames[9],
                                                                       reginald_vert_frames[10]
                                                                       ] timePerFrame:0.06f],
                                       [SKAction animateWithTextures:@[
                                                                       reginald_extra_vert_frames[0],
                                                                       reginald_extra_vert_frames[1],
                                                                       reginald_extra_vert_frames[2]
                                                                       ] timePerFrame:0.48f],
                                       [SKAction animateWithTextures:@[
                                                                       reginald_extra_vert_frames[3]
                                                                       ] timePerFrame:0.001f]
                                       
                                       ];
    
    
    NSArray* reginald_switch_frames = @[
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-switch1%@",_deviceModel]],
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-switch2%@",_deviceModel]],
                                        [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-switch3%@",_deviceModel]]
                                        ];
    
    _reginald_Animation_hero_Switch = [SKAction animateWithTextures:reginald_switch_frames timePerFrame:0.06f];
    
    _reginald_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                          reginald_switch_frames[2],
                                                                          reginald_switch_frames[1],
                                                                          reginald_switch_frames[0]
                                                                          ] timePerFrame:0.06f];
    
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-pickme12%@",_deviceModel]]
                               
                               ];
    
    _reginald_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                      pickMe_frames[0],
                                                                      pickMe_frames[1],
                                                                      pickMe_frames[2],
                                                                      pickMe_frames[3],
                                                                      pickMe_frames[4],
                                                                      pickMe_frames[5],
                                                                      pickMe_frames[6],
                                                                      pickMe_frames[7],
                                                                      pickMe_frames[8],
                                                                      pickMe_frames[9],
                                                                      pickMe_frames[10],
                                                                      pickMe_frames[11],
                                                                      pickMe_frames[0],
                                                                      reginald_switch_frames[0]
                                                                      
                                                                      ] timePerFrame:0.08f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-reggie-idle10%@",_deviceModel]]
                             
                             ];
    
    _reginald_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                    
                                                                    idle_frames[0],
                                                                    idle_frames[1],
                                                                    idle_frames[2],
                                                                    
                                                                    idle_frames[3],
                                                                    idle_frames[3],
                                                                    idle_frames[4],
                                                                    idle_frames[4],
                                                                    idle_frames[5],
                                                                    idle_frames[5],
                                                                    
                                                                    idle_frames[6],
                                                                    
                                                                    idle_frames[7],
                                                                    idle_frames[7],
                                                                    idle_frames[7],
                                                                
                                                                    idle_frames[8],
                                                                    idle_frames[8],
                                                                    idle_frames[8],
                                                                    
                                                                    idle_frames[9],
                                                                    reginald_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.08f];
    
    
    _superCookieTextures[1] = reginald_switch_frames[0];
    
}
-(void)LoadingLukeSuper_Farmer
{
    
    NSArray* luke_hor_frames = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz1%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz2%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz3%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz4%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz5%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz6%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz7%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz8%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-horiz9%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-water-front1%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-water-front2%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-water-front3%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-water-streamtile%@",_deviceModel]],
                                 
                                 ];
    
    NSArray* luke_vert_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-vert1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-vert2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-vert3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-vert4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-vert5%@",_deviceModel]]
                                  
                                  ];
    
    _luke_hero_Hor_Animations = @[
                                  [SKAction animateWithTextures:@[
                                                                  luke_hor_frames[0],
                                                                  luke_hor_frames[1],
                                                                  luke_hor_frames[2],
                                                                  
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3],
                                                                  luke_hor_frames[3], // 9x
                                                                  
                                                                  luke_hor_frames[4],
                                                                  luke_hor_frames[5],
                                                                  luke_hor_frames[6],
                                                                  luke_hor_frames[7],
                                                                  
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8],
                                                                  luke_hor_frames[8] // 9x
                                                                  
                                                                  ] timePerFrame:0.06f],
                                  
                                  [SKAction animateWithTextures:@[
                                                                  luke_hor_frames[9],
                                                                  luke_hor_frames[10],
                                                                  luke_hor_frames[11]
                                                                  
                                                                  ] timePerFrame:0.06f],
                                  
                                  [SKAction animateWithTextures:@[
                                                                  luke_hor_frames[12]
                                                                  ] timePerFrame:0.06f]
                                  ];
    
    _luke_hero_Vert_Animations = @[
                                   [SKAction animateWithTextures:luke_vert_frames timePerFrame:0.06f]
                                   ];
    
    
    NSArray* luke_switch_frames = @[
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-switch1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-switch2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-switch3%@",_deviceModel]]
                                    ];
    
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-pickme12%@",_deviceModel]]
                               
                               ];
    
    
    _luke_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  
                                                                  pickMe_frames[0],
                                                                  pickMe_frames[1],
                                                                  pickMe_frames[2],
                                                                  pickMe_frames[3],
                                                                  pickMe_frames[4],
                                                                  pickMe_frames[5],
                                                                  pickMe_frames[6],
                                                                  pickMe_frames[7],
                                                                  pickMe_frames[8],
                                                                  pickMe_frames[9],
                                                                  pickMe_frames[10],
                                                                  pickMe_frames[11],
                                                                  luke_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.08f];
    
    _luke_Animation_hero_Switch = [SKAction animateWithTextures:luke_switch_frames timePerFrame:0.06f];
    _luke_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      luke_switch_frames[2],
                                                                      luke_switch_frames[1],
                                                                      luke_switch_frames[0]
                                                                      ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle10%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle16%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle17%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle18%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-luke-idle19%@",_deviceModel]]
                             
                             ];
    
    _luke_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                idle_frames[0],
                                                                idle_frames[1],
                                                                idle_frames[2],
                                                                idle_frames[3],
                                                                idle_frames[4],
                                                                idle_frames[5],
                                                                idle_frames[6],
                                                                idle_frames[7],
                                                                idle_frames[8],
                                                                idle_frames[9],
                                                                idle_frames[10],
                                                                idle_frames[11],
                                                                idle_frames[12],
                                                                
                                                                idle_frames[13],
                                                                idle_frames[14],
                                                                idle_frames[15],
                                                                
                                                                idle_frames[13],
                                                                idle_frames[14],
                                                                idle_frames[15],
                                                                
                                                                idle_frames[13],
                                                                idle_frames[14],
                                                                idle_frames[15],
                                                                
                                                                idle_frames[16],
                                                                idle_frames[17],
                                                                idle_frames[18],
                                                                
                                                                idle_frames[0],
                                                                luke_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.08f];
    
    _superCookieTextures[2] = luke_switch_frames[0];
    
}
-(void)LoadingDustinSuper_Farmer
{
    NSArray* dustin_hor_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz1%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz2%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz3%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz4%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz5%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz6%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz7%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz8%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz9%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz10%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz11%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz12%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz13%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz14%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz15%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz16%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz17%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz18%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz19%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz20%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz21%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz22%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-horiz23%@",_deviceModel]]
                                   
                                   ];
    
    NSArray* dustin_vert_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert3%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert4%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert5%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert6%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert7%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert8%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert9%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert10%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert11%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert12%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert13%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert14%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert15%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert16%@",_deviceModel]]
                                    
                                    ];
    
    NSArray* dustin_extra_vert_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert-planthead1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert-planthead2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert-planthead3%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert-plantleaves%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-vert-stemtile%@",_deviceModel]]
                                    
                                    ];
    
    
    NSArray* dustin_switch_frames = @[
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-switch1%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-switch2%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-switch3%@",_deviceModel]]
                                      
                                      ];
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme10%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-pickme12%@",_deviceModel]]
                               
                               ];
    
    _dustin_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                    pickMe_frames[0],
                                                                    pickMe_frames[1],
                                                                    pickMe_frames[2],
                                                                    pickMe_frames[3],
                                                                    pickMe_frames[4],
                                                                    pickMe_frames[5],
                                                                    pickMe_frames[6],
                                                                    pickMe_frames[7],
                                                                    pickMe_frames[8],
                                                                    pickMe_frames[9],
                                                                    pickMe_frames[10],
                                                                    pickMe_frames[11],
                                                                    pickMe_frames[0],
                                                                    dustin_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.08f];
    
    _dustin_hero_Hor_Animations = @[
                                    [SKAction animateWithTextures:dustin_hor_frames timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[
                                                                    dustin_hor_frames[15],
                                                                    dustin_hor_frames[16],
                                                                    dustin_hor_frames[17],
                                                                    dustin_hor_frames[18],
                                                                    dustin_hor_frames[19],
                                                                    dustin_hor_frames[20],
                                                                    dustin_hor_frames[21],
                                                                    dustin_hor_frames[22]
                                                                    
                                                                    ] timePerFrame:0.06f]
                                    
                                    ];
    
    
    _dustin_hero_Vert_Animations = @[
                                     [SKAction animateWithTextures:dustin_vert_frames timePerFrame:0.06f],
                                     [SKAction animateWithTextures:@[
                                                                     dustin_extra_vert_frames[0],
                                                                     dustin_extra_vert_frames[1],
                                                                     dustin_extra_vert_frames[2],
                                                                     dustin_extra_vert_frames[1]
                                                                                              
                                                                     ] timePerFrame:0.08f],
                                     [SKAction animateWithTextures:@[dustin_extra_vert_frames[3]] timePerFrame:0.06f],
                                     [SKAction animateWithTextures:@[dustin_extra_vert_frames[4]] timePerFrame:0.06f]
                                     ];
    
    
    
    _dustin_Animation_hero_Switch = [SKAction animateWithTextures:dustin_switch_frames timePerFrame:0.06f];
    _dustin_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                        dustin_switch_frames[2],
                                                                        dustin_switch_frames[1],
                                                                        dustin_switch_frames[0]
                                                                        ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle10%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle16%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-dustin-idle17%@",_deviceModel]]
                             
                             ];
    
    _dustin_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                  
                                                                  idle_frames[0],
                                                                  idle_frames[1],
                                                                  idle_frames[2],
                                                                  idle_frames[3],
                                                                  idle_frames[4],
                                                                  idle_frames[5],
                                                                  idle_frames[6],
                                                                  idle_frames[7],
                                                                  idle_frames[8],
                                                                  idle_frames[9],
                                                                  idle_frames[10],
                                                                  idle_frames[11],
                                                                  idle_frames[12],
                                                                  idle_frames[13],
                                                                  idle_frames[14],
                                                                  idle_frames[15],
                                                                  idle_frames[16],
                                                                  idle_frames[0],
                                                                  dustin_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.08f];
    
    
    
    _superCookieTextures[3] = dustin_switch_frames[0];
    
}

-(void)LoadingGerrySuper_Farmer
{
    
    NSArray* gerry_hor_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-horiz12%@",_deviceModel]]
                                  
                                  ];
    
    
    NSArray* gerry_vert_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert1%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert2%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert3%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert4%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert5%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert6%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert7%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert8%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert9%@",_deviceModel]],
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-vert-slicetile%@",_deviceModel]]
                                   
                                   ];
    
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-pickme12%@",_deviceModel]]
                               
                               ];
    
    NSArray* gerry_switch_frames = @[
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-switch1%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-switch2%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-switch3%@",_deviceModel]]
                                     
                                     ];
    
    
    _gerry_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                   pickMe_frames[0],
                                                                   pickMe_frames[1],
                                                                   pickMe_frames[2],
                                                                   pickMe_frames[3],
                                                                   pickMe_frames[4],
                                                                   pickMe_frames[5],
                                                                   pickMe_frames[6],
                                                                   pickMe_frames[7],
                                                                   pickMe_frames[8],
                                                                   pickMe_frames[9],
                                                                   pickMe_frames[10],
                                                                   pickMe_frames[11],
                                                                   pickMe_frames[0],
                                                                   gerry_switch_frames[0]
                                                                   
                                                                   ] timePerFrame:0.08f];
    
    
    _gerry_hero_Hor_Animations = @[
                                   [SKAction animateWithTextures:gerry_hor_frames timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   
                                                                   gerry_hor_frames[6],
                                                                   gerry_hor_frames[7],
                                                                   gerry_hor_frames[8],
                                                                   gerry_hor_frames[9],
                                                                   gerry_hor_frames[10],
                                                                   gerry_hor_frames[11]
                                                                   
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    _gerry_hero_Vert_Animations = @[
                                    
                                    [SKAction animateWithTextures:@[
                                                                    gerry_vert_frames[0],
                                                                    gerry_vert_frames[1],
                                                                    gerry_vert_frames[2],
                                                                    gerry_vert_frames[3],
                                                                    gerry_vert_frames[4],
                                                                    gerry_vert_frames[5],
                                                                    gerry_vert_frames[6],
                                                                    gerry_vert_frames[7]
                                                                    
                                                                    ] timePerFrame:0.06f],
                                    
                                    [SKAction animateWithTextures:@[gerry_vert_frames[8]] timePerFrame:0.01f],
                                    
                                    [SKAction animateWithTextures:@[gerry_vert_frames[9]] timePerFrame:0.01f]
                                    
                                    ];
    
    
    _gerry_Animation_hero_Switch = [SKAction animateWithTextures:gerry_switch_frames timePerFrame:0.06f];
    _gerry_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                       gerry_switch_frames[2],
                                                                       gerry_switch_frames[1],
                                                                       gerry_switch_frames[0]
                                                                       ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle10%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle16%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle17%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-gerry-idle18%@",_deviceModel]]
                             
                             ];
    
    _gerry_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                 
                                                                 idle_frames[0],
                                                                 idle_frames[1],
                                                                 idle_frames[2],
                                                                 idle_frames[3],
                                                                 idle_frames[4],
                                                                 idle_frames[5],
                                                                 idle_frames[6],
                                                                 idle_frames[7],
                                                                 idle_frames[8],
                                                                 idle_frames[9],
                                                                 idle_frames[10],
                                                                 idle_frames[11],
                                                                 idle_frames[12],
                                                                 idle_frames[13],
                                                                 idle_frames[14],
                                                                 idle_frames[15],
                                                                 idle_frames[16],
                                                                 idle_frames[17],
                                                                 idle_frames[0],
                                                                 gerry_switch_frames[0]
                                                                 
                                                                 ] timePerFrame:0.08f];
    
    _superCookieTextures[5] = gerry_switch_frames[0];
    
}

-(void)LoadingJJSuper_Farmer
{
    
    NSArray* jj_hor_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz10%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz12%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz13%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz14%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-horiz15%@",_deviceModel]]
                               
                               ];
    
    NSArray* jj_vert_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert1%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert2%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert3%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert4%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert5%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert6%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert7%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert8%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert9%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert10%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert11%@",_deviceModel]]
                                
                                ];
    
    NSArray* jj_switch_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-switch1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-switch2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-switch3%@",_deviceModel]]
                                  
                                  ];
    
    
    NSArray* jj_PickMe_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-pickme12%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* jj_idle_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle1%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle2%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle3%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle4%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle5%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle6%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle7%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle8%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle9%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-idle10%@",_deviceModel]]
                                
                                ];
    
    _jj_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                              
                                                              jj_idle_frames[0],
                                                              jj_idle_frames[1],
                                                              jj_idle_frames[2],
                                                              jj_idle_frames[3],
                                                              jj_idle_frames[4],
                                                              jj_idle_frames[5],
                                                              
                                                              jj_idle_frames[6], // spin
                                                              jj_idle_frames[7],
                                                              jj_idle_frames[8],
                                                              jj_idle_frames[9],
                                                              
                                                              jj_idle_frames[6], // spin
                                                              jj_idle_frames[7],
                                                              jj_idle_frames[8],
                                                              jj_idle_frames[9],
                                                              
                                                              jj_idle_frames[6], // spin
                                                              jj_idle_frames[7],
                                                              jj_idle_frames[8],
                                                              jj_idle_frames[9],
                                                              
                                                              jj_idle_frames[6], // spin
                                                              jj_idle_frames[7],
                                                              jj_idle_frames[8],
                                                              jj_idle_frames[4],
                                                              
                                                              jj_idle_frames[3],
                                                              jj_idle_frames[2],
                                                              jj_idle_frames[1],
                                                              
                                                              jj_idle_frames[0],
                                                              jj_switch_frames[0]
                                                              
                                                              ] timePerFrame:0.08f];
    
    
    _jj_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                
                                                                jj_PickMe_frames[0],
                                                                jj_PickMe_frames[1],
                                                                jj_PickMe_frames[2],
                                                                jj_PickMe_frames[3],
                                                                jj_PickMe_frames[4],
                                                                jj_PickMe_frames[5],
                                                                jj_PickMe_frames[6],
                                                                jj_PickMe_frames[7],
                                                                jj_PickMe_frames[8],
                                                                jj_PickMe_frames[9],
                                                                jj_PickMe_frames[10],
                                                                jj_PickMe_frames[11],
                                                                jj_PickMe_frames[0],
                                                                jj_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    _jj_Animation_hero_Switch = [SKAction animateWithTextures:jj_switch_frames timePerFrame:0.06f];
    
    _jj_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                    
                                                                    jj_switch_frames[2],
                                                                    jj_switch_frames[1],
                                                                    jj_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.06f];
    
    _jj_hero_Hor_Animations = @[
                                
                                [SKAction animateWithTextures:jj_hor_frames timePerFrame:0.06f],
                                [SKAction animateWithTextures:@[
                                                                jj_hor_frames[9],
                                                                jj_hor_frames[10],
                                                                jj_hor_frames[11],
                                                                jj_hor_frames[12],
                                                                jj_hor_frames[13],
                                                                jj_hor_frames[14]
                                                                
                                                                ] timePerFrame:0.06f]
                                
                                ];
    
    NSArray* jj_extra_vert_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert-hat%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert-vinestile%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-farmer-JJ-vert-vinestop%@",_deviceModel]]
                                
                                ];

    
    _jj_hero_Vert_Animations = @[
                                 [SKAction animateWithTextures:jj_vert_frames timePerFrame:0.06f],
                                 [SKAction animateWithTextures:@[jj_extra_vert_frames[0]] timePerFrame:0.06f],
                                 [SKAction animateWithTextures:@[jj_extra_vert_frames[1]] timePerFrame:0.06f],
                                 [SKAction animateWithTextures:@[jj_extra_vert_frames[2]] timePerFrame:0.06f]
                                 ];
    
    
    _superCookieTextures[0] = jj_switch_frames[0];
    
}

#pragma mark - Zombie loading

-(void)LoadingChipSuper_Zombie
{
    
    NSArray* chip_hor_frames = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz1%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz2%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz3%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz4%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz5%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz6%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz7%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz8%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz9%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz10%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz9%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-horiz8%@",_deviceModel]]
                                 
                                 ];
    NSArray* chip_vert_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-vert9%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* chip_idle_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle12%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle13%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle14%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle15%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle16%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-idle17%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* chip_pickMe_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme3%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme4%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme5%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme6%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme7%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme8%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme9%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme10%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-pickme11%@",_deviceModel]]
                                    
                                    ];
    
    NSArray* chip_switch_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-switch1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-switch2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-chip-switch3%@",_deviceModel]]
                                    
                                    ];
  
    
    _chip_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                chip_idle_frames[0],
                                                                chip_idle_frames[1],
                                                                chip_idle_frames[2],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[4],
                                                                chip_idle_frames[5],
                                                                chip_idle_frames[6],
                                                                chip_idle_frames[7],
                                                                
                                                                chip_idle_frames[8],
                                                                chip_idle_frames[8],
                                                                chip_idle_frames[8],
                                                                chip_idle_frames[8],
                                                                chip_idle_frames[8],
                                                                
                                                                chip_idle_frames[9],
                                                                chip_idle_frames[10],
                                                                chip_idle_frames[11],
                                                                
                                                                chip_idle_frames[12],
                                                                chip_idle_frames[12],
                                                                chip_idle_frames[12],
                                                                chip_idle_frames[12],
                                                                chip_idle_frames[12],
                                                                
                                                                chip_idle_frames[13],
                                                                chip_idle_frames[14],
                                                                chip_idle_frames[15],
                                                                
                                                                chip_idle_frames[16],
                                                                chip_idle_frames[16],
                                                                chip_idle_frames[16],
                                                                chip_idle_frames[16],
                                                                chip_idle_frames[16],
                                                    
                                                                chip_idle_frames[6],
                                                                chip_idle_frames[5],
                                                                chip_idle_frames[4],
                                                                chip_idle_frames[3],
                                                                chip_idle_frames[2],
                                                                chip_idle_frames[1],
                                                                chip_idle_frames[0],
                                                                
                                                                chip_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    
    _chip_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  
                                                                  chip_pickMe_frames[0],
                                                                  chip_pickMe_frames[1],
                                                                  chip_pickMe_frames[2],
                                                                  chip_pickMe_frames[3],
                                                                  chip_pickMe_frames[4],
                                                                  chip_pickMe_frames[5],
                                                                  chip_pickMe_frames[6],
                                                                  chip_pickMe_frames[7],
                                                                  chip_pickMe_frames[8],
                                                                  chip_pickMe_frames[9],
                                                                  chip_pickMe_frames[10],
                                                                  chip_pickMe_frames[1],
                                                                  chip_pickMe_frames[0],
    
                                                                  chip_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.08f];
    
    _chip_Animation_hero_Switch = [SKAction animateWithTextures:chip_switch_frames timePerFrame:0.06f];
    
    _chip_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      chip_switch_frames[2],
                                                                      chip_switch_frames[1],
                                                                      chip_switch_frames[0],
                                                                      ] timePerFrame:0.06f];
    
    
    _chip_hero_Hor_Animations = @[
                                  
                                  [SKAction animateWithTextures:chip_hor_frames timePerFrame:0.06f]
                                  
                                  ];
    
    _chip_hero_Vert_Animations = @[
                                   
                                   [SKAction animateWithTextures:chip_vert_frames timePerFrame:0.06f]
                                   
                                   ];
    
    _superCookieTextures[6] = chip_switch_frames[0];
    
    
}
-(void)LoadingMikeySuper_Zombie
{
    
    NSArray* mikey_frames = @[
                                  
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey1%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey2%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey3%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey4%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey5%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey6%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey7%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey8%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey9%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey10%@",_deviceModel]],
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey11%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey12%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey13%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey14%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey15%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey16%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey17%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey18%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey19%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey20%@",_deviceModel]],
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey21%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey22%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey23%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey24%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey25%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey26%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey27%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey28%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey29%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey30%@",_deviceModel]],
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey31%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey32%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey33%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey34%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey35%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey36%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey37%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey38%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey39%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey40%@",_deviceModel]],
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey41%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey42%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey43%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey44%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey45%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey46%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey47%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey48%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey49%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey50%@",_deviceModel]],
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey51%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey52%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey53%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey54%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey55%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey56%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey57%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey58%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey59%@",_deviceModel]],
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey60%@",_deviceModel]],
                              
                              
                              [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-mikey-vertical-feet%@",_deviceModel]]
                            
                              ];
    
    
    
    _mikey_hero_Hor_Animations = @[
                                   [SKAction animateWithTextures:@[
                                                                   mikey_frames[1-1],
                                                                   mikey_frames[29-1],
                                                                   mikey_frames[30-1],
                                                                   mikey_frames[31-1],
                                                                   mikey_frames[32-1],
                                                                   mikey_frames[33-1],
                                                                   mikey_frames[34-1],
                                                                   mikey_frames[35-1],
                                                                   mikey_frames[36-1],
                                                                   mikey_frames[37-1],
                                                                   mikey_frames[38-1],
                                                                   mikey_frames[39-1]
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    _mikey_hero_Vert_Animations = @[
                                   [SKAction animateWithTextures:@[
                                                                   mikey_frames[1-1],
                                                                   mikey_frames[12-1],
                                                                   mikey_frames[5-1],
                                                                   mikey_frames[13-1],
                                                                   mikey_frames[14-1],
                                                                   mikey_frames[15-1],
                                                                   mikey_frames[16-1],
                                                                   mikey_frames[17-1],
                                                                   mikey_frames[18-1],
                                                                   mikey_frames[19-1],
                                                                   mikey_frames[20-1],
                                                                   mikey_frames[21-1],
                                                                   mikey_frames[22-1],
                                                                   mikey_frames[23-1],
                                                                   mikey_frames[24-1],
                                                                   mikey_frames[25-1],
                                                                   mikey_frames[26-1],
                                                                   mikey_frames[27-1],
                                                                   mikey_frames[28-1]
                                                                   
                                                                    ] timePerFrame:0.06f],
                                   
                                    [SKAction animateWithTextures:@[
                                                                    mikey_frames[21-1],
                                                                    mikey_frames[22-1],
                                                                    mikey_frames[23-1],
                                                                    mikey_frames[24-1],
                                                                    mikey_frames[25-1],
                                                                    mikey_frames[26-1],
                                                                    mikey_frames[27-1],
                                                                    mikey_frames[28-1],
                                                                    
                                                                    mikey_frames[27-1],
                                                                    mikey_frames[26-1],
                                                                    mikey_frames[25-1],
                                                                    mikey_frames[24-1],
                                                                    mikey_frames[23-1],
                                                                    mikey_frames[22-1]
                                                                    
                                                                    ] timePerFrame:0.06f],
                                    [SKAction animateWithTextures:@[
                                                                    mikey_frames[61-1]
                                                                    ] timePerFrame:0.06f]
                                    ];
    
    
    _mikey_Animation_hero_Switch = [SKAction animateWithTextures:@[
                                                                   mikey_frames[1-1],
                                                                   mikey_frames[2-1],
                                                                   mikey_frames[3-1]
                                                                   ] timePerFrame:0.06f];
    
    _mikey_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                       mikey_frames[3-1],
                                                                       mikey_frames[2-1],
                                                                       mikey_frames[1-1]
                                                                       ] timePerFrame:0.06f];
    
    _mikey_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                   mikey_frames[1-1],
                                                                   mikey_frames[4-1],
                                                                   mikey_frames[5-1],
                                                                   mikey_frames[6-1],
                                                                   mikey_frames[7-1],
                                                                   mikey_frames[8-1],
                                                                   mikey_frames[9-1],
                                                                   mikey_frames[10-1],
                                                                   mikey_frames[8-1],
                                                                   mikey_frames[7-1],
                                                                   mikey_frames[11-1],
                                                                   mikey_frames[5-1],
                                                                   mikey_frames[4-1],
                                                                   mikey_frames[1-1]
                                                                   
                                                                   ] timePerFrame:0.08f];
    
    
    _mikey_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                 mikey_frames[1-1],
                                                                 mikey_frames[40-1],
                                                                 mikey_frames[41-1],
                                                                 mikey_frames[42-1],
                                                                 mikey_frames[43-1],
                                                                 mikey_frames[44-1],
                                                                 mikey_frames[45-1],
                                                                 mikey_frames[46-1],
                                                                 mikey_frames[47-1],
                                                                 mikey_frames[48-1],
                                                                 mikey_frames[49-1],
                                                                 mikey_frames[50-1],
                                                                 mikey_frames[51-1],
                                                                 mikey_frames[52-1],
                                                                 mikey_frames[53-1],
                                                                 mikey_frames[54-1],
                                                                 mikey_frames[55-1],
                                                                 mikey_frames[56-1],
                                                                 mikey_frames[57-1],
                                                                 mikey_frames[58-1],
                                                                 mikey_frames[59-1],
                                                                 mikey_frames[60-1],
                                                                 mikey_frames[1-1]
                                                                 
                                                                 ] timePerFrame:0.07f];
    
    _superCookieTextures[4] = mikey_frames[0];
    
}
-(void)LoadingReginaldSuper_Zombie
{
    NSArray* reginald_frames = @[
                                 
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald1%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald2%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald3%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald4%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald5%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald6%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald7%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald8%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald9%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald10%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald11%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald12%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald13%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald14%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald15%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald16%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald17%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald18%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald19%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald20%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald21%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald22%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald23%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald24%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald25%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald26%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald27%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald28%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald29%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald30%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald31%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald32%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald33%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald34%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald35%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald36%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald37%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald38%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald39%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald40%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald41%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald42%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald43%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald44%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald45%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald46%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald47%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald48%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald49%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald50%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald51%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald52%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald53%@",_deviceModel]],
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald54%@",_deviceModel]],
                                     
                                     [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-reginald-vertical-feet%@",_deviceModel]]
                                     
                                     ];
    
    
    _reginald_hero_Hor_Animations = @[
                                      [SKAction animateWithTextures:@[
                                                                      
                                                                      reginald_frames[1-1],
                                                                      reginald_frames[14-1],
                                                                      reginald_frames[15-1],
                                                                      reginald_frames[25-1],
                                                                      reginald_frames[26-1],
                                                                      reginald_frames[27-1],
                                                                      reginald_frames[28-1],
                                                                      reginald_frames[29-1],
                                                                      reginald_frames[30-1],
                                                                      reginald_frames[31-1],
                                                                      reginald_frames[32-1],
                                                                      reginald_frames[33-1],
                                                                      reginald_frames[34-1],
                                                                      reginald_frames[35-1],
                                                                      reginald_frames[36-1],
                                                                      reginald_frames[37-1],
                                                                      reginald_frames[38-1]
                                                                      
                                                                      ] timePerFrame:0.06f],
                                      [SKAction animateWithTextures:@[
                                                                      reginald_frames[29-1],
                                                                      reginald_frames[30-1],
                                                                      reginald_frames[31-1],
                                                                      reginald_frames[32-1],
                                                                      reginald_frames[33-1],
                                                                      reginald_frames[34-1],
                                                                      reginald_frames[35-1],
                                                                      reginald_frames[36-1],
                                                                      reginald_frames[37-1],
                                                                      reginald_frames[38-1]

                                                                      ] timePerFrame:0.06f]
                                      
                                      ];
    
    _reginald_hero_Vert_Animations = @[
                                       [SKAction animateWithTextures:@[
                                                                       reginald_frames[1-1],
                                                                       reginald_frames[14-1],
                                                                       reginald_frames[15-1],
                                                                       reginald_frames[16-1],
                                                                       reginald_frames[17-1],
                                                                       reginald_frames[18-1],
                                                                       reginald_frames[19-1],
                                                                       reginald_frames[20-1],
                                                                       reginald_frames[21-1],
                                                                       reginald_frames[22-1],
                                                                       reginald_frames[23-1],
                                                                       reginald_frames[24-1]
                                                                       
                                                                       ] timePerFrame:0.06f],
                                       [SKAction animateWithTextures:@[
                                                                       reginald_frames[55-1]
                                                                       ] timePerFrame:0.06f]
                                       
                                       ];
    
    
    _reginald_Animation_hero_Switch = [SKAction animateWithTextures:@[
                                                                      reginald_frames[1-1],
                                                                      reginald_frames[2-1],
                                                                      reginald_frames[3-1]
                                                                        
                                                                        ] timePerFrame:0.06f];
    
    _reginald_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                          reginald_frames[3-1],
                                                                          reginald_frames[2-1],
                                                                          reginald_frames[1-1]
                                                                          
                                                                          ] timePerFrame:0.06f];
  
    
    _reginald_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                      reginald_frames[1-1],
                                                                      reginald_frames[4-1],
                                                                      reginald_frames[5-1],
                                                                      reginald_frames[6-1],
                                                                      reginald_frames[7-1],
                                                                      reginald_frames[8-1],
                                                                      reginald_frames[9-1],
                                                                      reginald_frames[10-1],
                                                                      reginald_frames[11-1],
                                                                      reginald_frames[12-1],
                                                                      reginald_frames[13-1],
                                                                      reginald_frames[5-1],
                                                                      reginald_frames[4-1],
                                                                      reginald_frames[1-1]
                                                                      
                                                                      
                                                                      ] timePerFrame:0.08f];
    
    
    _reginald_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                    
                                                                    reginald_frames[1-1],
                                                                    reginald_frames[39-1],
                                                                    reginald_frames[40-1],
                                                                    reginald_frames[41-1],
                                                                    reginald_frames[42-1],
                                                                    reginald_frames[43-1],
                                                                    reginald_frames[44-1],
                                                                    reginald_frames[45-1],
                                                                    reginald_frames[46-1],
                                                                    reginald_frames[47-1],
                                                                    reginald_frames[48-1],
                                                                    reginald_frames[49-1],
                                                                    reginald_frames[50-1],
                                                                    reginald_frames[51-1],
                                                                    reginald_frames[50-1],
                                                                    reginald_frames[49-1],
                                                                    reginald_frames[50-1],
                                                                    reginald_frames[51-1],
                                                                    reginald_frames[50-1],
                                                                    reginald_frames[49-1],
                                                                    reginald_frames[52-1],
                                                                    reginald_frames[53-1],
                                                                    reginald_frames[45-1],
                                                                    reginald_frames[54-1],
                                                                    reginald_frames[1-1]
                                                                    
                                                                    ] timePerFrame:0.08f];
    
    
    _superCookieTextures[1] = reginald_frames[0];
    
}
-(void)LoadingLukeSuper_Zombie
{
    
    NSArray* luke_frames = @[
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke1%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke2%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke3%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke4%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke5%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke6%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke7%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke8%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke9%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke10%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke11%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke12%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke13%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke14%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke15%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke16%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke17%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke18%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke19%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke20%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke21%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke22%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke23%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke24%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke25%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke26%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke27%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke28%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke29%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke30%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke31%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke32%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke33%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke34%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke35%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke36%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke37%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke38%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke39%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke40%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke41%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke42%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke43%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke44%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke45%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke46%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke47%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke48%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke49%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke50%@",_deviceModel]],
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke51%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke52%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke53%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke54%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke55%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke56%@",_deviceModel]],
                                 
                                 
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke-horizontal-eye%@",_deviceModel]],
                                 [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-luke-vertical-eye%@",_deviceModel]]
                                 
                                 ];
    
    
    _luke_hero_Hor_Animations = @[
                                  [SKAction animateWithTextures:@[
                                                                  
                                                                  luke_frames[1-1],
                                                                  luke_frames[29-1],
                                                                  luke_frames[30-1],
                                                                  luke_frames[31-1],
                                                                  luke_frames[32-1],
                                                                  luke_frames[33-1],
                                                                  luke_frames[34-1],
                                                                  luke_frames[35-1],
                                                                  luke_frames[36-1],
                                                                  luke_frames[37-1],
                                                                  luke_frames[38-1],
                                                                  luke_frames[39-1]
                                                                  
                                                                  ] timePerFrame:0.06f],
                                  
                                  [SKAction animateWithTextures:@[
                                                                  luke_frames[57-1]
                                                                  ] timePerFrame:0.06f]
                                  ];
    
    _luke_hero_Vert_Animations = @[
                                   [SKAction animateWithTextures:@[
                                                                   luke_frames[1-1],
                                                                   luke_frames[15-1],
                                                                   luke_frames[16-1],
                                                                   luke_frames[17-1],
                                                                   luke_frames[18-1],
                                                                   luke_frames[19-1],
                                                                   luke_frames[20-1],
                                                                   luke_frames[21-1],
                                                                   luke_frames[22-1],
                                                                   luke_frames[23-1],
                                                                   luke_frames[24-1],
                                                                   luke_frames[25-1],
                                                                   luke_frames[26-1],
                                                                   luke_frames[27-1],
                                                                   luke_frames[28-1]
                                                                   
                                                                   ] timePerFrame:0.06f],
                                   
                                   [SKAction animateWithTextures:@[
                                                                   luke_frames[58-1]
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    
    _luke_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                  luke_frames[1-1],
                                                                  luke_frames[2-1],
                                                                  luke_frames[3-1],
                                                                  luke_frames[4-1],
                                                                  luke_frames[5-1],
                                                                  luke_frames[6-1],
                                                                  luke_frames[7-1],
                                                                  luke_frames[8-1],
                                                                  luke_frames[9-1],
                                                                  luke_frames[10-1],
                                                                  luke_frames[11-1],
                                                                  luke_frames[12-1],
                                                                  luke_frames[13-1],
                                                                  luke_frames[14-1],
                                                                  luke_frames[1-1]
                                                                  
                                                                  ] timePerFrame:0.08f];
    
    _luke_Animation_hero_Switch = [SKAction animateWithTextures:@[
                                                                  
                                                                  luke_frames[1-1],
                                                                  luke_frames[2-1],
                                                                  luke_frames[3-1]
                                                                  
                                                                  ] timePerFrame:0.06f];
    _luke_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                      
                                                                      luke_frames[3-1],
                                                                      luke_frames[2-1],
                                                                      luke_frames[1-1]
                                                                      
                                                                      ] timePerFrame:0.06f];
    
    
    _luke_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                luke_frames[1-1],
                                                                luke_frames[40-1],
                                                                luke_frames[41-1],
                                                                luke_frames[42-1],
                                                                luke_frames[43-1],
                                                                luke_frames[44-1],
                                                                luke_frames[45-1],
                                                                luke_frames[46-1],
                                                                luke_frames[47-1],
                                                                luke_frames[48-1],
                                                                luke_frames[49-1],
                                                                luke_frames[50-1],
                                                                luke_frames[51-1],
                                                                luke_frames[52-1],
                                                                luke_frames[51-1],
                                                                luke_frames[50-1],
                                                                luke_frames[51-1],
                                                                luke_frames[52-1],
                                                                luke_frames[53-1],
                                                                luke_frames[54-1],
                                                                luke_frames[55-1],
                                                                luke_frames[56-1],
                                                                luke_frames[1-1]
                                                                
                                                                ] timePerFrame:0.08f];
    
    _superCookieTextures[2] = luke_frames[0];
    
}
-(void)LoadingDustinSuper_Zombie
{
    NSArray* dustin_hor_frames = @[
                                   
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz1%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz2%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz3%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz4%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz5%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz6%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz7%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz8%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz9%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz10%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz11%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz12%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz13%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz14%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz15%@",_deviceModel]],
                                   [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-horiz16%@",_deviceModel]]
                                   
                                   ];
    
    NSArray* dustin_vert_frames = @[
                                    
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert1%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert2%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert3%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert4%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert5%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert6%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert7%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert8%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert9%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert10%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert11%@",_deviceModel]],
                                    [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-vert12%@",_deviceModel]]
                                    
                                    ];
    
    
    NSArray* dustin_switch_frames = @[
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-switch1%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-switch2%@",_deviceModel]],
                                      [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-switch3%@",_deviceModel]]
                                      
                                      ];
    
    NSArray* pickMe_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme10%@",_deviceModel]],
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-pickme11%@",_deviceModel]]
                               
                               ];
    
    _dustin_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                    pickMe_frames[0],
                                                                    pickMe_frames[1],
                                                                    pickMe_frames[2],
                                                                    pickMe_frames[3],
                                                                    pickMe_frames[4],
                                                                    pickMe_frames[5],
                                                                    pickMe_frames[6],
                                                                    pickMe_frames[7],
                                                                    pickMe_frames[8],
                                                                    pickMe_frames[9],
                                                                    pickMe_frames[10],
                                                                    pickMe_frames[1],
                                                                    pickMe_frames[0],
                                                                    dustin_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.08f];
    
    _dustin_hero_Hor_Animations = @[
                                    [SKAction animateWithTextures:dustin_hor_frames timePerFrame:0.08f]
                                    
                                    ];
    
    
    _dustin_hero_Vert_Animations = @[
                                     [SKAction animateWithTextures:dustin_vert_frames timePerFrame:0.08f]
                                     ];
    
    
    
    _dustin_Animation_hero_Switch = [SKAction animateWithTextures:dustin_switch_frames timePerFrame:0.06f];
    _dustin_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                        dustin_switch_frames[2],
                                                                        dustin_switch_frames[1],
                                                                        dustin_switch_frames[0]
                                                                        ] timePerFrame:0.06f];
    
    
    NSArray* idle_frames = @[
                             
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle1%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle2%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle3%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle4%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle5%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle6%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle7%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle8%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle9%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle10%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle11%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle12%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle13%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle14%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle15%@",_deviceModel]],
                             [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-dustin-idle16%@",_deviceModel]]
                             
                             ];
    
    _dustin_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                  
                                                                  idle_frames[0],
                                                                  idle_frames[1],
                                                                  idle_frames[2],
                                                                  
                                                                  idle_frames[3],
                                                                  idle_frames[3],
                                                                  idle_frames[3],
                                                                  idle_frames[3],
                                                                  idle_frames[3],
                                                                  
                                                                  idle_frames[4],
                                                                  idle_frames[5],
                                                                  idle_frames[6],
                                                                  
                                                                  idle_frames[7],
                                                                  idle_frames[7],
                                                                  idle_frames[7],
                                                                  idle_frames[7],
                                                                  idle_frames[7],
                                                                  
                                                                  idle_frames[8],
                                                                  idle_frames[9],
                                                                  idle_frames[10],
                                                                  
                                                                  idle_frames[11],
                                                                  idle_frames[12],
                                                                  idle_frames[11],
                                                                  idle_frames[12],
                                                                  idle_frames[11],
                                                                  idle_frames[12],
                                                                  idle_frames[11],
                                                                  idle_frames[12],
                                                                  
                                                                  idle_frames[13],
                                                                  idle_frames[14],
                                                                  idle_frames[15],
                                                                  idle_frames[1],
                                                                  idle_frames[0],
                                                                  dustin_switch_frames[0]
                                                                  
                                                                  ] timePerFrame:0.08f];
    
    
    
    _superCookieTextures[3] = dustin_switch_frames[0];
    
}

-(void)LoadingGerrySuper_Zombie
{
    
    NSArray* gerry_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry10%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry12%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry13%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry14%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry15%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry16%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry17%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry18%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry19%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry20%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry21%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry22%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry23%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry24%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry25%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry26%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry27%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry28%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry29%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry30%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry31%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry32%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry33%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry34%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry35%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry36%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry37%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry38%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry39%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry40%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry41%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry42%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry43%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry44%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry45%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry46%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry47%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry48%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry49%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry50%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry51%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry52%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry53%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry54%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry55%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry56%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry57%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry58%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry59%@",_deviceModel]],
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-zombie-gerry-vertical-hand%@",_deviceModel]]
                                  
                                  
                                  ];
    
    
    
    
    _gerry_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                
                                                                   gerry_frames[1-1],
                                                                   gerry_frames[4-1],
                                                                   gerry_frames[5-1],
                                                                   gerry_frames[6-1],
                                                                   gerry_frames[7-1],
                                                                   gerry_frames[8-1],
                                                                   gerry_frames[9-1],
                                                                   gerry_frames[10-1],
                                                                   gerry_frames[8-1],
                                                                   gerry_frames[7-1],
                                                                   gerry_frames[6-1],
                                                                   gerry_frames[5-1],
                                                                   gerry_frames[4-1],
                                                                   gerry_frames[1-1]
                                                                   
                                                                   ] timePerFrame:0.08f];
    
    
    _gerry_hero_Hor_Animations = @[
                                   [SKAction animateWithTextures:@[
                                                                   
                                                                   gerry_frames[1-1],
                                                                   gerry_frames[21-1],
                                                                   gerry_frames[22-1],
                                                                   gerry_frames[23-1],
                                                                   gerry_frames[24-1],
                                                                   gerry_frames[25-1],
                                                                   gerry_frames[26-1],
                                                                   gerry_frames[27-1],
                                                                   gerry_frames[28-1],
                                                                   gerry_frames[29-1],
                                                                   gerry_frames[30-1],
                                                                   gerry_frames[31-1],
                                                                   gerry_frames[32-1],
                                                                   gerry_frames[33-1],
                                                                   gerry_frames[34-1],
                                                                   gerry_frames[35-1],
                                                                   gerry_frames[36-1],
                                                                   gerry_frames[26-1]
                                                                   
                                                                   ] timePerFrame:0.06f],
                                   [SKAction animateWithTextures:@[
                                                                   
                                                                   gerry_frames[27-1],
                                                                   gerry_frames[28-1],
                                                                   gerry_frames[29-1],
                                                                   gerry_frames[30-1],
                                                                   gerry_frames[31-1],
                                                                   gerry_frames[32-1],
                                                                   gerry_frames[33-1],
                                                                   gerry_frames[34-1],
                                                                   gerry_frames[35-1],
                                                                   gerry_frames[36-1],
                                                                   gerry_frames[26-1]
                                                                   
                                                                   ] timePerFrame:0.06f]
                                   ];
    
    _gerry_hero_Vert_Animations = @[
                                    
                                    [SKAction animateWithTextures:@[
                                                                    
                                                                    gerry_frames[1-1],
                                                                    gerry_frames[11-1],
                                                                    gerry_frames[12-1],
                                                                    gerry_frames[13-1],
                                                                    gerry_frames[14-1],
                                                                    gerry_frames[15-1],
                                                                    gerry_frames[16-1],
                                                                    gerry_frames[17-1],
                                                                    gerry_frames[18-1],
                                                                    gerry_frames[19-1],
                                                                    gerry_frames[20-1]
                                                                    
                                                                    ] timePerFrame:0.06f],
                                    
                                    [SKAction animateWithTextures:@[
                                                                    
                                                                    gerry_frames[60-1]
                                                                    
                                                                    ] timePerFrame:0.01f]
    
                                    ];
    
    _gerry_Animation_hero_Switch = [SKAction animateWithTextures:@[
                                                                   gerry_frames[0],
                                                                   gerry_frames[1],
                                                                   gerry_frames[2]
                                                                   ]
                                                    timePerFrame:0.06f];
    
    _gerry_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                       gerry_frames[2],
                                                                       gerry_frames[1],
                                                                       gerry_frames[0]
                                                                       ] timePerFrame:0.06f];
    
    
    _gerry_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                                 gerry_frames[1-1],
                                                                 gerry_frames[37-1],
                                                                 gerry_frames[38-1],
                                                                 gerry_frames[39-1],
                                                                 gerry_frames[40-1],
                                                                 gerry_frames[41-1],
                                                                 gerry_frames[42-1],
                                                                 gerry_frames[43-1],
                                                                 gerry_frames[44-1],
                                                                 gerry_frames[45-1],
                                                                 gerry_frames[46-1],
                                                                 gerry_frames[47-1],
                                                                 gerry_frames[48-1],
                                                                 gerry_frames[49-1],
                                                                 gerry_frames[50-1],
                                                                 gerry_frames[51-1],
                                                                 gerry_frames[52-1],
                                                                 gerry_frames[53-1],
                                                                 gerry_frames[54-1],
                                                                 gerry_frames[55-1],
                                                                 gerry_frames[56-1],
                                                                 gerry_frames[57-1],
                                                                 
                                                                 gerry_frames[51-1],
                                                                 gerry_frames[52-1],
                                                                 gerry_frames[53-1],
                                                                 gerry_frames[54-1],
                                                                 gerry_frames[55-1],
                                                                 gerry_frames[56-1],
                                                                 gerry_frames[57-1],
                                                                 
                                                                 gerry_frames[51-1],
                                                                 gerry_frames[52-1],
                                                                 gerry_frames[53-1],
                                                                 gerry_frames[54-1],
                                                                 gerry_frames[55-1],
                                                                 
                                                                 gerry_frames[58-1],
                                                                 gerry_frames[59-1],
                                                                 gerry_frames[1-1]
                                                                 
                                                                 ] timePerFrame:0.08f];
    
    _superCookieTextures[5] = gerry_frames[0];
    
}

-(void)LoadingJJSuper_Zombie
{
    
    NSArray* jj_hor_frames = @[
                               
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz1%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz2%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz3%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz4%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz5%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz6%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz7%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz8%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz9%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz10%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz11%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz12%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz13%@",_deviceModel]],
                               [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-horiz14%@",_deviceModel]]
                               
                               ];
    
    NSArray* jj_vert_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert1%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert2%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert3%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert4%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert5%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert6%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert7%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert8%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert9%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert10%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert11%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert12%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert13%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert14%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-vert15%@",_deviceModel]]
                                
                                ];
    
    NSArray* jj_switch_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-switch1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-switch2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-switch3%@",_deviceModel]]
                                  
                                  ];
    
    
    NSArray* jj_PickMe_frames = @[
                                  
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme1%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme2%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme3%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme4%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme5%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme6%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme7%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme8%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme9%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme10%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme11%@",_deviceModel]],
                                  [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-pickme12%@",_deviceModel]]
                                  
                                  ];
    
    NSArray* jj_idle_frames = @[
                                
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle1%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle2%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle3%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle4%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle5%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle6%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle7%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle8%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle9%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle10%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle11%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle12%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle13%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle14%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle15%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle16%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle17%@",_deviceModel]],
                                [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"cdd-survivor-jj-idle18%@",_deviceModel]]
                                
                                ];
    
    _jj_Animation_hero_Idle = [SKAction animateWithTextures:@[
                                                              
                                                              jj_idle_frames[0],
                                                              jj_idle_frames[1],
                                                              jj_idle_frames[2],
                                                              jj_idle_frames[3],
                                                              jj_idle_frames[4],
                                                              jj_idle_frames[5],
                                                              jj_idle_frames[6],
                                                              jj_idle_frames[7],
                                                              jj_idle_frames[8],
                                                              jj_idle_frames[9],
                                                              jj_idle_frames[10],
                                                              jj_idle_frames[11],
                                                              jj_idle_frames[12],
                                                              jj_idle_frames[13],
                                                              jj_idle_frames[14],
                                                              jj_idle_frames[15],
                                                              jj_idle_frames[16],
                                                              jj_idle_frames[17],
                                                              
                                                              jj_idle_frames[0],
                                                              jj_switch_frames[0]
                                                              
                                                              ] timePerFrame:0.08f];
    
    
    _jj_Animation_hero_PickMe = [SKAction animateWithTextures:@[
                                                                
                                                                jj_PickMe_frames[0],
                                                                jj_PickMe_frames[1],
                                                                jj_PickMe_frames[2],
                                                                jj_PickMe_frames[3],
                                                                jj_PickMe_frames[4],
                                                                jj_PickMe_frames[5],
                                                                jj_PickMe_frames[6],
                                                                jj_PickMe_frames[7],
                                                                jj_PickMe_frames[8],
                                                                jj_PickMe_frames[9],
                                                                jj_PickMe_frames[10],
                                                                jj_PickMe_frames[11],
                                                                jj_PickMe_frames[0],
                                                                jj_switch_frames[0]
                                                                
                                                                ] timePerFrame:0.06f];
    
    
    _jj_Animation_hero_Switch = [SKAction animateWithTextures:jj_switch_frames timePerFrame:0.06f];
    
    _jj_Animation_hero_SwitchBack = [SKAction animateWithTextures:@[
                                                                    
                                                                    jj_switch_frames[2],
                                                                    jj_switch_frames[1],
                                                                    jj_switch_frames[0]
                                                                    
                                                                    ] timePerFrame:0.06f];
    
    SKTexture* vertIcing = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-jj-icing-thrown-vert"]];
    SKTexture* horIcing = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"milkyway-hero-jj-icing-thrown-horiz"]];
    
    _jj_hero_Hor_Animations = @[
                                
                                [SKAction animateWithTextures:jj_hor_frames timePerFrame:0.06f],
                                [SKAction animateWithTextures:@[horIcing] timePerFrame:0.06f]
                                
                                ];
    
    
    _jj_hero_Vert_Animations = @[
                                 [SKAction animateWithTextures:jj_vert_frames timePerFrame:0.08f],
                                 [SKAction animateWithTextures:@[vertIcing] timePerFrame:0.06f]
                                 ];
    
    
    _superCookieTextures[0] = jj_switch_frames[0];
    
}


#pragma mark - Grab User Selected Power up Cookie Costumes

- (NSMutableArray *)selectedCookieCostumes
{
    NSArray *cookieCostumeArray = [NSMutableArray new];
    
    if ([SGAppDelegate appDelegate].accountDict[@"cookieCostumes"]) cookieCostumeArray = [SGAppDelegate appDelegate].accountDict[@"cookieCostumes"];
    
    NSPredicate *selectedCostumesPredicate = [NSPredicate predicateWithFormat:@"isSelected == 1"];
    NSArray *filterSelectedCostumes = [cookieCostumeArray filteredArrayUsingPredicate:selectedCostumesPredicate];
    NSMutableArray *selectedCookieCostumeArray = [filterSelectedCostumes mutableCopy];
    
    return selectedCookieCostumeArray;
}

// NOTE
// Updates for Grabbing player selected super hero cookie costumes!!!!

#pragma mark - Sprite animations

-(void)PlayCharacterAnimation:(CDGameBoardSpriteNode*)cookie{
    
    cookie.mainTexture = cookie.texture;
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie]){
        
        /*
         self.superCookieTextures = @[
         
         jjFrames[0],
         reginaldFrames[1],
         lukeFrames[2],
         dustinFrames[3],
         mikeFrames[4],
         garryFrames[5],
         chipFrames[6]
         
         ];
         */
        
        int kind = cookie.typeID;
        
        switch (kind) {
            case COOKIE_CHIP:{
                
                [cookie runAction:_chip_Animation_hero_Idle completion:^{ cookie.texture = _superCookieTextures[6]; }];
                
                break;
            }
            case COOKIE_BLUE:{
                
                [cookie runAction:_mikey_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[4];}];
                
                break;
            }
            case COOKIE_ORANGE:{
                
                [cookie runAction:_reginald_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[1];}];
                
                break;
            }
            case COOKIE_YELLOW:{
                
                [cookie runAction:_luke_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[2]; }];
                
                break;
            }
            case COOKIE_GREEN:{
                
                [cookie runAction:_dustin_Animation_hero_Idle completion:^{ cookie.texture = _superCookieTextures[3];}];
                
                break;
            }
            case COOKIE_PURPLE:{
                
                [cookie runAction:_gerry_Animation_hero_Idle completion:^{ cookie.texture = _superCookieTextures[5];}];
                
                break;
            }
            case COOKIE_RED:{
                
                [cookie runAction:_jj_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[0];}];
                
                break;
            }
                
            default:
                break;
        }
        
        return;
    }
    
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_Character];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Chip-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_Character];
            [self runAction:[SKAction waitForDuration:0.01f] completion:^{
                [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Mikey-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            }];
            break;
            
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_Character];
            [self runAction:[SKAction waitForDuration:0.03] completion:^{
                [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Reginald-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            }];
            break;
            
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_Character];
            [self runAction:[SKAction waitForDuration:0.8] completion:^{
                [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Luke-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            }];
            break;
            
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_Character];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Alien-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_Character];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Gerry-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_Character];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"JJ-Character" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        default:
            break;
    }
    
}

-(void)PlayIdleAnimation:(CDGameBoardSpriteNode*)cookie{
    
    cookie.mainTexture = cookie.texture;
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie]){
        
        /*
         self.superCookieTextures = @[
         
         jjFrames[0],
         reginaldFrames[1],
         lukeFrames[2],
         dustinFrames[3],
         mikeFrames[4],
         garryFrames[5],
         chipFrames[6]
         
         ];
         */
        
        int kind = cookie.typeID;
        
        switch (kind) {
            case COOKIE_CHIP:{
             
                [cookie runAction:_chip_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[6];}];
                
                break;
            }
            case COOKIE_BLUE:{
                
                [cookie runAction:_mikey_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[4];}];
                
                break;
            }
            case COOKIE_ORANGE:{
                
                [cookie runAction:_reginald_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[1];}];
                
                break;
            }

            case COOKIE_YELLOW:{
                
                [cookie runAction:_luke_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[2];}];
                
                break;
            }
            case COOKIE_GREEN:{
                
                [cookie runAction:_dustin_Animation_hero_Idle completion:^{ cookie.texture = _superCookieTextures[3];}];
                
                break;
            }
            case COOKIE_PURPLE:{
                
                [cookie runAction:_gerry_Animation_hero_Idle completion:^{ cookie.texture = _superCookieTextures[5];}];
                
                break;
            }
            case COOKIE_RED:{
                
                [cookie runAction:_jj_Animation_hero_Idle completion:^{cookie.texture = _superCookieTextures[0];}];
                
                break;
            }
                
            default:
                break;
        }
        
        return;
    }
    
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Chip-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Mikey-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Reginald-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Luke-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Alien-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Gerry-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_Idle];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"JJ-Idle" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        default:
            break;
    }
    
}

-(void)PlaySwitchAnimation:(CDGameBoardSpriteNode*)cookie{
    
    cookie.mainTexture = cookie.texture;
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie]){
        
        int kind = cookie.typeID;
        
        switch (kind) {
            case COOKIE_CHIP:{
                
                [cookie runAction:_chip_Animation_hero_Switch];
                
                break;
            }
            case COOKIE_BLUE:{
                
                [cookie runAction:_mikey_Animation_hero_Switch];
                
                break;
            }
            case COOKIE_ORANGE:{
                
                [cookie runAction:_reginald_Animation_hero_Switch];
                
                break;
            }
            case COOKIE_YELLOW:{
                
                [cookie runAction:_luke_Animation_hero_Switch];
                
                break;
            }
            case COOKIE_GREEN:{
                
                [cookie runAction:_dustin_Animation_hero_Switch];
                
                break;
            }
            case COOKIE_PURPLE:{
                
                [cookie runAction:_gerry_Animation_hero_Switch];
                
                break;
            }
            case COOKIE_RED:{
                
                [cookie runAction:_jj_Animation_hero_Switch];
                
                break;
            }
                
            default:
                break;
        }
        
        return;
    }

    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_Switch];
            break;
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_Switch];
            break;
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_Switch];
            break;
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_Switch];
            break;
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_Switch];
            break;
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_Switch];
            break;
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_Switch];
            break;
            
        default:
            break;
    }
    
}

-(void)PlaySwitchBackAnimation:(CDGameBoardSpriteNode*)cookie{
    
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie]){
        
        /*
         self.superCookieTextures = @[
         
         jjFrames[0],
         reginaldFrames[1],
         lukeFrames[2],
         dustinFrames[3],
         mikeFrames[4],
         garryFrames[5],
         chipFrames[6]
         
         ];
         */
        
        int kind = cookie.typeID;
        
        switch (kind) {
            case COOKIE_CHIP:{
                
                [cookie runAction:_chip_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[6];}];
                
                break;
            }
            case COOKIE_BLUE:{
                
                [cookie runAction:_mikey_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[4];}];
                
                break;
            }
            case COOKIE_ORANGE:{
                
                [cookie runAction:_reginald_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[1];}];
                
                break;
            }
            case COOKIE_YELLOW:{
                
                [cookie runAction:_luke_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[2];}];
                
                break;
            }
            case COOKIE_GREEN:{
                
                [cookie runAction:_dustin_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[3];}];
                
                break;
            }
            case COOKIE_PURPLE:{
                
                [cookie runAction:_gerry_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[5];}];
                
                break;
            }
            case COOKIE_RED:{
                
                [cookie runAction:_jj_Animation_hero_SwitchBack completion:^{cookie.texture = _superCookieTextures[0];}];
                
                break;
            }
                
            default:
                break;
        }
        
        return;
    }
    
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_SwitchBack];
            break;
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_SwitchBack];
            break;
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_SwitchBack];
            break;
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_SwitchBack];
            break;
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_SwitchBack];
            break;
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_SwitchBack];
            break;
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_SwitchBack];
            break;
            
        default:
            break;
    }
    
}

-(void)PlayDeleteAnimation:(CDGameBoardSpriteNode*)cookie{
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie])
        return;
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_Delete];
            break;
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_Delete];
            break;
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_Delete];
            break;
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_Delete];
            break;
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_Delete];
            break;
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_Delete];
            break;
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_Delete];
            break;
            
        default:
            break;
    }
}

-(void)PlayFallingAnimation:(CDGameBoardSpriteNode*)cookie{
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie])
        return;
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_Falling];
            break;
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_Falling];
            break;
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_Falling];
            break;
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_Falling];
            break;
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_Falling];
            break;
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_Falling];
            break;
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_Falling];
            break;
            
        default:
            break;
    }
}

-(void)PlayPickMeAnimation:(CDGameBoardSpriteNode*)cookie{
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie]){
        
        /*
         self.superCookieTextures = @[
         
         jjFrames[0],
         reginaldFrames[1],
         lukeFrames[2],
         dustinFrames[3],
         mikeFrames[4],
         garryFrames[5],
         chipFrames[6]
         
         ];
         */
        
        int kind = cookie.typeID;
        
        switch (kind) {
            case COOKIE_CHIP:{
                
                [cookie runAction:_chip_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[6];}];
                
                break;
            }
            case COOKIE_BLUE:{
                
                [cookie runAction:_mikey_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[4];}];
                
                break;
            }
            case COOKIE_ORANGE:{
                
                [cookie runAction:_reginald_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[1];}];
                
                break;
            }
            case COOKIE_YELLOW:{
                
                [cookie runAction:_luke_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[2];}];
                
                break;
            }
            case COOKIE_GREEN:{
                
                [cookie runAction:_dustin_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[3];}];
                
                break;
            }
            case COOKIE_PURPLE:{
                
                [cookie runAction:_gerry_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[5];}];
                
                break;
            }
            case COOKIE_RED:{
                
                [cookie runAction:_jj_Animation_hero_PickMe completion:^{cookie.texture = _superCookieTextures[0];}];
                
                break;
            }
                
            default:
                break;
        }
        
        return;
    }
    
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_PickMe];
            [self runAction:[SKAction waitForDuration:0.2] completion:^{
                [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Chip-PickMe" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            }];
            break;
            
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_PickMe];
            // Nate - Mikey-PickMe
            //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"Mikey-PickMe" FileType:@"m4a" volume:1.0f];
            break;
            
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_PickMe];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Reginald-PickMe" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_PickMe];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Luke-PickMe" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_PickMe];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Alien-PickMe" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_PickMe];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Gerry-PickMe" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_PickMe];
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"JJ-PickMe" FileType:@"caf" volume:1.0f];// "m4a" volume:1.0f];
            break;
            
        default:
            break;
    }
}

-(void)PlayShockerAnimation:(CDGameBoardSpriteNode*)cookie{
    
    if([cookie isMemberOfClass:[CDBombSpriteNode class]])
        return;
    
    if([[SGGameManager gameManager].SuperCookies containsObject:cookie])
        return;
    if([[SGGameManager gameManager].WrappedCookies containsObject:cookie])
        return;
    
    int kind = cookie.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [cookie runAction:_chip_Animation_Shocker];
            break;
        case COOKIE_BLUE:
            [cookie runAction:_mikey_Animation_Shocker];
            break;
        case COOKIE_ORANGE:
            [cookie runAction:_reginald_Animation_Shocker];
            break;
        case COOKIE_YELLOW:
            [cookie runAction:_luke_Animation_Shocker];
            break;
        case COOKIE_GREEN:
            [cookie runAction:_dustin_Animation_Shocker];
            break;
        case COOKIE_PURPLE:
            [cookie runAction:_gerry_Animation_Shocker];
            break;
        case COOKIE_RED:
            [cookie runAction:_jj_Animation_Shocker];
            break;
            
        default:
            break;
    }
}



#pragma mark - Sorting

-(void)SuperHorizontal:(CDCookieSpriteNode*)theSuper{
    
    [[SGGameManager gameManager].SuperCookies removeObject:theSuper];
    
    [theSuper removeAllActions];
    
    NSString* costume = KeyThemeDefault;
    
    int kind = theSuper.typeID;
    
    // now get the planet the costume is from
    
    switch (kind) {
        case COOKIE_CHIP:{
            costume = [SGPlayerPreferencesManager preferenceManager].brownSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Chip_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Chip_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Chip_Hor:theSuper];
                
            }
            
            break;
        }
        case COOKIE_BLUE:{
            costume = [SGPlayerPreferencesManager preferenceManager].blueSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Mikey_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Mikey_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Mikey_Hor:theSuper];
                
            }
            
            break;
        }
        case COOKIE_ORANGE:{
            costume = [SGPlayerPreferencesManager preferenceManager].orangeSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Reginald_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Reginald_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Reginald_Hor:theSuper];
                
            }
            break;
        }
        case COOKIE_YELLOW:{
            costume = [SGPlayerPreferencesManager preferenceManager].yellowSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Luke_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Luke_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Luke_Hor:theSuper];
                
            }
            break;
        }
        case COOKIE_GREEN:{
            costume = [SGPlayerPreferencesManager preferenceManager].greenSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Dustin_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Dustin_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Dustin_Hor:theSuper];
                
            }
            break;
        }
        case COOKIE_PURPLE:{
            costume = [SGPlayerPreferencesManager preferenceManager].purpleSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Gerry_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Gerry_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Gerry_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Gerry_Hor:theSuper];
                
            }
            break;
        }
        case COOKIE_RED:{
            costume = [SGPlayerPreferencesManager preferenceManager].redSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_JJ_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_JJ_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_JJ_Hor:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_JJ_Hor:theSuper];
                
            }
            break;
        }
        default:
            break;
    }
    
}

-(void)SuperVertical:(CDCookieSpriteNode*)theSuper{
    
    [[SGGameManager gameManager].SuperCookies removeObject:theSuper];
    
    [theSuper removeAllActions];
    
    NSString* costume = KeyThemeDefault;
    
    int kind = theSuper.typeID;
    
    // now get the planet the costume is from
    
    switch (kind) {
        case COOKIE_CHIP:{
            costume = [SGPlayerPreferencesManager preferenceManager].brownSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Chip_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Chip_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Chip_Vert:theSuper];
                
            }
            
            break;
        }
        case COOKIE_BLUE:{
            costume = [SGPlayerPreferencesManager preferenceManager].blueSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Mikey_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Mikey_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Mikey_Vert:theSuper];
                
            }
            
            break;
        }
        case COOKIE_ORANGE:{
            costume = [SGPlayerPreferencesManager preferenceManager].orangeSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                
                [self SuperHero_Reginald_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                
                [self Farmer_Reginald_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                
                [self Zombie_Reginald_Vert:theSuper];
            }
            
            break;
        }
        case COOKIE_YELLOW:{
            costume = [SGPlayerPreferencesManager preferenceManager].yellowSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Luke_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Luke_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Luke_Vert:theSuper];
                
            }
            break;
        }
        case COOKIE_GREEN:{
            costume = [SGPlayerPreferencesManager preferenceManager].greenSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Dustin_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Dustin_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Dustin_Vert:theSuper];
                
            }

            
            break;
        }
        case COOKIE_PURPLE:{
            costume = [SGPlayerPreferencesManager preferenceManager].purpleSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_Gerry_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_Gerry_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_Gerry_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_Gerry_Vert:theSuper];
                
            }

            
            break;
        }
        case COOKIE_RED:{
            costume = [SGPlayerPreferencesManager preferenceManager].redSuperLooks;
            
            if([costume isEqualToString:KeyThemeDefault])
            {
                [self Default_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeChef])
            {
                [self Chef_JJ_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeSuperHero])
            {
                [self SuperHero_JJ_Vert:theSuper];

            }else if([costume isEqualToString:KeyThemeFarmer])
            {
                [self Farmer_JJ_Vert:theSuper];
                
            }else if([costume isEqualToString:KeyThemeZombie])
            {
                [self Zombie_JJ_Vert:theSuper];
                
            }
            
            break;
        }
        default:
            break;
    }
    
}

#pragma mark - Default Movement animations

-(void)Default_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    if(!_isPlayingMilkwaveSound){
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_milky_wave_distorted" FileType:@"caf" volume:1 completion:^{
            self.isPlayingMilkwaveSound = NO;
        }];
        
    }
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            //waitTime
            {
                float column = piece.column;
                
                if(piece.column > theSuper.column){ // on the right
                    
                    waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                    waitTime += firstPartDuration;
                    
                }else{ // on the left
                    
                    waitTime = (superColumn - column) * timeBetweenColumns;
                    
                }
                
                waitTime += 0.3f; // plus startupTime
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    //waitTime
                    {
                        float column = piece.column;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                            
                        }
                        
                        waitTime += 0.3f; // plus startupTime
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        //waitTime
                        {
                            float column = piece.column;
                            
                            if(piece.column > theSuper.column){ // on the right
                                
                                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                                waitTime += firstPartDuration;
                                
                            }else{ // on the left
                                
                                waitTime = (superColumn - column) * timeBetweenColumns;
                                
                            }
                            
                            waitTime += 0.3f; // plus startupTime
                        }

                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            //waitTime
            {
                float column = piece.column;
                
                if(piece.column > theSuper.column){ // on the right
                    
                    waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                    waitTime += firstPartDuration;
                    
                }else{ // on the left
                    
                    waitTime = (superColumn - column) * timeBetweenColumns;
                    
                }
                
                waitTime += 0.3f; // plus startupTime
            }

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            //waitTime
            {
                float column = piece.column;
                
                if(piece.column > theSuper.column){ // on the right
                    
                    waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                    waitTime += firstPartDuration;
                    
                }else{ // on the left
                    
                    waitTime = (superColumn - column) * timeBetweenColumns;
                    
                }
                
                waitTime += 0.3f; // plus startupTime
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            //waitTime
            {
                float column = piece.column;
                
                if(piece.column > theSuper.column){ // on the right
                    
                    waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                    waitTime += firstPartDuration;
                    
                }else{ // on the left
                    
                    waitTime = (superColumn - column) * timeBetweenColumns;
                    
                }
                
                waitTime += 0.3f; // plus startupTime
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            duration = waitTime;
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    int kind = theSuper.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [theSuper runAction:_chip_hero_Hor_Animations[0]];
            break;
        case COOKIE_BLUE:
            [theSuper runAction:_mikey_hero_Hor_Animations[0]];
            break;
        case COOKIE_ORANGE:
            [theSuper runAction:_reginald_hero_Hor_Animations[0]];
            break;
        case COOKIE_YELLOW:
            [theSuper runAction:_luke_hero_Hor_Animations[0]];
            break;
        case COOKIE_GREEN:
            [theSuper runAction:_dustin_hero_Hor_Animations[0]];
            break;
        case COOKIE_PURPLE:
            [theSuper runAction:_gerry_hero_Hor_Animations[0]];
            break;
        case COOKIE_RED:
            [theSuper runAction:_jj_hero_Hor_Animations[0]];
            break;
            
        default:
            break;
    }
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:rightOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration]
                                                      ]];
    if(!didHitPretzel)
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration], [SKAction runBlock:^{
        
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
        
            }
            
            waitTime += 0.3f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        
        }];
        
    }else{
        
    }
    
}

-(void)Default_Vert:(CDGameBoardSpriteNode*)theSuper{
    
    if(!_isPlayingMilkwaveSound){
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_milky_wave_distorted" FileType:@"caf" volume:1 completion:^{
            self.isPlayingMilkwaveSound = NO;
        }];
        
    }
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = theSuper.position.x;
    downOffScreen.x = theSuper.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = theSuper.row;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.row;
    
    for (int i=0; i<rows; i++) {
        
        int index = superIndex + i;
        if(index >= rows)
            index -= rows;
        
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + theSuper.column];
        
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > theSuper.row){ // on top
                    
                    waitTime = (row - superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                    
                }
                
                waitTime += 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        float row = piece.row;
                        
                        if(piece.row > theSuper.row){ // on top
                            
                            waitTime = (row - superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                            
                        }
                        
                        waitTime += 0.3f;
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            float row = piece.row;
                            
                            if(piece.row > theSuper.row){ // on top
                                
                                waitTime = (row - superRow) * timeBetweenRows;
                                
                            }else{ // below
                                
                                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                                waitTime += firstPartDuration;
                                
                            }
                            
                            waitTime += 0.3f;
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > theSuper.row){ // on top
                    
                    waitTime = (row - superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                    
                }
                
                waitTime += 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > theSuper.row){ // on top
                    
                    waitTime = (row - superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                    
                }
                
                waitTime += 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > theSuper.row){ // on top
                    
                    waitTime = (row - superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                    
                }
                
                waitTime += 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    
    [theSuper removeAllActions];
    
    int kind = theSuper.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [theSuper runAction:_chip_hero_Vert_Animations[0]];
            break;
        case COOKIE_BLUE:
            [theSuper runAction:_mikey_hero_Vert_Animations[0]];
            break;
        case COOKIE_ORANGE:
            [theSuper runAction:_reginald_hero_Vert_Animations[0]];
            break;
        case COOKIE_YELLOW:
            [theSuper runAction:_luke_hero_Vert_Animations[0]];
            break;
        case COOKIE_GREEN:
            [theSuper runAction:_dustin_hero_Vert_Animations[0]];
            break;
        case COOKIE_PURPLE:
            [theSuper runAction:_gerry_hero_Vert_Animations[0]];
            break;
        case COOKIE_RED:
            [theSuper runAction:_jj_hero_Vert_Animations[0]];
            break;
            
        default:
            break;
    }
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:downOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superdelete = [SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    /*
     float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
     float superColumn = theSuper.column;
     
     // now for the rest
     for (CDGameBoardSpriteNode* piece in list) {
     
     piece.shouldMilkSplash = NO;
     
     if(piece != theSuper){
     
     float column = piece.column;
     float waitTime = 0.5f;
     
     if(piece.column > theSuper.column){ // on the right
     
     waitTime = (column-superColumn) * timeBetweenColumns;
     
     }else{ // on the left
     
     waitTime = secondPartDuration - ((superColumn * timeBetweenColumns) - (column * timeBetweenColumns));
     waitTime += firstPartDuration;
     }
     
     if(waitTime > 0.24f)
     waitTime -= 0.24f;

     */
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > theSuper.row){ // on top
                    
                    waitTime = (row - superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                    
                }
                
                waitTime += 0.3f;
            }
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    float width = [SGGameManager gameManager].columnWidth * 1.1f;
    float height = width;
    
    //if([_deviceModel isEqualToString:@"@2x"])
        height = (width/144.0f) * 177.0f;
    
    theSuper.size = CGSizeMake(width, height);
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superdelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }

        }];
        
    }else{
        
    }

}

#pragma mark - Chef methods

-(void)Chef_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                        waitTime += firstPartDuration;
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                        
                    }
                    
                    waitTime += 0.3f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                            
                        }
                        
                        waitTime += 0.3f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    int kind = theSuper.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [theSuper runAction:_chip_hero_Hor_Animations[0]];
            break;
        case COOKIE_BLUE:
            [theSuper runAction:_mikey_hero_Hor_Animations[0]];
            break;
        case COOKIE_ORANGE:
            [theSuper runAction:_reginald_hero_Hor_Animations[0]];
            break;
        case COOKIE_YELLOW:
            [theSuper runAction:_luke_hero_Hor_Animations[0]];
            break;
        case COOKIE_GREEN:
            [theSuper runAction:_dustin_hero_Hor_Animations[0]];
            break;
        case COOKIE_PURPLE:
            [theSuper runAction:_gerry_hero_Hor_Animations[0]];
            break;
        case COOKIE_RED:
            [theSuper runAction:_jj_hero_Hor_Animations[0]];
            break;
            
        default:
            break;
    }
    
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:rightOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                      [SKAction runBlock:^{
        
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            waitTime += 0.3f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Chef_Vert:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    float secondPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    
    upOffScreen.x = theSuper.position.x;
    downOffScreen.x = theSuper.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = theSuper.row;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow - i;
        if(index < 0)
            index += rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + theSuper.column];
        
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > theSuper.row){ // on top
                
                waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                waitTime += firstPartDuration;
                
            }else{ // below
                
                waitTime = (superRow - row) * timeBetweenRows;
                
            }
            
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > theSuper.row){ // on top
                        
                        waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                        waitTime += firstPartDuration;
                        
                    }else{ // below
                        
                        waitTime = (superRow - row) * timeBetweenRows;
                        
                    }
                    
                    waitTime += 0.3f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > theSuper.row){ // on top
                            
                            waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                            waitTime += firstPartDuration;
                            
                        }else{ // below
                            
                            waitTime = (superRow - row) * timeBetweenRows;
                            
                        }
                        
                        waitTime += 0.3f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > theSuper.row){ // on top
                
                waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                waitTime += firstPartDuration;
                
            }else{ // below
                
                waitTime = (superRow - row) * timeBetweenRows;
                
            }
            
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > theSuper.row){ // on top
                
                waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                waitTime += firstPartDuration;
                
            }else{ // below
                
                waitTime = (superRow - row) * timeBetweenRows;
                
            }
            
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > theSuper.row){ // on top
                
                waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                waitTime += firstPartDuration;
                
            }else{ // below
                
                waitTime = (superRow - row) * timeBetweenRows;
                
            }
            
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            duration = waitTime;
            
            didHitPretzel = YES;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    
    [theSuper removeAllActions];
    
    int kind = theSuper.typeID;
    
    switch (kind) {
        case COOKIE_CHIP:
            [theSuper runAction:_chip_hero_Vert_Animations[0]];
            break;
        case COOKIE_BLUE:
            [theSuper runAction:_mikey_hero_Vert_Animations[0]];
            break;
        case COOKIE_ORANGE:
            [theSuper runAction:_reginald_hero_Vert_Animations[0]];
            break;
        case COOKIE_YELLOW:
            [theSuper runAction:_luke_hero_Vert_Animations[0]];
            break;
        case COOKIE_GREEN:
            [theSuper runAction:_dustin_hero_Vert_Animations[0]];
            break;
        case COOKIE_PURPLE:
            [theSuper runAction:_gerry_hero_Vert_Animations[0]];
            break;
        case COOKIE_RED:
            [theSuper runAction:_jj_hero_Vert_Animations[0]];
            break;
            
        default:
            break;
    }
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:downOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:upOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration]]];
    
    if(!didHitPretzel)
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                      [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    
    
    /*
     float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
     float superColumn = theSuper.column;
     
     // now for the rest
     for (CDGameBoardSpriteNode* piece in list) {
     
     piece.shouldMilkSplash = NO;
     
     if(piece != theSuper){
     
     float column = piece.column;
     float waitTime = 0.5f;
     
     if(piece.column > theSuper.column){ // on the right
     
     waitTime = (column-superColumn) * timeBetweenColumns;
     
     }else{ // on the left
     
     waitTime = secondPartDuration - ((superColumn * timeBetweenColumns) - (column * timeBetweenColumns));
     waitTime += firstPartDuration;
     }
     
     if(waitTime > 0.24f)
     waitTime -= 0.24f;
     
     */
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > theSuper.row){ // on top
                
                waitTime = secondPartDuration - ((row - superRow) * timeBetweenRows);
                waitTime += firstPartDuration;
                
            }else{ // below
                
                waitTime = (superRow - row) * timeBetweenRows;
                
            }
            
            waitTime += 0.3f;
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Chef_Gerry_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.5f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float leftPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float rightPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    // handle hero and blades
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    float leftDuration = duration;
    float rightDuration = duration;
    
    
    // left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.6f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.6f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;

            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            leftDuration = waitTime - timeBetweenColumns;
            
            break;
            
        }
    }
    
    // right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.6f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.6f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
                
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            rightDuration = waitTime - timeBetweenColumns;
            
            break;
        }
    }
    
    // handle hero and blades
    {
        CGSize energySize = CGSizeMake(superCookie.size.width * 0.75f, superCookie.size.height * 0.75f);
        
        SKSpriteNode* leftBlade = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:energySize];
        leftBlade.position = CGPointMake(superCookie.position.x - (superCookie.size.width*0.5f), superCookie.position.y);
        leftBlade.zPosition = superCookie.zPosition;
        
        leftBlade.anchorPoint = CGPointMake(0.5f, 0.5f);
        
        leftBlade.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:leftBlade];
        [leftBlade runAction:[SKAction scaleXTo:-1.0f duration:0.001f]];
        [leftBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:0.6f],
                                                  [SKAction fadeInWithDuration:0.0f],
                                                  [SKAction moveTo:leftOffScreen duration:leftPartDuration]]]];
        
        [leftBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:leftDuration],
                                                  [SKAction removeFromParent]]]];
        
        
        SKSpriteNode* rightBlade = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:energySize];
        rightBlade.position = CGPointMake(superCookie.position.x + (superCookie.size.width*0.5f), superCookie.position.y);
        rightBlade.zPosition = superCookie.zPosition;
        rightBlade.anchorPoint = CGPointMake(0.5f, 0.5f);
        rightBlade.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:rightBlade];
        
        [rightBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:0.6f],
                                                   [SKAction fadeInWithDuration:0.0f],
                                                   [SKAction moveTo:rightOffScreen duration:rightPartDuration]
                                                   ]]];
        
        [rightBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:rightDuration],
                                                   [SKAction removeFromParent]]]];
        
        
        if(leftDuration > rightDuration){
            duration = leftDuration;
        }else if(rightDuration > leftDuration){
            duration = rightDuration;
        }else{
            duration += 0.6f;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_gerry_hero_Hor_Animations[0]];
        [superCookie runAction:[SKAction scaleXTo:1.2639f y:1.0f duration:0.0f]];
        
        [leftBlade runAction:_gerry_hero_Hor_Animations[1]];
        [rightBlade runAction:_gerry_hero_Hor_Animations[1]];
        
    }
    
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.6f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Chef_Gerry_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.35f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    // handle hero and blades
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    float upDuration = duration;
    float downDuration = duration;
    
    // up
    for (int i=0; i<rows-superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow+i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        // plus animation time
                        waitTime += 0.42f;
                        
                    }else{ // below
                        
                        waitTime = ((superRow - row) * timeBetweenRows);
                        // plus animation time
                        waitTime += 0.66f;
                    }

                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            // plus animation time
                            waitTime += 0.42f;
                            
                        }else{ // below
                            
                            waitTime = ((superRow - row) * timeBetweenRows);
                            // plus animation time
                            waitTime += 0.66f;
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            upDuration = waitTime;
            
            break;
        }
    }
    
    // down
    for (int i=0; i<=superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow-i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        // plus animation time
                        waitTime += 0.42f;
                        
                    }else{ // below
                        
                        waitTime = ((superRow - row) * timeBetweenRows);
                        // plus animation time
                        waitTime += 0.66f;
                    }
                    
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            // plus animation time
                            waitTime += 0.42f;
                            
                        }else{ // below
                            
                            waitTime = ((superRow - row) * timeBetweenRows);
                            // plus animation time
                            waitTime += 0.66f;
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            downDuration = waitTime;
            
            break;
        }
    }
    
    // handle hero and blades
    {
        CGSize energySize = CGSizeMake(superCookie.size.width * 0.75f, superCookie.size.height * 0.75f);
        
        SKSpriteNode* upBlade = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:energySize];
        upBlade.position = CGPointMake(superCookie.position.x, superCookie.position.y + (superCookie.size.height*0.5f));
        upBlade.zPosition = superCookie.zPosition;
        
        upBlade.anchorPoint = CGPointMake(0.8f, 0.5f);
        
        upBlade.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:upBlade];
        [upBlade runAction:[SKAction scaleXTo:-1.0f duration:0.001f]];
        [upBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:0.42f],
                                                [SKAction fadeInWithDuration:0.0f],
                                                [SKAction moveTo:upOffScreen duration:firstPartDuration]]]];
        [upBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:upDuration],
                                                [SKAction removeFromParent]]]];
        
        
        SKSpriteNode* downBlade = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:energySize];
        downBlade.position = CGPointMake(superCookie.position.x, superCookie.position.y - (superCookie.size.height*0.5f));
        downBlade.zPosition = superCookie.zPosition;
        downBlade.anchorPoint = CGPointMake(0.8f, 0.5f);
        downBlade.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:downBlade];
        
        [downBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:0.66f],
                                                  [SKAction fadeInWithDuration:0.0f],
                                                  [SKAction moveTo:downOffScreen duration:secondPartDuration]]]];
        [downBlade runAction:[SKAction sequence:@[[SKAction waitForDuration:downDuration],
                                                  [SKAction removeFromParent]]]];
        
        if(upDuration > downDuration){
            duration = upDuration;
        }else{
            duration = downDuration;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.66f + duration],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_gerry_hero_Vert_Animations[0]];
        
        [upBlade runAction:_gerry_hero_Vert_Animations[1]];
        [downBlade runAction:_gerry_hero_Vert_Animations[1]];
        
    }
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                // plus animation time
                waitTime += 0.42f;
                
            }else{ // below
                
                waitTime = ((superRow - row) * timeBetweenRows);
                // plus animation time
                waitTime += 0.66f;
            }

            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
    
}


- (void)Chef_JJ_Hor:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.5f;
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and icing
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<columns; i++) {
        
        float index = superColumn - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                        waitTime += firstPartDuration;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.42f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.42f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            duration = waitTime;
            
            didHitPretzel = YES;
            break;
            
        }
    }
    
    // handle hero and icing
    {
        
        SKSpriteNode* shield = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        shield.position = CGPointMake(superCookie.position.x - (superCookie.size.width * 0.5f),superCookie.position.y);
        shield.zPosition = superCookie.zPosition;
        shield.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:shield];
        
        SKAction* shieldMovement = [SKAction sequence:@[[SKAction waitForDuration:0.42f],
                                                        [SKAction fadeInWithDuration:0.0f],
                                                        [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                                        [SKAction moveTo:rightOffScreen duration:0],
                                                        [SKAction moveTo:destination duration:secondPartDuration],
                                                        ]];
        
        if(didHitPretzel)
            duration -= timeBetweenColumns;
        else
        {
            duration = 0.42f + firstPartDuration + secondPartDuration;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        SKAction* shieldDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                        [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction runBlock:^{
            
            superCookie.alpha = 0.0f;
            
        }],[SKAction removeFromParent]]];
        
        
        [shield runAction:_jj_hero_Hor_Animations[1]];
        /*
         [shield runAction:[SKAction waitForDuration:duration-0.02f] completion:^{
         
         [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Shield Reverse" FileType:@"m4a" volume:1.0f];
         
         }];
         */
        
        [shield runAction:shieldMovement];
        [shield runAction:shieldDelete];
        
        [superCookie runAction:_jj_hero_Hor_Animations[0]];
        
    }

    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.42f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                //    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Chef_JJ_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 1.5f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and icing
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.36f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.36f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.36f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }

    }
    
    
    // handle hero and icing
    {
        SKSpriteNode* shield = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        shield.position = CGPointMake(superCookie.position.x,superCookie.position.y + (superCookie.size.height * 0.5f));
        shield.zPosition = superCookie.zPosition;
        shield.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:shield];
        
        SKAction* shieldMovement = [SKAction sequence:@[[SKAction waitForDuration:0.36f],
                                                        [SKAction fadeInWithDuration:0.0f],
                                                        [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                        [SKAction moveTo:downOffScreen duration:0],
                                                        [SKAction moveTo:destination duration:secondPartDuration]]];
        
        if(didHitPretzel)
            duration -= timeBetweenRows;
        else
            duration = 0.36f + firstPartDuration + secondPartDuration;
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        SKAction* shieldDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                        [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction runBlock:^{
            
            superCookie.alpha = 0.0f;
            
        }],[SKAction removeFromParent]]];
        
        
        [shield runAction:_jj_hero_Vert_Animations[1]];
        
        /*
         [shield runAction:[SKAction waitForDuration:duration] completion:^{
         
         [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Shield Reverse" FileType:@"m4a" volume:1.0f];
         
         }];
         */
        
        [shield runAction:shieldMovement];
        [shield runAction:shieldDelete];
        
        [superCookie runAction:_jj_hero_Vert_Animations[0]];
        
    }

    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.36f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

#pragma mark - Super Hero methods

- (void)SuperHero_Chip_Hor:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.5f;
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<columns; i++) {
        
        float index = superColumn - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + index];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                        waitTime += firstPartDuration;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.48f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.48f;

                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    // handle hero and shield
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_rockthrow" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.4f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Shield Reverse" FileType:@"caf" volume:1.0f numberOfLoopes:0 delay:0.4f completion:nil];
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit"
                                                          FileType:@"caf"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:secondPartDuration + firstPartDuration + 0.38f
                                                        completion:nil];
        
        SKSpriteNode* shield = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        shield.position = superCookie.position;
        shield.zPosition = superCookie.zPosition;
        
        [[SGGameManager gameManager].gameBoard addChild:shield];
        
        SKAction* shieldMovement = [SKAction sequence:@[[SKAction waitForDuration:0.48f],
                                                        [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                                        [SKAction moveTo:rightOffScreen duration:0],
                                                        [SKAction moveTo:destination duration:secondPartDuration]]];
        
        if(didHitPretzel)
            duration -= timeBetweenColumns;
        else
            duration = 0.48f + firstPartDuration + secondPartDuration;
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];

        SKAction* shieldDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                        [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction runBlock:^{
            
            superCookie.alpha = 0.0f;
            
        }],[SKAction removeFromParent]]];

        
        [shield runAction:_chip_hero_Hor_Animations[1] completion:^{
            
            [shield runAction:[SKAction repeatActionForever:_chip_hero_Hor_Animations[2]]];
            
        }];
        
        [shield runAction:shieldMovement];
        [shield runAction:shieldDelete];
        
        [superCookie runAction:_chip_hero_Hor_Animations[0]];
        
    }

    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
               
                
            }else{ // on the left
                
                 waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
            //    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
        
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Chip_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 1.5f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.54f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.54f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_rockthrow" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.4f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Shield Reverse" FileType:@"caf" volume:1.0f numberOfLoopes:0 delay:0.4f completion:nil];
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit"
                                                          FileType:@"caf"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:secondPartDuration + firstPartDuration + 0.50f
                                                        completion:nil];
        
        SKSpriteNode* shield = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        shield.position = superCookie.position;
        shield.zPosition = superCookie.zPosition;
        
        [[SGGameManager gameManager].gameBoard addChild:shield];
        
        SKAction* shieldMovement = [SKAction sequence:@[[SKAction waitForDuration:0.54f],
                                                        [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                        [SKAction moveTo:downOffScreen duration:0],
                                                        [SKAction moveTo:destination duration:secondPartDuration]]];
        
        if(didHitPretzel){
            duration -= timeBetweenRows;
        }else{
            duration = 0.54f + firstPartDuration + secondPartDuration;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        SKAction* shielddeletion= [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                        [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction runBlock:^{
            
            superCookie.alpha = 0.0f;
            
        }],[SKAction removeFromParent]]];
        
        
        [shield runAction:_chip_hero_Vert_Animations[1] completion:^{
            
            [shield runAction:[SKAction repeatActionForever:_chip_hero_Vert_Animations[2]]];
            
        }];
        
        /*
         [shield runAction:[SKAction waitForDuration:duration] completion:^{
         
         [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Shield Reverse" FileType:@"m4a" volume:1.0f];
         
         }];
         */
        
        [shield runAction:shieldMovement];
        [shield runAction:shielddeletion];
        
        [superCookie runAction:_chip_hero_Vert_Animations[0]];
        
    }

    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
           
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_JJ_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.5f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float leftPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float rightPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    // handle hero and energyblasts
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions]; // dunkop-jj-super-fireball
        superCookie.zPosition++;
        
    }
    
    duration += 1.14f;
    
    float leftDuration = duration;
    float rightDuration = duration;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    //left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 1.14f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 1.14f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            leftDuration = waitTime;
            
            break;
        }
    }
    
    //right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 1.14f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 1.14f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            rightDuration = waitTime;
            
            break;
        }
    }
    
    // handle hero and energyblasts
    {
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_jj_powerup_shot" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.0f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_jj_h" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.9f completion:nil];
        
        SKTexture* energyBall = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-jj-super-fireball%@",_deviceModel]];
        float energyHeight = [SGGameManager gameManager].RowHeight;
        CGSize energySize = CGSizeMake((energyHeight/energyBall.size.height) * energyBall.size.width, energyHeight);
        
        SKSpriteNode* leftsideEnergy = [SKSpriteNode spriteNodeWithTexture:energyBall size:energySize];
        leftsideEnergy.position = CGPointMake(superCookie.position.x - (superCookie.size.width*0.5f), superCookie.position.y);
        leftsideEnergy.zPosition = superCookie.zPosition;
        
        leftsideEnergy.anchorPoint = CGPointMake(0.9f, 0.5f);
        
        leftsideEnergy.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:leftsideEnergy];
        [leftsideEnergy runAction:[SKAction scaleXTo:-1.0f duration:0.001f]];
        [leftsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:1.14f],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       [SKAction moveTo:leftOffScreen duration:leftPartDuration],
                                                       [SKAction removeFromParent]]]];
        
        [leftsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:leftDuration],
                                                       [SKAction removeFromParent]]]];
        
        SKSpriteNode* rightsideEnergy = [SKSpriteNode spriteNodeWithTexture:energyBall size:energySize];
        rightsideEnergy.position = CGPointMake(superCookie.position.x + (superCookie.size.width*0.5f), superCookie.position.y);
        rightsideEnergy.zPosition = superCookie.zPosition;
        rightsideEnergy.anchorPoint = CGPointMake(0.9f, 0.5f);
        rightsideEnergy.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:rightsideEnergy];
        
        [rightsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:1.14f],
                                                        [SKAction fadeInWithDuration:0.0f],
                                                        [SKAction moveTo:rightOffScreen duration:rightPartDuration]]]];

        [rightsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:rightDuration],
                                                        [SKAction removeFromParent]]]];

        
        if(leftDuration > rightDuration){
            duration = leftDuration;
        }else if(rightDuration > leftDuration){
            duration = rightDuration;
        }

        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_jj_hero_Hor_Animations[0]];
        
    }

    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 1.14f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }

        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_JJ_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.35f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.54f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.54f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_jj_powerup" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.0f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_dustin_v" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.53f completion:nil];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.54f],
                                                    [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                    [SKAction moveTo:downOffScreen duration:0],
                                                    [SKAction moveTo:destination duration:secondPartDuration]]]];
        
        if(didHitPretzel){
            
            duration -= timeBetweenRows;
            
        }else{
            
            duration = 0.54f + firstPartDuration + secondPartDuration;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];

        
        [superCookie runAction:_jj_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
        
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }

        
        }];
        
    }else{
        
    }

    
}


- (void)SuperHero_Dustin_Hor:(CDCookieSpriteNode*)superCookie{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_dustin_h_1" FileType:@"m4a" volume:0.4f numberOfLoopes:0 delay:0.3f completion:nil];
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_dustin_h_2" FileType:@"m4a" volume:0.4f numberOfLoopes:0 delay:1.0f completion:nil];
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.68f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    float laserLength = the_scene.size.width;
    float laser_duration = 0.54f;
    float leftLaser_duration = laser_duration;
    float rightLaser_duration = laser_duration;
    float superColumn = superCookie.column;
    
    // handle hero and laser
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    //left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.42f
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:(superCookie.position.x-laserLength)
                                                           OldMax:superCookie.position.x
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime = laser_duration - waitTime;
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        // on the left 0.42f
                        waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                   OldMin:(superCookie.position.x-laserLength)
                                                                   OldMax:superCookie.position.x
                                                                   NewMin:0.0f NewMax:laser_duration];
                        waitTime = laser_duration - waitTime;
                        waitTime += 0.42f;
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            // on the left 0.42f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:(superCookie.position.x-laserLength)
                                                                       OldMax:superCookie.position.x
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += 0.42f;
                            
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.42f
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:(superCookie.position.x-laserLength)
                                                           OldMax:superCookie.position.x
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime = laser_duration - waitTime;
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                 // on the left 0.42f
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:(superCookie.position.x-laserLength)
                                                           OldMax:superCookie.position.x
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime = laser_duration - waitTime;
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.42f
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:(superCookie.position.x-laserLength)
                                                           OldMax:superCookie.position.x
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime = laser_duration - waitTime;
                
                leftLaser_duration = waitTime;
                
                waitTime += 0.42f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    //right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:superCookie.position.x
                                                           OldMax:(superCookie.position.x+laserLength)
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime += 1.14f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        
                        waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                   OldMin:superCookie.position.x
                                                                   OldMax:(superCookie.position.x+laserLength)
                                                                   NewMin:0.0f NewMax:laser_duration];
                        waitTime += 1.14f;
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                        
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:superCookie.position.x
                                                                       OldMax:(superCookie.position.x+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += 1.14f;
                            
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:superCookie.position.x
                                                           OldMax:(superCookie.position.x+laserLength)
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime += 1.14f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:superCookie.position.x
                                                           OldMax:(superCookie.position.x+laserLength)
                                                           NewMin:0.0f NewMax:laser_duration];
                waitTime += 1.14f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
             
                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                           OldMin:superCookie.position.x
                                                           OldMax:(superCookie.position.x+laserLength)
                                                           NewMin:0.0f NewMax:laser_duration];
                rightLaser_duration = waitTime;
                
                waitTime += 1.14f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    
    // handle hero and laser
    {
        
        /*
         dustin_hor_frames[0],
         dustin_hor_frames[1],
         dustin_hor_frames[2],
         dustin_hor_frames[3],
         dustin_hor_frames[4],
         dustin_hor_frames[5],
         dustin_hor_frames[6],
         
         dustin_hor_frames[7],
         dustin_hor_frames[7],
         dustin_hor_frames[7], 0.6
         dustin_hor_frames[7], 0.66
         dustin_hor_frames[7],
         dustin_hor_frames[7],
         dustin_hor_frames[7],
         dustin_hor_frames[7],
         dustin_hor_frames[7],// 9x
         
         
         dustin_hor_frames[8],
         dustin_hor_frames[9],
         dustin_hor_frames[10],
         
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11],
         dustin_hor_frames[11] // 9x
         
         */
        
        SKTexture* laser = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-dustin-laser%@",_deviceModel]];
        float laserHeight = [SGGameManager gameManager].RowHeight * 0.25;
        
        SKSpriteNode* leftsideLaser = [SKSpriteNode spriteNodeWithTexture:laser size:CGSizeMake(laserLength, laserHeight)];
        
        float leftXPos = superCookie.position.x - (superCookie.size.width * 0.5f) + (0.4167f * superCookie.size.width);
        float leftYPos = superCookie.position.y + (superCookie.size.height * 0.5f) - (0.3194f * superCookie.size.height);
        
        leftsideLaser.position = CGPointMake(leftXPos, leftYPos);
        leftsideLaser.zPosition = superCookie.zPosition + 1;
        leftsideLaser.anchorPoint = CGPointMake(1.0f, 0.5f);
        
        leftsideLaser.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:leftsideLaser];
        [leftsideLaser runAction:[SKAction scaleXTo:0 duration:0.001f]];
        [leftsideLaser runAction:[SKAction sequence:@[[SKAction waitForDuration:0.42f],
                                                      [SKAction fadeInWithDuration:0.0f],
                                                      
                                                      [SKAction group:@[[SKAction scaleXTo:1 duration:laser_duration],
                                                                        [SKAction sequence:@[[SKAction waitForDuration:leftLaser_duration],
                                                                                             [SKAction removeFromParent]
                                                                                             ]]
                                                                        ]]
                                                      ]]];
        
        SKSpriteNode* rightsideLaser = [SKSpriteNode spriteNodeWithTexture:laser size:CGSizeMake(laserLength, laserHeight)];
        
        float rightXPos = superCookie.position.x - (superCookie.size.width * 0.5f) + (0.5833f * superCookie.size.width);
        float rightYPos = superCookie.position.y + (superCookie.size.height * 0.5f) - (0.3194f * superCookie.size.height);
        
        rightsideLaser.position = CGPointMake(rightXPos, rightYPos);
        rightsideLaser.zPosition = superCookie.zPosition + 1;
        rightsideLaser.anchorPoint = CGPointMake(0.0f, 0.5f);
        
        rightsideLaser.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:rightsideLaser];
        [rightsideLaser runAction:[SKAction scaleXTo:0 duration:0.001f]];
        [rightsideLaser runAction:[SKAction sequence:@[[SKAction waitForDuration:1.14f],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       
                                                       [SKAction group:@[[SKAction scaleXTo:1 duration:laser_duration],
                                                                         [SKAction sequence:@[[SKAction waitForDuration:rightLaser_duration],
                                                                                              [SKAction removeFromParent]
                                                                                              ]]
                                                                         ]]
                                                       ]]];
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
            
           
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_dustin_hero_Hor_Animations[0]];
        
    }
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 1.14f;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.42f;
                }
                
                if(waitTime > 0.3f)
                    waitTime -= 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.25f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Dustin_Vert:(CDCookieSpriteNode*)superCookie{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_dustin_v" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.2f completion:nil];
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 1.5f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                }
                
                // plus animation time
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        float row = piece.row;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.42f;
                        
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            float row = piece.row;
                            
                            if(piece.row > superCookie.row){ // on top
                                
                                waitTime = (row-superRow) * timeBetweenRows;
                                
                            }else{ // below
                                
                                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                                waitTime += firstPartDuration;
                            }
                            
                            // plus animation time
                            waitTime += 0.42f;
                            
                        }

                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                }
                
                // plus animation time
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                }
                
                // plus animation time
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                    waitTime += firstPartDuration;
                }
                
                // plus animation time
                waitTime += 0.42f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    // handle hero
    {
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.42f],
                                                    [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                    [SKAction moveTo:downOffScreen duration:0],
                                                    [SKAction moveTo:destination duration:secondPartDuration]]]];
        
        
        if(didHitPretzel){
            duration -= timeBetweenRows;
        }else
        {
            duration = 0.42f + firstPartDuration + secondPartDuration;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_dustin_hero_Vert_Animations[0]];
        
    }

    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.42f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
    
}

- (void)SuperHero_Gerry_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.5f;
    float loopDuration = 0.75f;
    
    float columns = [SGGameManager gameManager].numColumns;
    float superColumn = superCookie.column;
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_gerry_h" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.55f completion:nil];
    
    // handle hero
    {
        
        superCookie.isVulnerable = NO;
        superCookie.zPosition++;
        [superCookie removeAllActions];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.84f],[SKAction runBlock:^{
            
           // [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_gerry_hero_Hor_Animations[0]];
        
    
        float screenWidth = the_scene.size.width;
        float onionSize = superCookie.size.width;
        
        SKAction* blinkingMovement = [SKAction repeatActionForever:[SKAction sequence:@[
                                                                                        [SKAction fadeAlphaTo:0.75f duration:0],
                                                                                        [SKAction waitForDuration:0.1f],
                                                                                        [SKAction fadeAlphaTo:0.0f duration:0],
                                                                                        [SKAction moveByX:onionSize*0.08f y:0.0f duration:0]
                                                                                        ]]];
        
        float leftScreenBorder = [[SGGameManager gameManager].gameBoard convertPoint:CGPointMake(0, 0) fromNode:the_scene].x;
        float rightScreenBorder = [[SGGameManager gameManager].gameBoard convertPoint:CGPointMake(screenWidth, 0) fromNode:the_scene].x;
        
        int howManyOnions = (screenWidth*0.5f)/onionSize;
        
        for (int i=0; i<howManyOnions; i++) {
            
            SKSpriteNode* onion = [SKSpriteNode spriteNodeWithColor:[SKColor whiteColor] size:superCookie.size];
            onion.alpha = 0.0f;
            
            CGPoint onioPos = CGPointMake([BLINDED_Math Value_from_another_Scope:i
                                                                          OldMin:0
                                                                          OldMax:howManyOnions
                                                                          NewMin:leftScreenBorder
                                                                          NewMax:rightScreenBorder], superCookie.position.y);
            
            onion.position = onioPos;
            onion.zPosition = superCookie.zPosition+1;
            
            [onion runAction:[SKAction sequence:@[[SKAction waitForDuration:0.84f],blinkingMovement]]];
            [onion runAction:[SKAction sequence:@[[SKAction waitForDuration:0.84f+duration]]] completion:^{
            
                [onion removeAllActions];
                [onion removeFromParent];
            
            }];
            [onion runAction:_gerry_hero_Hor_Animations[(arc4random() % 3) + 2]];
            
            [[SGGameManager gameManager].gameBoard addChild:onion];
        }
        
        float blurWidth = 338.0f * (superCookie.size.height/144.0f);
        rightScreenBorder += blurWidth;
        leftScreenBorder -= blurWidth;
        
        SKSpriteNode* purpleBlur = [SKSpriteNode spriteNodeWithColor:[SKColor whiteColor] size:CGSizeMake(blurWidth, superCookie.size.height)];
        purpleBlur.alpha = 0;
        purpleBlur.position = superCookie.position;
        purpleBlur.zPosition = superCookie.zPosition;
        
        [purpleBlur runAction:[SKAction sequence:@[[SKAction waitForDuration:0.84f],
                                                   _gerry_hero_Hor_Animations[1],
                                                   [SKAction fadeInWithDuration:0],
                                                   [SKAction moveToX:rightScreenBorder
                                                            duration:((rightScreenBorder - superCookie.position.x)/(rightScreenBorder - leftScreenBorder)) * loopDuration],
                                                   [SKAction moveToX:leftScreenBorder duration:0],
                                                   [SKAction repeatActionForever:[SKAction sequence:@[
                                                                                                      [SKAction moveToX:rightScreenBorder duration:loopDuration],
                                                                                                      [SKAction moveToX:leftScreenBorder duration:0]
                                                                                                      ]]]
                                                   ]]];
        
        [[SGGameManager gameManager].gameBoard addChild:purpleBlur];
        
        [purpleBlur runAction:[SKAction waitForDuration:0.84f + duration] completion:^{
        
            [purpleBlur removeAllActions];
             [[SGGameManager gameManager] Put_a_milk_splash:purpleBlur.position Size:superCookie.size];
            [purpleBlur removeFromParent];
        
        }];
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    //left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        if(piece.isLocked){
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    [piece runAction:[SKAction waitForDuration:0.84f] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        [piece runAction:[SKAction waitForDuration:0.84f] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    //right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        if(piece.isLocked){
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    [piece runAction:[SKAction waitForDuration:0.84f] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        [piece runAction:[SKAction waitForDuration:0.84f] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.84f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.84f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+1.0f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Gerry_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 1.25f;
    float rows = [SGGameManager gameManager].numRows;
    
    float tornadoHeight = the_scene.size.height;
    CGPoint tornadoPos = [[SGGameManager gameManager].gameBoard convertPoint:CGPointMake(0, tornadoHeight*0.5f) fromNode:the_scene];
    tornadoPos.x = superCookie.position.x;
    
    
    float timeBetweenRows = 0.06f;
    float superRow = superCookie.row;
    
    // handle hero
    {
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_gerry_v" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.6f completion:nil];
        
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
        // tornado wait 0.9f
        
        SKSpriteNode* tornado = [SKSpriteNode spriteNodeWithImageNamed:[NSString stringWithFormat:@"dunkop-gerry-tornado%@", _deviceModel]];
        tornado.size = CGSizeMake([SGGameManager gameManager].columnWidth, tornadoHeight);
        tornado.zPosition = superCookie.zPosition-1;
        tornado.position = tornadoPos;
        tornado.alpha = 0;
        
        SKSpriteNode* bottomTornado = [tornado copy];
        bottomTornado.size = tornado.size;
        bottomTornado.zPosition = superCookie.zPosition-1;
        bottomTornado.position = CGPointMake(tornadoPos.x, tornadoPos.y - tornadoHeight);
        bottomTornado.alpha = 0;
        
        SKAction* twist = [SKAction repeatActionForever:[SKAction sequence:@[
                                                                              [SKAction scaleXTo:-1.0f duration:0],
                                                                              [SKAction waitForDuration:0.075f],
                                                                              [SKAction scaleXTo:1.0f duration:0],
                                                                              [SKAction waitForDuration:0.075f]
                                                                              ]]];
        
        SKAction* movement = [SKAction moveByX:0.0f y:tornadoHeight duration:duration+ 1.5f];
        
        SKAction* fade = [SKAction sequence:@[
                                              [SKAction waitForDuration:0.9f],
                                              [SKAction fadeAlphaTo:0.75f duration:0.25f],
                                              [SKAction waitForDuration: duration],
                                              [SKAction fadeAlphaTo:0.0f duration:0.25f],
                                              [SKAction removeFromParent]
                                              ]];
        
        
        [tornado runAction:twist];
        [tornado runAction:movement];
        [tornado runAction:fade];
        
        [bottomTornado runAction:twist];
        [bottomTornado runAction:movement];
        [bottomTornado runAction:fade];
        
        [[SGGameManager gameManager].gameBoard addChild:tornado];
        [[SGGameManager gameManager].gameBoard addChild:bottomTornado];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration + 0.9f],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_gerry_hero_Vert_Animations[0] completion:^{
        
            [superCookie runAction:_gerry_hero_Vert_Animations[1]];
        
        }];
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    // up
    for (int i=0; i<rows-superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow+i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        float row = piece.row;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = (superRow - row) * timeBetweenRows;
                        }
                        
                        // plus animation time
                        waitTime += 1.0f;
                        
                    }

                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            float row = piece.row;
                            
                            if(piece.row > superCookie.row){ // on top
                                
                                waitTime = (row-superRow) * timeBetweenRows;
                                
                            }else{ // below
                                
                                waitTime = (superRow - row) * timeBetweenRows;
                            }
                            
                            // plus animation time
                            waitTime += 1.0f;
                            
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    // down
    for (int i=0; i<=superRow; i++) {
        
    CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow-i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        float row = piece.row;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = (superRow - row) * timeBetweenRows;
                        }
                        
                        // plus animation time
                        waitTime += 1.0f;
                        
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            float row = piece.row;
                            
                            if(piece.row > superCookie.row){ // on top
                                
                                waitTime = (row-superRow) * timeBetweenRows;
                                
                            }else{ // below
                                
                                waitTime = (superRow - row) * timeBetweenRows;
                            }
                            
                            // plus animation time
                            waitTime += 1.0f;
                            
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                float row = piece.row;
                
                if(piece.row > superCookie.row){ // on top
                    
                    waitTime = (row-superRow) * timeBetweenRows;
                    
                }else{ // below
                    
                    waitTime = (superRow - row) * timeBetweenRows;
                }
                
                // plus animation time
                waitTime += 1.0f;
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = (superRow - row) * timeBetweenRows;
            }
            
            // plus animation time
            waitTime += 1.0f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+1.2f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
    
}

- (void)SuperHero_Reginald_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 2.0f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2.0f, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2.0f, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    BOOL didHitPretzel = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<columns; i++) {
        
        float index = superColumn + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + index];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.36f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.36f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.36f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_knife_short" FileType:@"m4a" volume:0.3f completion:^{
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_h" FileType:@"m4a" volume:0.1f numberOfLoopes:5];
    }];
    
    // handle hero
    {
        
        float height = [SGGameManager gameManager].cookieHeight * 1.2f;
        float width = (height/144.0f) * 188.0f;
        superCookie.size = CGSizeMake(width, height);
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.36f],
                                                    [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                    [SKAction moveTo:leftOffScreen duration:0],
                                                    [SKAction moveTo:destination duration:secondPartDuration]]]];
        
        if(didHitPretzel){
            duration -= timeBetweenColumns;
        }else{
            duration = 0.36f + firstPartDuration + secondPartDuration;
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_reginald_hero_Hor_Animations[0]];
        
    }
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.36f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Reginald_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    float rows = [SGGameManager gameManager].numRows;
    float superRow = superCookie.row;
    float time_for_each_victim = 0.2f;
    
    NSMutableArray* bottomVictims = [NSMutableArray new];
    NSMutableArray* topVictims = [NSMutableArray new];
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    
    // up
    for (int i=0; i<rows-superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow+i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [topVictims addObject:piece];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [topVictims addObject:piece];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                        
                        [topVictims addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM || piece.typeID == BLOCKER_COOKIEDOUGH){
            
            [topVictims addObject:piece];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            [topVictims addObject:piece];
            
            break;
        }

    }
    
    // down
    for (int i=0; i<=superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow-i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [bottomVictims addObject:piece];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [bottomVictims addObject:piece];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                        
                        [bottomVictims addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM || piece.typeID == BLOCKER_COOKIEDOUGH){
            
            [bottomVictims addObject:piece];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            [bottomVictims addObject:piece];
            
            break;
        }
    }
    
    
    // handle hero
    superCookie.isVulnerable = NO;
    [superCookie removeAllActions];
    superCookie.zPosition++;
    
    [superCookie runAction:_reginald_hero_Vert_Animations[0]];
    
    float width = [SGGameManager gameManager].cookieWidth * 1.2f;
    float height = (width/144.0f) * 188.0f;
    
    superCookie.size = CGSizeMake(width, height);
    
    SKEmitterNode* gunFlash = _reginald_hero_Particles[0];
    
    float firstAnimationDuration = 0.72f;
    
    // gun audio
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration
//                                                    completion:nil];
    
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 0.13f
//                                                    completion:nil];
// 
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 0.24f
//                                                    completion:nil];
//    
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 0.38f
//                                                    completion:nil];
//    
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 0.51f
//                                                    completion:nil];
//    
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 0.65f
//                                                    completion:nil];
//    
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 0.79f
//                                                    completion:nil];
//
//    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
//                                                      FileType:@"m4a"
//                                                        volume:1.0f
//                                                numberOfLoopes:0
//                                                         delay:firstAnimationDuration + 1.0f
//                                                    completion:nil];
    
    for (int i = 0; i < bottomVictims.count; i++) {
        
        
        
        CDGameBoardSpriteNode* piece = bottomVictims[(bottomVictims.count-1) - i];
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = (i+1) * time_for_each_victim;
            waitTime += firstAnimationDuration;
            
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
                                                              FileType:@"m4a"
                                                                volume:0.4f
                                                        numberOfLoopes:0
                                                                 delay:waitTime
                                                            completion:nil];
            
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
                                                              FileType:@"m4a"
                                                                volume:0.3f
                                                        numberOfLoopes:0
                                                                 delay:waitTime + (time_for_each_victim/2)
                                                            completion:nil];
            
            [superCookie runAction:[SKAction sequence:@[
                                                        [SKAction waitForDuration:waitTime],
                                                        _reginald_hero_Vert_Animations[1]
                                                        ]]];
            
            
            
            // gun flashing
            [superCookie runAction:[SKAction sequence:@[
                                    [SKAction waitForDuration:waitTime + 0.06f],
                                    
                                    [SKAction runBlock:^{
            
                 SKEmitterNode* rightgun = [gunFlash copy];
                 rightgun.zPosition = superCookie.zPosition;
                 
                 rightgun.position = CGPointMake((superCookie.position.x - (width*0.5f)) + (width * 0.6319f),
                                                 (superCookie.position.y - (height*0.5f)) + (height * 0.0319f));
                 
                 rightgun.numParticlesToEmit = 10;
                 rightgun.zRotation = [BLINDED_Math VectorToAngle_Radians:CGVectorMake(0.0f, -1.0f)];
                 rightgun.particleSize = CGSizeMake(width * 0.25f, width * 0.25f);
                 rightgun.particleSpeed = width * 5.0f;
                 
                 [[SGGameManager gameManager].gameBoard addChild:rightgun];
            
            
            }],
                                    [SKAction waitForDuration:0.06f],
                                    
                                    [SKAction runBlock:^{
                
                SKEmitterNode* leftgun = [gunFlash copy];
                leftgun.zPosition = superCookie.zPosition;
                
                leftgun.position = CGPointMake((superCookie.position.x - (width*0.5f)) + (width * 0.3611f),
                                                (superCookie.position.y - (height*0.5f)) + (height * 0.0319f));
                
                leftgun.numParticlesToEmit = 10;
                leftgun.zRotation = [BLINDED_Math VectorToAngle_Radians:CGVectorMake(0.0f, -1.0f)];
                leftgun.particleSize = CGSizeMake(width * 0.25f, width * 0.25f);
                leftgun.particleSpeed = width * 5.0f;
                
                [[SGGameManager gameManager].gameBoard addChild:leftgun];
                
                
            }]
                                    ]]];
            if(piece.isLocked){
                
                [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                    
                    [[SGGameManager gameManager] LockBreak:piece];
                    
                }];
                
            }else if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                
                [[SGGameManager gameManager].SuperCookies removeObject:piece];
                
                [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                    
                    [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                    
                }];
                
            }else if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                
                [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                
                [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                    
                    [[SGGameManager gameManager] SingleWrapper:(CDCookieSpriteNode*)piece];
                    
                }];
            
            }else if(piece.typeID == BLOCKER_ICECREAM){
                
                [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                    
                    [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                    
                }];
                
            }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
                
                [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                    
                    [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                    
                }];
                
            }else if(piece.typeID == BLOCKER_PRETZEL){
                
                [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                    
                    piece.shouldMilkSplash = YES;
                    [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                    
                }];
                
            }else{
            
                if(waitTime > 0.3f)
                    waitTime -= 0.3f;
                
                SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                            [SKAction runBlock:^{
                    
                    [self PlayDeleteAnimation:piece];
                    
                }],
                                                            [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                    
                    
                    // hurt plates
                    [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                    [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                    
                    
                }],[SKAction fadeAlphaTo:0 duration:0]]];
                
                [piece runAction:piecedeath];
                
            }
        }
    }

    [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration: firstAnimationDuration + ((bottomVictims.count + 1) * time_for_each_victim)],_reginald_hero_Vert_Animations[2]]]];
    
        for (int i = 0; i < topVictims.count; i++) {
            
            CDGameBoardSpriteNode* piece = topVictims[i];
            piece.shouldMilkSplash = NO;
            
            if(piece != superCookie){
                
                float waitTime = (bottomVictims.count+i+2) * time_for_each_victim;
                waitTime += 0.18f;
                waitTime += firstAnimationDuration;
                
                
                [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
                                                                  FileType:@"m4a"
                                                                    volume:0.4f
                                                            numberOfLoopes:0
                                                                     delay:waitTime
                                                                completion:nil];
                
                [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_reggie_pistol"
                                                                  FileType:@"m4a"
                                                                    volume:0.3f
                                                            numberOfLoopes:0
                                                                     delay:waitTime + (time_for_each_victim/2)
                                                                completion:nil];
                
                
                [superCookie runAction:[SKAction sequence:@[
                                                            [SKAction waitForDuration:waitTime],
                                                            _reginald_hero_Vert_Animations[3]
                                                            ]]];
                
                // gun flashing
                [superCookie runAction:[SKAction sequence:@[
                                                            [SKAction waitForDuration:waitTime + 0.06f],
                                                            
                                                            [SKAction runBlock:^{
                    
                    SKEmitterNode* leftgun = [gunFlash copy];
                    leftgun.zPosition = superCookie.zPosition;
                    
                    leftgun.position = CGPointMake((superCookie.position.x - (width*0.5f)) + (width * 0.3125f),
                                                   (superCookie.position.y - (height*0.5f)) + (height * 0.9628f));
                    
                    leftgun.numParticlesToEmit = 10;
                    leftgun.zRotation = [BLINDED_Math VectorToAngle_Radians:CGVectorMake(0.0f, 1.0f)];
                    leftgun.particleSize = CGSizeMake(width * 0.25f, width * 0.25f);
                    leftgun.particleSpeed = width * 5.0f;
                    
                    [[SGGameManager gameManager].gameBoard addChild:leftgun];
                    
                    
                }],
                                                            [SKAction waitForDuration:0.06f],
                                                            [SKAction runBlock:^{
                    
                    SKEmitterNode* rightgun = [gunFlash copy];
                    rightgun.zPosition = superCookie.zPosition;
                    
                    rightgun.position = CGPointMake((superCookie.position.x - (width*0.5f)) + (width * 0.6875f),
                                                    (superCookie.position.y - (height*0.5f)) + (height * 0.9628f));
                    
                    rightgun.numParticlesToEmit = 10;
                    rightgun.zRotation = [BLINDED_Math VectorToAngle_Radians:CGVectorMake(0.0f, 1.0f)];
                    rightgun.particleSize = CGSizeMake(width * 0.25f, width * 0.25f);
                    rightgun.particleSpeed = width * 5.0f;
                    
                    [[SGGameManager gameManager].gameBoard addChild:rightgun];
                    
                    
                }]
                                                            ]]];
                
                
                if(piece.isLocked){
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] LockBreak:piece];
                        
                    }];
                    
                }else if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] SingleWrapper:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else if(piece.typeID == BLOCKER_ICECREAM){
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                        
                    }];
                    
                }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                        
                    }];
                    
                }else if(piece.typeID == BLOCKER_PRETZEL){
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        piece.shouldMilkSplash = YES;
                        [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                        
                    }];
                    
                }else{
                
                    if(waitTime > 0.3f)
                        waitTime -= 0.3f;
                    
                    SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                                [SKAction runBlock:^{
                        
                        [self PlayDeleteAnimation:piece];
                        
                    }],
                                                                [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                        
                        // hurt plates
                        [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                        [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                        
                        
                    }],[SKAction fadeAlphaTo:0 duration:0]]];
                    
                    [piece runAction:piecedeath];
                }
            }
        }
    
    [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
    
    [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:firstAnimationDuration + 0.18f + ((bottomVictims.count + topVictims.count + 2) * time_for_each_victim)],
                                                [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
        
        
    }],[SKAction fadeOutWithDuration:0]]]];
    
        
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:1.0f + ((bottomVictims.count+1) * time_for_each_victim) + ((topVictims.count+ 1) * time_for_each_victim)] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
    
}

- (void)SuperHero_Luke_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.0f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float leftPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float rightPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    // handle hero and shockwaves
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    float leftDuration = leftPartDuration + 0.66f;
    float rightDuration = rightPartDuration + 0.66f;
    
    //left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.66f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.66f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            leftDuration = waitTime - timeBetweenColumns;
            
            break;
        }
    }
    
    //right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.66f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.66f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            rightDuration = waitTime - timeBetweenColumns;
            
            break;
        }
    }
    
    // handle hero and shockwaves
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_luke_blast"
                                                          FileType:@"m4a"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:0.6f
                                                        completion:nil];
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_luke_growl2"
                                                          FileType:@"m4a"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:0.4f
                                                        completion:nil];
        
        SKTexture* energyBall = [SKTexture textureWithImageNamed:[NSString stringWithFormat:@"dunkop-luke-shockwave%@",_deviceModel]];
        
        CGSize energySize = superCookie.size;
        
        SKSpriteNode* leftsideEnergy = [SKSpriteNode spriteNodeWithTexture:energyBall size:energySize];
        leftsideEnergy.position = CGPointMake(superCookie.position.x - (superCookie.size.width*0.5f), superCookie.position.y);
        leftsideEnergy.zPosition = superCookie.zPosition;
        
        leftsideEnergy.anchorPoint = CGPointMake(0.9f, 0.5f);
        
        leftsideEnergy.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:leftsideEnergy];
        [leftsideEnergy runAction:[SKAction scaleXTo:-1.0f duration:0.001f]];
        [leftsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:0.66f],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       [SKAction moveTo:leftOffScreen duration:leftPartDuration]
                                                       ]]];
        [leftsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:leftDuration],
                                                       [SKAction removeFromParent]
                                                       ]]];
        
        SKSpriteNode* rightsideEnergy = [SKSpriteNode spriteNodeWithTexture:energyBall size:energySize];
        rightsideEnergy.position = CGPointMake(superCookie.position.x + (superCookie.size.width*0.5f), superCookie.position.y);
        rightsideEnergy.zPosition = superCookie.zPosition;
        rightsideEnergy.anchorPoint = CGPointMake(0.9f, 0.5f);
        rightsideEnergy.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:rightsideEnergy];
        
        [rightsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:0.66f],
                                                        [SKAction fadeInWithDuration:0.0f],
                                                        [SKAction moveTo:rightOffScreen duration:rightPartDuration]]]];
        
        [rightsideEnergy runAction:[SKAction sequence:@[[SKAction waitForDuration:rightDuration],
                                                        [SKAction removeFromParent]]]];
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration + 0.66f],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_luke_hero_Hor_Animations[0]];
        
    }

    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            // plus the time of the throw animation
            waitTime += 0.66f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.75f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Luke_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint aboveGameBoard = CGPointMake(superCookie.position.x, (rows+2.0f) * [SGGameManager gameManager].RowHeight);
    CGPoint bottomGameBoard = CGPointMake(superCookie.position.x, [SGGameManager gameManager].RowHeight);
    
    float timeBetweenRows = 0.08f; // duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    
    float firstPartDuration = 0.5f;
    float time_to_slideDown = ((aboveGameBoard.y - bottomGameBoard.y)/[SGGameManager gameManager].RowHeight) * timeBetweenRows;
    float duration = 0.54f + firstPartDuration + time_to_slideDown;
    
    BOOL didHitPretzel = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    // down
    for (int i=1; i<=rows; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((rows-i) * [SGGameManager gameManager].numColumns) + superCookie.column];

        if(piece.isLocked){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0
                                                       NewMax:time_to_slideDown];
            waitTime = time_to_slideDown-waitTime;
            
            waitTime += firstPartDuration;
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:bottomGameBoard.y
                                                               OldMax:aboveGameBoard.y
                                                               NewMin:0
                                                               NewMax:time_to_slideDown];
                    waitTime = time_to_slideDown-waitTime;
                    
                    waitTime += firstPartDuration;
                    
                    // plus animation time
                    waitTime += 0.54f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        
                        waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                   OldMin:bottomGameBoard.y
                                                                   OldMax:aboveGameBoard.y
                                                                   NewMin:0
                                                                   NewMax:time_to_slideDown];
                        waitTime = time_to_slideDown-waitTime;
                        
                        waitTime += firstPartDuration;
                        
                        // plus animation time
                        waitTime += 0.54f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0
                                                       NewMax:time_to_slideDown];
            waitTime = time_to_slideDown-waitTime;
            
            waitTime += firstPartDuration;
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0
                                                       NewMax:time_to_slideDown];
            waitTime = time_to_slideDown-waitTime;
            
            waitTime += firstPartDuration;
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0
                                                       NewMax:time_to_slideDown];
            waitTime = time_to_slideDown-waitTime;
            
            waitTime += firstPartDuration;
            
            // plus animation time
            waitTime += 0.54f;

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    // handle hero
    {
        
        // Jump
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_rockthrow"
                                                          FileType:@"m4a"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:0.4f
                                                        completion:nil];
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_luke_growl1"
                                                          FileType:@"m4a"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:0.4f
                                                        completion:nil];
        
        // Land
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_luke_blast"
                                                          FileType:@"m4a"
                                                            volume:1.0f
                                                    numberOfLoopes:0
                                                             delay:firstPartDuration + time_to_slideDown + 0.54
                                                        completion:nil];
        
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.54f],
                                                    [SKAction moveTo:aboveGameBoard duration:firstPartDuration],
                                                    _luke_hero_Vert_Animations[1],
                                                    [SKAction moveTo:bottomGameBoard duration:time_to_slideDown],
                                                    _luke_hero_Vert_Animations[2]]]];
        
        if(didHitPretzel){
            
        }else{
            duration = 0.54f + firstPartDuration + time_to_slideDown + 0.12;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];

        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];

        
        [superCookie runAction:_luke_hero_Vert_Animations[0]];
        
    }
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0
                                                       NewMax:time_to_slideDown];
            waitTime = time_to_slideDown-waitTime;
            
            waitTime += firstPartDuration;
            
            // plus animation time
            waitTime += 0.54f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration + 0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Mikey_Hor:(CDCookieSpriteNode*)superCookie{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_knife_short" FileType:@"m4a" volume:0.3f completion:^{
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_h" FileType:@"m4a" volume:0.1f numberOfLoopes:5];
    }];
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.75f;
    float columns = [SGGameManager gameManager].numColumns;
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = superCookie.position.y;
    leftOffScreen.y = superCookie.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = superCookie.column;
    
    BOOL didHitPretzel = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<columns; i++) {
        
        float index = superColumn + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + index];
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > superCookie.column){ // on the right
                        
                        waitTime = (column - superColumn) * timeBetweenColumns;
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus the time of the throw animation
                    waitTime += 0.48f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > superCookie.column){ // on the right
                            
                            waitTime = (column - superColumn) * timeBetweenColumns;
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus the time of the throw animation
                        waitTime += 0.48f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
                waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // handle hero
    {
        
        float height = [SGGameManager gameManager].cookieHeight * 1.2f;
        float width = (height/144.0f) * 188.0f;
        superCookie.size = CGSizeMake(width, height);
        
        SKAction* movement = [SKAction sequence:@[[SKAction waitForDuration:0.48f],
                                                  [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                  [SKAction moveTo:leftOffScreen duration:0],
                                                  [SKAction moveTo:destination duration:secondPartDuration]]];

        if(didHitPretzel){
            
            
        }else{
            
            duration = 0.48f + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        
        SKAction* deletion = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                  [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]];

        
        [superCookie runAction:_mikey_hero_Hor_Animations[0]];
        [superCookie runAction:movement];
        [superCookie runAction:deletion];
        
    }
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > superCookie.column){ // on the right
                
               waitTime = (column - superColumn) * timeBetweenColumns;
                
            }else{ // on the left
                
                waitTime = secondPartDuration - ((superColumn - column) * timeBetweenColumns);
                waitTime += firstPartDuration;
            }
            
            // plus the time of the throw animation
            waitTime += 0.48f;
            
            if(waitTime > 0.4f)
                waitTime -= 0.4f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                //    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)SuperHero_Mikey_Vert:(CDCookieSpriteNode*)superCookie{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_jump_3" FileType:@"m4a" volume:1.0f completion:^{
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_v_3" FileType:@"m4a" volume:0.6f];
    }];
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    float rowHeight = [SGGameManager gameManager].RowHeight;
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint bottomRow = CGPointMake(superCookie.position.x, 0);
    
    float totalDistance = upOffScreen.y - bottomRow.y;
    float firstPartDuration = 0.25f * duration;
    float secondPartDuration = 0.75f * duration;
    
    upOffScreen.x = superCookie.position.x;
    
    float firstPartTimeBetweenRows = firstPartDuration/((upOffScreen.y - superCookie.position.y)/rowHeight);
    float secondPartTimeBetweenRows = secondPartDuration/(totalDistance/rowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzelOnFirstScratch = NO;
    BOOL didHitPretzelOnSecondScratch = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    // up
    for (int i=0; i<rows-superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow+i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];

                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * firstPartTimeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.6f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * firstPartTimeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.6f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            duration = waitTime;
            
            didHitPretzelOnFirstScratch = YES;
            
            break;
        }
    }
    
    // down
    if(!didHitPretzelOnFirstScratch)
    for (int i=0; i<=superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow-i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * firstPartTimeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.6f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * firstPartTimeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.6f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];

            duration = waitTime;
            
            didHitPretzelOnSecondScratch = YES;
            
            break;
        }
    }
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
        float width = ([SGGameManager gameManager].cookieWidth * 1.2f) * (188.0f/144.0f);
        float height = (width/188.0f) * 188.0f;
        superCookie.size = CGSizeMake(width, height);
        
        CGPoint firstScratchPos = CGPointMake((superCookie.position.x - (width*0.5f)) +(width * 0.5399f),
                                              (superCookie.position.y - (height*0.5f)) +(height * 0.9069f));
        
        SKSpriteNode* firstScratch = [SKSpriteNode spriteNodeWithColor:[SKColor whiteColor] size:CGSizeMake(width * 0.0904f,
                                                                                                            (upOffScreen.y - (height*0.5f)) +(height * 0.9069f) - firstScratchPos.y)];
        firstScratch.alpha = 0.0f;
        firstScratch.anchorPoint = CGPointMake(0.5f, 0.0f);
        firstScratch.position = firstScratchPos;
        firstScratch.zPosition = superCookie.zPosition+1;
        
        if(!didHitPretzelOnFirstScratch){
            [firstScratch runAction:[SKAction sequence:@[
                                                         [SKAction scaleYTo:0 duration:0.001f],
                                                         [SKAction waitForDuration:0.6f],
                                                         [SKAction fadeInWithDuration:0],
                                                         [SKAction scaleYTo:1 duration:firstPartDuration],
                                                         [SKAction fadeOutWithDuration:0.25f],
                                                         [SKAction removeFromParent]
                                                         ]]];
            
            [firstScratch runAction:_mikey_hero_Vert_Animations[1]];
            
        }else{
            
            [firstScratch runAction:[SKAction sequence:@[
                                                         [SKAction scaleYTo:0 duration:0.001f],
                                                         [SKAction waitForDuration:0.6f],
                                                         [SKAction fadeInWithDuration:0],
                                                         [SKAction scaleYTo:(duration-0.6f)/firstPartDuration duration:duration-0.6f]
                                                         ]]];
            [firstScratch runAction:[SKAction sequence:@[
                                                         [SKAction waitForDuration:duration],
                                                         [SKAction fadeOutWithDuration:0.25f],
                                                         [SKAction removeFromParent]
                                                         ]]];
            
            [firstScratch runAction:_mikey_hero_Vert_Animations[1]];
        }
        
        [[SGGameManager gameManager].gameBoard addChild:firstScratch];
        
        if(!didHitPretzelOnFirstScratch){
            CGPoint secondScratchPos = CGPointMake((upOffScreen.x - (width*0.5f)) +(width * 0.6197f),
                                                   (upOffScreen.y - (height*0.5f)) +(height * 0.8910f));
            
            SKSpriteNode* secondScratch = [SKSpriteNode spriteNodeWithColor:[SKColor whiteColor]
                                                                       size:CGSizeMake(width * 0.1543f,
                                                                                       secondScratchPos.y - ((bottomRow.y - (height*0.5f)) + (height * 0.8910f) ) )];
            secondScratch.alpha = 0.0f;
            secondScratch.anchorPoint = CGPointMake(0.5f, 1.0f);
            secondScratch.position = secondScratchPos;
            secondScratch.zPosition = superCookie.zPosition+1;
            
            if(!didHitPretzelOnSecondScratch){
                [secondScratch runAction:[SKAction sequence:@[
                                                              [SKAction scaleYTo:0 duration:0.001f],
                                                              [SKAction waitForDuration:0.61f + firstPartDuration],
                                                              [SKAction fadeInWithDuration:0],
                                                              [SKAction scaleYTo:1 duration:secondPartDuration],
                                                              [SKAction fadeOutWithDuration:0.25f],
                                                              [SKAction removeFromParent]
                                                              ]]];
                
                [secondScratch runAction:_mikey_hero_Vert_Animations[2]];
                
            }else{
                
                [secondScratch runAction:[SKAction sequence:@[
                                                              [SKAction scaleYTo:0 duration:0.001f],
                                                              [SKAction waitForDuration:0.61f + firstPartDuration],
                                                              [SKAction fadeInWithDuration:0],
                                                              [SKAction scaleYTo:(duration - firstPartDuration)/secondPartDuration duration:duration - firstPartDuration]
                                                              ]]];
                [secondScratch runAction:[SKAction sequence:@[
                                                              [SKAction waitForDuration:duration],
                                                              [SKAction fadeOutWithDuration:0.25f],
                                                              [SKAction removeFromParent]
                                                              ]]];
                
                [secondScratch runAction:_mikey_hero_Vert_Animations[2]];

            }
            
            [[SGGameManager gameManager].gameBoard addChild:secondScratch];
        }
        
        if(!didHitPretzelOnFirstScratch && !didHitPretzelOnSecondScratch){
            
            duration = 0.6f + firstPartDuration + secondPartDuration;
            
        }else{
            
            
        }
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.6f],
                                                    [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                    _mikey_hero_Vert_Animations[3],
                                                    [SKAction moveTo:bottomRow duration:secondPartDuration],
                                                    ]]];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_mikey_hero_Vert_Animations[0]];
        
    }
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * firstPartTimeBetweenRows;
                
            }else{ // below
                
                waitTime = ((upOffScreen.y - piece.position.y)/rowHeight) * secondPartTimeBetweenRows;
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.6f;
            
            if(waitTime > 0.4f)
                waitTime -= 0.4f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
}

#pragma mark - Farmer methods

-(void)Farmer_Chip_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_knife_short" FileType:@"m4a" volume:0.3f completion:^{
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_h" FileType:@"m4a" volume:0.1f numberOfLoopes:5];
    }];
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = ((column - superColumn) * timeBetweenColumns);
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                    }
                    
                    waitTime += 0.3f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = ((column - superColumn) * timeBetweenColumns);
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                        }
                        
                        waitTime += 0.3f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_chip_hero_Hor_Animations[0], [SKAction repeatActionForever:_chip_hero_Hor_Animations[1]]]]];
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:leftOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                 [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Chip_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 1.5f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.54f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.54f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_chip_spear_windup" FileType:@"m4a" volume:0.4f numberOfLoopes:0 delay:0.1f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_chip_spear_throw" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:0.5f completion:nil];
        
        SKSpriteNode* shield = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(superCookie.size.height * 0.25f, superCookie.size.height)];
        shield.position = superCookie.position;
        shield.zPosition = superCookie.zPosition;
        
        [[SGGameManager gameManager].gameBoard addChild:shield];
        
        SKAction* shieldMovement = [SKAction sequence:@[[SKAction waitForDuration:0.54f],
                                                        [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                        [SKAction moveTo:downOffScreen duration:0],
                                                        [SKAction moveTo:destination duration:secondPartDuration]]];
        
        if(didHitPretzel){
            duration -= timeBetweenRows;
        }else{
            duration = 0.54f + firstPartDuration + secondPartDuration;
        }
        
        
        // hurt plates
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        SKAction* shielddeletion= [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                       [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction runBlock:^{
            
            superCookie.alpha = 0.0f;
            
        }],[SKAction removeFromParent]]];
        
        
        [shield runAction:[SKAction sequence:@[[SKAction waitForDuration:0.54f], _chip_hero_Vert_Animations[1]]]];
        
        /*
         [shield runAction:[SKAction waitForDuration:duration] completion:^{
         
         [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Shield Reverse" FileType:@"m4a" volume:1.0f];
         
         }];
         */
        
        [shield runAction:shieldMovement];
        [shield runAction:shielddeletion];
        
        [superCookie runAction:_chip_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

-(void)Farmer_Dustin_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                        waitTime += firstPartDuration;
                        
                    }else{ // on the left
                        
                        waitTime = (superColumn - column) * timeBetweenColumns;
                    }
                    
                    waitTime += 0.66f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = (superColumn - column) * timeBetweenColumns;
                        }
                        
                        waitTime += 0.66f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_dustin_plant_chomp" FileType:@"m4a" volume:0.2f numberOfLoopes:6 delay:0.4f completion:nil];
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_jj_beanstalk_grow" FileType:@"m4a" volume:0.2f numberOfLoopes:0 delay:0.4f completion:nil];
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_dustin_hero_Hor_Animations[0], [SKAction repeatActionForever:_dustin_hero_Hor_Animations[1]]]]];
    theSuper.size = CGSizeMake(theSuper.size.height * 1.36f, theSuper.size.height);
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.66f],
                                                      [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:rightOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.66f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                 [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - ((column - superColumn) * timeBetweenColumns);
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = (superColumn - column) * timeBetweenColumns;
            }
            
            waitTime += 0.66f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Dustin_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 3.0f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.9f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.9f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.9f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.9f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.9f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.9f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_dustin_plant_chomp" FileType:@"m4a" volume:0.2f numberOfLoopes:7 delay:0.8f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_jj_beanstalk_grow" FileType:@"m4a" volume:0.5f numberOfLoopes:0 delay:0.8f completion:nil];
        
        CGSize superSize = superCookie.size;
        CGPoint potPosition = CGPointMake(superCookie.position.x + (superSize.width * 0.0208f),superCookie.position.y + (superSize.height*0.3958f));
        
        SKSpriteNode* plantHead = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(superSize.width * 0.701f, superSize.height * 0.715f)];
        [[SGGameManager gameManager].gameBoard addChild:plantHead];
        plantHead.position = potPosition;
        plantHead.zPosition = superCookie.zPosition+2;
        [plantHead runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9f],[SKAction repeatActionForever:_dustin_hero_Vert_Animations[1]]]]];
        
        [plantHead runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9f],
                                                    [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                    [SKAction moveTo:downOffScreen duration:0],
                                                    [SKAction moveTo:potPosition duration:secondPartDuration]]]];
        
        SKSpriteNode* plantStem = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(superSize.width * 0.12f, upOffScreen.y - potPosition.y)];
        [[SGGameManager gameManager].gameBoard addChild:plantStem];
        plantStem.anchorPoint = CGPointMake(0.5f, 0);
        plantStem.position = potPosition;
        plantStem.zPosition = superCookie.zPosition+1;
        
        
        SKSpriteNode* plantStem2 = [plantStem copy];
        plantStem2.size = CGSizeMake(superSize.width * 0.12f, potPosition.y - downOffScreen.y);
        
        [[SGGameManager gameManager].gameBoard addChild:plantStem2];
        plantStem2.position = CGPointMake(potPosition.x, downOffScreen.y);
        
        
        [plantStem runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9f],_dustin_hero_Vert_Animations[3]]]];
        [plantStem runAction:[SKAction sequence:@[[SKAction scaleYTo:0 duration:0],[SKAction waitForDuration:0.9f],[SKAction scaleYTo:1 duration:firstPartDuration]]]];
        
        [plantStem2 runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9f + firstPartDuration],_dustin_hero_Vert_Animations[3]]]];
        [plantStem2 runAction:[SKAction sequence:@[[SKAction scaleYTo:0 duration:0],
                                                   [SKAction waitForDuration:0.9f + firstPartDuration],
                                                   [SKAction scaleYTo:1 duration:secondPartDuration]]]];
        
        SKSpriteNode* leaves1 = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(plantStem.size.width * 3.923f, plantStem.size.width * 3.923f * 0.6f)];
        leaves1.position = potPosition;
        leaves1.zPosition = superCookie.zPosition + 2;
        [leaves1 runAction:[SKAction sequence:@[[SKAction scaleTo:0 duration:0],_dustin_hero_Vert_Animations[2]]]];
        
        SKSpriteNode* leaves2 = [leaves1 copy];
        SKSpriteNode* leaves3 = [leaves1 copy];
        SKSpriteNode* leaves4 = [leaves1 copy];
        
        [[SGGameManager gameManager].gameBoard addChild:leaves1];
        [[SGGameManager gameManager].gameBoard addChild:leaves2];
        [[SGGameManager gameManager].gameBoard addChild:leaves3];
        [[SGGameManager gameManager].gameBoard addChild:leaves4];
        
        SKAction* leavesMovement = [SKAction sequence:@[
                                                        [SKAction moveToY:upOffScreen.y duration:firstPartDuration],
                                                        [SKAction moveToY:downOffScreen.y duration:0],
                                                        [SKAction moveToY:potPosition.y duration:secondPartDuration]
                                                        ]];
        
        [leaves1 runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9 + duration * 0.1f],
                                                [SKAction group:@[[SKAction scaleTo:1 duration:duration*0.1f],leavesMovement]]
                                                ]]];
        [leaves2 runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9 + duration * 0.25f],
                                                [SKAction group:@[[SKAction scaleTo:1 duration:duration*0.1f],leavesMovement]]
                                                ]]];
        [leaves3 runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9 + duration * 0.5f],
                                                [SKAction group:@[[SKAction scaleTo:1 duration:duration*0.1f],leavesMovement]]
                                                ]]];
        [leaves4 runAction:[SKAction sequence:@[[SKAction waitForDuration:0.9 + duration * 0.75f],
                                                [SKAction group:@[[SKAction scaleTo:1 duration:duration*0.1f],leavesMovement]]
                                                ]]];
        
        if(didHitPretzel){
            
            duration -= timeBetweenRows;
            
        }else{
            
            duration = 0.9f + firstPartDuration + secondPartDuration;
        }
        
        SKAction* weedWack = [SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction fadeAlphaTo:0 duration:0.1f],[SKAction removeFromParent]]];
        [plantHead runAction:weedWack];
        [plantStem runAction:weedWack];
        [plantStem2 runAction:weedWack];
        [leaves1 runAction:weedWack];
        [leaves2 runAction:weedWack];
        [leaves3 runAction:weedWack];
        [leaves4 runAction:weedWack];
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        [superCookie runAction:_dustin_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.9f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
    
}

-(void)Farmer_Gerry_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_knife_short" FileType:@"m4a" volume:0.3f completion:^{
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_h" FileType:@"m4a" volume:0.1f numberOfLoopes:5];
    }];
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = ((column - superColumn) * timeBetweenColumns);
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                    }
                    
                    waitTime += 0.3f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = ((column - superColumn) * timeBetweenColumns);
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                        }
                        
                        waitTime += 0.3f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_gerry_hero_Hor_Animations[0], [SKAction repeatActionForever:_gerry_hero_Hor_Animations[1]]]]];
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:leftOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                 [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Gerry_Vert:(CDCookieSpriteNode*)superCookie{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_jump_3" FileType:@"m4a" volume:1.0f completion:nil];
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_super_mike_v_3" FileType:@"m4a" volume:0.6f numberOfLoopes:0 delay:0.7f completion:nil];
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 0.75f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint aboveGameBoard = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];

    CGPoint bottomGameBoard = CGPointMake(superCookie.position.x, 0);
    
    float timeBetweenRows = 0.1f; // duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float time_to_slideDown = (((aboveGameBoard.y - bottomGameBoard.y)/[SGGameManager gameManager].RowHeight) * timeBetweenRows);
    
    float firstPartDuration = 0.5f;
    
    BOOL didHitPretzel = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    // down
    for (int i=1; i<=rows; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((rows-i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            // plus animation time
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:bottomGameBoard.y
                                                               OldMax:aboveGameBoard.y
                                                               NewMin:0 NewMax:time_to_slideDown];
                    waitTime = time_to_slideDown - waitTime;
                    
                    waitTime += firstPartDuration;
                    // plus animation time
                    waitTime += 0.42f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        
                        waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                   OldMin:bottomGameBoard.y
                                                                   OldMax:aboveGameBoard.y
                                                                   NewMin:0 NewMax:time_to_slideDown];
                        waitTime = time_to_slideDown - waitTime;
                        
                        waitTime += firstPartDuration;
                        // plus animation time
                        waitTime += 0.42f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            // plus animation time
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            // plus animation time
            waitTime += 0.42f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            // plus animation time
            waitTime += 0.42f;

            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    // handle hero
    {
        
        CGSize slidingDownSize = superCookie.size;
        slidingDownSize.width *= 1.3f;
        slidingDownSize.height *= 1.3f;
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:0.42f],
                                                    [SKAction runBlock:^{superCookie.size = slidingDownSize;}],
                                                    [SKAction moveToY:aboveGameBoard.y duration:firstPartDuration],
                                                    _gerry_hero_Vert_Animations[1],
                                                    [SKAction moveToY:bottomGameBoard.y duration:time_to_slideDown]
                                                    ]]];
        
        SKSpriteNode* scratch = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(slidingDownSize.width * 0.074f, aboveGameBoard.y - bottomGameBoard.y)];
        scratch.anchorPoint = CGPointMake(0.5f, 1.0f);
        scratch.position = CGPointMake(superCookie.position.x + (slidingDownSize.width * 0.01f), aboveGameBoard.y + (slidingDownSize.height * 0.404f));
        scratch.zPosition = superCookie.zPosition + 1;
        
        [scratch runAction:[SKAction sequence:@[
                                                [SKAction scaleYTo:0 duration:0],
                                                [SKAction waitForDuration:0.42f + firstPartDuration],
                                                _gerry_hero_Vert_Animations[2],
                                                [SKAction scaleYTo:1 duration:time_to_slideDown]
                                                ]]];
        
        [[SGGameManager gameManager].gameBoard addChild:scratch];
        
        
        if(didHitPretzel){
           
        }else{
            duration = 0.42f + firstPartDuration + time_to_slideDown;
        }
        
        [scratch runAction:[SKAction sequence:@[
                                                [SKAction waitForDuration:duration],
                                                [SKAction fadeOutWithDuration:0.25f],
                                                [SKAction removeFromParent]
                                                ]]];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            // hurt plates
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        
        [superCookie runAction:_gerry_hero_Vert_Animations[0]];
        
    }
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            // plus animation time
            waitTime += 0.42f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration + 0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
}

-(void)Farmer_JJ_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = ((column - superColumn) * timeBetweenColumns);
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                    }
                    
                    waitTime += 0.3f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = ((column - superColumn) * timeBetweenColumns);
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                        }
                        
                        waitTime += 0.3f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Cookie_Cooker_Spatula5" FileType:@"caf" volume:1.0f numberOfLoopes:0 delay:0.0f completion:nil];
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_jj_scissors" FileType:@"m4a" volume:1.0f numberOfLoopes:11 delay:0.3f completion:nil];
    
    
    // make them go away one by one
    // starting with the super
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_jj_hero_Hor_Animations[0], [SKAction repeatActionForever:_jj_hero_Hor_Animations[1]]]]];
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                      [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:leftOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.3f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                 [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.3f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_JJ_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 2.5f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((superCookie.position.y - downOffScreen.y)/[SGGameManager gameManager].RowHeight) * 0.1f;
    firstPartDuration += 0.66f;
    
    float secondPartDuration = duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    
    float bottomFiller = (-downOffScreen.y/[SGGameManager gameManager].RowHeight) * timeBetweenRows;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(i * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
                
            waitTime = row * timeBetweenRows;
            
            // plus animation time
            waitTime += firstPartDuration + bottomFiller;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    waitTime = row * timeBetweenRows;
                    
                    // plus animation time
                    waitTime += firstPartDuration + bottomFiller;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        waitTime = row * timeBetweenRows;
                        
                        // plus animation time
                        waitTime += firstPartDuration + bottomFiller;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            waitTime = row * timeBetweenRows;
            
            // plus animation time
            waitTime += firstPartDuration + bottomFiller;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            waitTime = row * timeBetweenRows;
            
            // plus animation time
            waitTime += firstPartDuration + bottomFiller;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            waitTime = row * timeBetweenRows;
            
            // plus animation time
            waitTime += firstPartDuration + bottomFiller;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Cookie_Drop_Scream11" FileType:@"caf" volume:5.0f numberOfLoopes:0 delay:0.2f completion:nil];
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_jj_beanstalk_grow" FileType:@"m4a" volume:0.7f numberOfLoopes:0 delay:firstPartDuration completion:nil];
        
        [superCookie runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:0.66f],
                                                    [SKAction moveToY:downOffScreen.y duration:firstPartDuration - 0.66f],
                                                    [SKAction moveByX:0 y:totalDistance duration:secondPartDuration]
                                                    ]]];
        
        SKSpriteNode* hat = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                         size:CGSizeMake(superCookie.size.width * 0.5486f,
                                                                         superCookie.size.height * 0.3681f)];
        hat.alpha = 0;
        [hat runAction:_jj_hero_Vert_Animations[1]];
        hat.position = superCookie.position;
        hat.zPosition = superCookie.zPosition+1;
        [[SGGameManager gameManager].gameBoard addChild:hat];
        [hat runAction:[SKAction sequence:@[
                                            [SKAction waitForDuration:0.66f],
                                            [SKAction fadeInWithDuration:0],
                                            [SKAction moveTo:downOffScreen duration:firstPartDuration * 1.50f],
                                            [SKAction removeFromParent]]]];
        
        
        SKSpriteNode* vineHead = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        vineHead.zPosition = superCookie.zPosition-1;
        vineHead.position = downOffScreen;
        
        [vineHead runAction:_jj_hero_Vert_Animations[3]];
        [vineHead runAction:[SKAction sequence:@[
                                                 [SKAction waitForDuration:firstPartDuration],
                                                 [SKAction moveByX:0 y:totalDistance duration:secondPartDuration]
                                                 ]]];
        [[SGGameManager gameManager].gameBoard addChild:vineHead];
        
        SKSpriteNode* vineTile = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        [vineTile runAction:_jj_hero_Vert_Animations[2]];
        vineTile.position = downOffScreen;
        vineTile.zPosition = vineHead.zPosition;
        
        
        if(didHitPretzel){
            
        }else{
            duration = firstPartDuration + secondPartDuration - timeBetweenRows;
        }
        
        [vineHead runAction:[SKAction sequence:@[
                                             [SKAction waitForDuration:duration],
                                             [SKAction fadeOutWithDuration:timeBetweenRows],
                                             [SKAction removeFromParent]
                                             ]]];
        
        int numberOfTiles = totalDistance/[SGGameManager gameManager].RowHeight;
        
        for (int i=0; i<numberOfTiles; i++) {
            SKSpriteNode* tile = [vineTile copy];
            tile.position = CGPointMake(downOffScreen.x, downOffScreen.y - ((i + 1) * superCookie.size.height));
            [tile runAction:[SKAction sequence:@[[SKAction waitForDuration:firstPartDuration],
                                                 [SKAction moveByX:0 y:totalDistance duration:secondPartDuration]]]];
            
            [tile runAction:[SKAction sequence:@[
                                                 [SKAction waitForDuration:duration],
                                                 [SKAction fadeOutWithDuration:timeBetweenRows],
                                                 [SKAction removeFromParent]
                                                  ]]];
            
            [[SGGameManager gameManager].gameBoard addChild:tile];
        }
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:duration],
                                                    [SKAction fadeOutWithDuration:0]
                                                    ]] completion:^{ [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size]; }];
        
        [superCookie runAction:_jj_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            waitTime = row * timeBetweenRows;
            
            // plus animation time
            waitTime += firstPartDuration + bottomFiller;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Luke_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.75f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    float laserLength = the_scene.size.width;
    float laser_duration = 0.75f;
    float leftLaser_duration = laser_duration;
    float rightLaser_duration = laser_duration;
    float superColumn = superCookie.column;
    
    // handle hero and laser
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    //left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        // on the left 0.18f
                        if(piece.column > superCookie.column){ // on the right 1.14f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:superCookie.position.x
                                                                       OldMax:(superCookie.position.x+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += 0.96f;
                        }else{
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:(superCookie.position.x-laserLength)
                                                                       OldMax:superCookie.position.x
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += 0.18f;
                        }
                        
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            // on the left 0.18f
                            if(piece.column > superCookie.column){ // on the right 1.14f
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:superCookie.position.x
                                                                           OldMax:(superCookie.position.x+laserLength)
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime += 0.96f;
                            }else{
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:(superCookie.position.x-laserLength)
                                                                           OldMax:superCookie.position.x
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime = laser_duration - waitTime;
                                waitTime += 0.18f;
                            }
                            
                        }
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
            }
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    leftLaser_duration = waitTime;
                    waitTime += 0.96f;
        
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    leftLaser_duration = waitTime;
                    waitTime += 0.18f;
                    
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    //right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        // on the left 0.18f
                        if(piece.column > superCookie.column){ // on the right 1.14f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:superCookie.position.x
                                                                       OldMax:(superCookie.position.x+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += 0.96f;
                        }else{
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:(superCookie.position.x-laserLength)
                                                                       OldMax:superCookie.position.x
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += 0.18f;
                        }
                        
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            // on the left 0.18f
                            if(piece.column > superCookie.column){ // on the right 1.14f
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:superCookie.position.x
                                                                           OldMax:(superCookie.position.x+laserLength)
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime += 0.96f;
                            }else{
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:(superCookie.position.x-laserLength)
                                                                           OldMax:superCookie.position.x
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime = laser_duration - waitTime;
                                waitTime += 0.18f;
                            }
                            
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                // on the left 0.18f
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    rightLaser_duration = waitTime;
                    waitTime += 0.96f;
                }else{
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    rightLaser_duration = waitTime;
                    waitTime += 0.18f;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    
    // handle hero and laser
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_luke_water3" FileType:@"m4a" volume:0.3f numberOfLoopes:0 delay:0.1f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_luke_water3" FileType:@"m4a" volume:0.3f numberOfLoopes:0 delay:0.9f completion:nil];
        
        
        /*
         
         luke_hor_frames[0],
         luke_hor_frames[1],
         luke_hor_frames[2],
         
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3],
         luke_hor_frames[3], // 9x
         
         luke_hor_frames[4],
         luke_hor_frames[5],
         luke_hor_frames[6],
         luke_hor_frames[7],
         
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8],
         luke_hor_frames[8] // 9x
         
         */
        
        
        float laserHeight = [SGGameManager gameManager].RowHeight * 0.25;
        
        SKSpriteNode* leftsideLaser = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(laserLength, laserHeight)];
        
        float leftXPos = superCookie.position.x - (superCookie.size.width * 0.5f);
        float leftYPos = superCookie.position.y + (superCookie.size.height * 0.5f) - (0.4653f * superCookie.size.height);
        
        leftsideLaser.position = CGPointMake(leftXPos, leftYPos);
        leftsideLaser.zPosition = superCookie.zPosition + 1;
        leftsideLaser.anchorPoint = CGPointMake(1.0f, 0.5f);
        leftsideLaser.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:leftsideLaser];
        [leftsideLaser runAction:[SKAction scaleXTo:0 duration:0.001f] completion:^{[leftsideLaser runAction:_luke_hero_Hor_Animations[2]];}];
        
        [leftsideLaser runAction:[SKAction sequence:@[[SKAction waitForDuration:0.18f],
                                                      [SKAction fadeInWithDuration:0.0f],
                                                      [SKAction scaleXTo:1 duration:laser_duration]
                                                      ]]];
        
        [leftsideLaser runAction:[SKAction sequence:@[
                                                      [SKAction waitForDuration:0.18f + leftLaser_duration],
                                                      [SKAction removeFromParent]
                                                      ]]];
        
        
        SKSpriteNode* leftsideWaterHead = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake((laserHeight * 4.0f) * 0.7361f, laserHeight * 4.0f)];
        leftsideWaterHead.position = leftsideLaser.position;
        leftsideWaterHead.zPosition = leftsideLaser.zPosition+1;
        [[SGGameManager gameManager].gameBoard addChild:leftsideWaterHead];
        
        [leftsideWaterHead runAction:[SKAction sequence:@[
                                                           [SKAction waitForDuration:0.18f],
                                                           [SKAction group:@[
                                                                             [SKAction repeatActionForever:_luke_hero_Hor_Animations[1]],
                                                                             [SKAction moveByX:-laserLength y:0 duration:laser_duration]]
                                                                              ]]
                                       ]];
        [leftsideWaterHead runAction:[SKAction sequence:@[
                                                      [SKAction waitForDuration:0.18f + leftLaser_duration],
                                                      [SKAction removeFromParent]
                                                      ]]];
        
        
        SKSpriteNode* rightsideLaser = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(laserLength, laserHeight)];
        float rightXPos = superCookie.position.x + (superCookie.size.width * 0.5f);
        
        rightsideLaser.position = CGPointMake(rightXPos, leftYPos);
        rightsideLaser.zPosition = superCookie.zPosition + 1;
        rightsideLaser.anchorPoint = CGPointMake(0.0f, 0.5f);
        rightsideLaser.alpha = 0.0f;
        [[SGGameManager gameManager].gameBoard addChild:rightsideLaser];
        
        [rightsideLaser runAction:[SKAction scaleXTo:0 duration:0.001f] completion:^{[rightsideLaser runAction:_luke_hero_Hor_Animations[2]];}];
        
        [rightsideLaser runAction:[SKAction sequence:@[[SKAction waitForDuration:0.96f],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       [SKAction scaleXTo:1 duration:laser_duration]
                                                       ]]];
        
        [rightsideLaser runAction:[SKAction sequence:@[
                                                      [SKAction waitForDuration:0.96f + rightLaser_duration],
                                                      [SKAction removeFromParent]
                                                      ]]];
        
        
        SKSpriteNode* rightsideWaterHead = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake((laserHeight * 4.0f) * 0.7361f, (laserHeight * 4.0f))];
        rightsideWaterHead.position = rightsideLaser.position;
        rightsideWaterHead.zPosition = rightsideLaser.zPosition+1;
        [[SGGameManager gameManager].gameBoard addChild:rightsideWaterHead];
        
        [rightsideWaterHead runAction:[SKAction scaleXTo:-1 duration:0]];
        [rightsideWaterHead runAction:[SKAction sequence:@[
                                                           [SKAction waitForDuration:0.96],
                                                           [SKAction group:@[
                                                                            [SKAction repeatActionForever:_luke_hero_Hor_Animations[1]],
                                                                            [SKAction moveByX:laserLength y:0 duration:laser_duration]
                                                                            ]]
                                                         ]]
                                       ];
        
        [rightsideWaterHead runAction:[SKAction sequence:@[
                                                       [SKAction waitForDuration:0.96f + rightLaser_duration],
                                                       [SKAction removeFromParent]
                                                       ]]];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_luke_hero_Hor_Animations[0]];
        
    }
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += 0.96f;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += 0.18f;
                }
                
                if(waitTime > 0.3f)
                    waitTime -= 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.25f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Luke_Vert:(CDCookieSpriteNode*)superCookie{
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 3.0f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.3f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.3f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_luke_water5" FileType:@"m4a" volume:0.3f numberOfLoopes:0 delay:0.1f completion:nil];
        
        CGSize superSize = superCookie.size;
        CGPoint potPosition = CGPointMake(superCookie.position.x + -(superSize.width * 0.1112f), superCookie.position.y + (superSize.height*0.5));
        float laserHeight = [SGGameManager gameManager].RowHeight * 0.25;
        
        SKSpriteNode* plantHead = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                               size:CGSizeMake((laserHeight * 4.0f) * 0.7361f, laserHeight * 4.0f)];
        
        [[SGGameManager gameManager].gameBoard addChild:plantHead];
        plantHead.zRotation = -1.5707961f;
        plantHead.position = potPosition;
        plantHead.zPosition = superCookie.zPosition+2;
        [plantHead runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3f],[SKAction repeatActionForever:_luke_hero_Hor_Animations[1]]]]];
        
        [plantHead runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3f],
                                                  [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                  [SKAction moveTo:downOffScreen duration:0],
                                                  [SKAction moveTo:potPosition duration:secondPartDuration]]]];
        
        SKSpriteNode* plantStem = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                               size:CGSizeMake(upOffScreen.y - potPosition.y, superSize.width * 0.12f)];
        
        [[SGGameManager gameManager].gameBoard addChild:plantStem];
        plantStem.anchorPoint = CGPointMake(1.0f, 0.5f);
        plantStem.position = potPosition;
        plantStem.zPosition = superCookie.zPosition+1;
        plantStem.zRotation = -1.5707961f;
        
        
        SKSpriteNode* plantStem2 = [plantStem copy];
        plantStem2.zRotation = -1.5707961f;
        plantStem2.size = CGSizeMake(potPosition.y - downOffScreen.y, superSize.width * 0.12f);
        
        [[SGGameManager gameManager].gameBoard addChild:plantStem2];
        plantStem2.position = CGPointMake(potPosition.x, downOffScreen.y);
        
        
        [plantStem runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3f],_luke_hero_Hor_Animations[2]]]];
        [plantStem runAction:[SKAction sequence:@[[SKAction scaleXTo:0 duration:0],
                                                  [SKAction waitForDuration:0.3f],
                                                  [SKAction scaleXTo:1 duration:firstPartDuration]]]];
        
        [plantStem2 runAction:[SKAction sequence:@[[SKAction waitForDuration:0.3f + firstPartDuration],_luke_hero_Hor_Animations[2]]]];
        [plantStem2 runAction:[SKAction sequence:@[[SKAction scaleXTo:0 duration:0],
                                                   [SKAction waitForDuration:0.3f + firstPartDuration],
                                                   [SKAction scaleXTo:1 duration:secondPartDuration]]]];
        
        
        if(didHitPretzel){
            
            duration -= timeBetweenRows;
            
        }else{
            
            duration = 0.3f + firstPartDuration + secondPartDuration;
        }
       
        SKAction* weedWack = [SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction fadeAlphaTo:0 duration:0.1f],[SKAction removeFromParent]]];
        [plantHead runAction:weedWack];
        [plantStem runAction:weedWack];
        [plantStem2 runAction:weedWack];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        [superCookie runAction:_luke_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.3f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
}

-(void)Farmer_Mikey_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];

    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    for (int i=columns-1; i>=0; i--) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + i];
        
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            
            waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    
                    waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
                    
                    waitTime += 0.66f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        
                        waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
                        
                        waitTime += 0.66f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            
            waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            
            waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            
            waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
            
            waitTime += 0.66f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    theSuper.zPosition+=2;
    
    [theSuper runAction:[SKAction sequence:@[_mikey_hero_Hor_Animations[0], [SKAction repeatActionForever:_mikey_hero_Hor_Animations[1]]]]];
    
    float runningLength = ((theSuper.position.x - leftOffScreen.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
    
    SKAction* superRunMovement = [SKAction sequence:@[
                                                      [SKAction waitForDuration:0.66f],
                                                      [SKAction moveTo:leftOffScreen duration:runningLength]
                                                      ]];
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Moo 1" FileType:@"caf" volume:5.0f numberOfLoopes:0 delay:0.0f completion:^{
        // Stuff
    }];
    SKSpriteNode* cow = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:CGSizeMake(theSuper.size.width * 1.306f, theSuper.size.height * 1.0417f)];
    cow.position = rightOffScreen;
    cow.zPosition = theSuper.zPosition;
    [[SGGameManager gameManager].gameBoard addChild:cow];
    
    [cow runAction:[SKAction sequence:@[
                                        [SKAction waitForDuration:0.66f],
                                        [SKAction repeatActionForever:_mikey_hero_Hor_Animations[2]]
                                        ]]];
    [cow runAction:[SKAction sequence:@[
                                        [SKAction waitForDuration:0.66f],
                                        [SKAction moveTo:leftOffScreen duration:((rightOffScreen.x - leftOffScreen.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns]
                                        ]]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration += 0.66f;
    
    [cow runAction:[SKAction sequence:@[
                                        [SKAction waitForDuration:duration],
                                        [SKAction removeFromParent]
                                        ]]];
    
    // hurt plates
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    
    [theSuper runAction:superRunMovement];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float waitTime = 0.5f;
            
            waitTime = ((rightOffScreen.x - piece.position.x)/[SGGameManager gameManager].columnWidth) * timeBetweenColumns;
            
            waitTime += 0.66f; // plus startupTime
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Mikey_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];

    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint aboveGameBoard = CGPointMake(superCookie.position.x, [SGGameManager gameManager].RowHeight * (rows+1.0f));
    
    CGPoint bottomGameBoard = CGPointMake(superCookie.position.x, 0);
    
    float timeBetweenRows = 0.25f;
    
    float time_to_slideDown = (((aboveGameBoard.y - bottomGameBoard.y)/[SGGameManager gameManager].RowHeight) * timeBetweenRows);
    float firstPartDuration = 2.0f;
    float duration = firstPartDuration + time_to_slideDown;
    
    BOOL didHitPretzel = NO;
    
    // handle hero
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition+=2;
        
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    // down
    for (int i=1; i<=rows; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((rows-i) * [SGGameManager gameManager].numColumns) + superCookie.column];
        
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:bottomGameBoard.y
                                                               OldMax:aboveGameBoard.y
                                                               NewMin:0 NewMax:time_to_slideDown];
                    waitTime = time_to_slideDown - waitTime;
                    
                    waitTime += firstPartDuration;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        
                        waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                   OldMin:bottomGameBoard.y
                                                                   OldMax:aboveGameBoard.y
                                                                   NewMin:0 NewMax:time_to_slideDown];
                        waitTime = time_to_slideDown - waitTime;
                        
                        waitTime += firstPartDuration;

                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    // handle hero
    {
        // Audio
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Space2" FileType:@"caf" volume:0.3f numberOfLoopes:2];
        
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"BeamUp" FileType:@"caf" volume:1.0f numberOfLoopes:0 delay:firstPartDuration*0.25f completion:^{
            // Stuff  Cookie_Drop_Scream7
            [[SGAudioManager audioManager] playSoundEffectWithFilename:@"Cookie_Drop_Scream7" FileType:@"caf" volume:1.0f];
        }];
        
        // Animation
        SKSpriteNode* ufo = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                         size:CGSizeMake(superCookie.size.width * 3.4722f, superCookie.size.height * 1.7639f)];
        [[SGGameManager gameManager].gameBoard addChild:ufo];
        
        SKSpriteNode* tractorBeam = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                                 size:CGSizeMake(superCookie.size.width * 1.1667f, aboveGameBoard.y - superCookie.position.y + [SGGameManager gameManager].RowHeight)];
        [[SGGameManager gameManager].gameBoard addChild:tractorBeam];
        
        CGPoint ufoOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + ufo.size.width, 0) toNode:[SGGameManager gameManager].gameBoard];
        ufoOffScreen.y = aboveGameBoard.y;
        
        ufo.position = ufoOffScreen;
        ufo.zPosition = superCookie.zPosition+1;
        [ufo runAction:_mikey_hero_Vert_Animations[3]];
        [ufo runAction:[SKAction sequence:@[
                                            [SKAction moveTo:aboveGameBoard duration:firstPartDuration * 0.25f],
                                            [SKAction waitForDuration:(firstPartDuration * 0.75f) + (timeBetweenRows * 3.0f)],
                                            [SKAction moveTo:ufoOffScreen duration:firstPartDuration * 0.25f],
                                            [SKAction removeFromParent]
                                            ]]];
        
        tractorBeam.position = aboveGameBoard;
        tractorBeam.anchorPoint = CGPointMake(0.5f, 1.0f);
        tractorBeam.zPosition = superCookie.zPosition-1;
        [tractorBeam runAction:[SKAction sequence:@[
                                            [SKAction scaleXTo:0 duration:0.0f],
                                            _mikey_hero_Vert_Animations[2]
                                            ]]];
        
        [tractorBeam runAction:[SKAction sequence:@[
                                            [SKAction waitForDuration:firstPartDuration * 0.25f],
                                            [SKAction scaleXTo:1 duration:0.1f],
                                            [SKAction waitForDuration:(firstPartDuration * 0.75f) - 0.2],
                                            [SKAction scaleXTo:0 duration:0.1f],
                                            [SKAction removeFromParent]
                                            ]]];
        
        
        if(didHitPretzel){
            
        }else{
            
        }
        
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            // hurt plates
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        
        [superCookie runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:firstPartDuration*0.25],
                                                    _mikey_hero_Vert_Animations[0],
                                                    [SKAction repeatActionForever:_mikey_hero_Vert_Animations[1]]]]];
        [superCookie runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:firstPartDuration*0.25],
                                                    [SKAction moveTo:aboveGameBoard duration:firstPartDuration*0.75f],
                                                    [SKAction waitForDuration:0.1],
                                                    [SKAction moveTo:bottomGameBoard duration:time_to_slideDown]
                                                    ]]];
        
        [superCookie runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:firstPartDuration],
                                                    [SKAction repeatActionForever:[SKAction rotateByAngle:6.2831844f duration:1.0f]]
                                                    ]]];
        
    }
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            
            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                       OldMin:bottomGameBoard.y
                                                       OldMax:aboveGameBoard.y
                                                       NewMin:0 NewMax:time_to_slideDown];
            waitTime = time_to_slideDown - waitTime;
            
            waitTime += firstPartDuration;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration + 0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
            
        }];
        
    }else{
        
    }
    
}


-(void)Farmer_Reginald_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_tractor_start" FileType:@"m4a" volume:0.2f completion:nil];
    [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_tractor_loop" FileType:@"m4a" volume:0.3f numberOfLoopes:9 delay:0.3f completion:nil];
    
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 3.0f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.9f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = ((column - superColumn) * timeBetweenColumns);
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                    }
                    
                    waitTime += 0.9f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = ((column - superColumn) * timeBetweenColumns);
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                        }
                        
                        waitTime += 0.9f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.9f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.9f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.9f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_reginald_hero_Hor_Animations[0], [SKAction repeatActionForever:_reginald_hero_Hor_Animations[1]]]]];
    
    SKAction* superRunMovement = [SKAction sequence:@[[SKAction waitForDuration:0.9f],
                                                      [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                      [SKAction moveTo:leftOffScreen duration:0],
                                                      [SKAction moveTo:destination duration:secondPartDuration],
                                                      ]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.9f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    SKAction* superDelete = [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                 [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
        
    }],[SKAction fadeAlphaTo:0 duration:0]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.9f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    [theSuper runAction:superRunMovement];
    [theSuper runAction:superDelete];
    
    theSuper.zPosition+=2;
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Farmer_Reginald_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 2.5f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 1.32f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 1.32f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 1.32f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 1.32f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 1.32f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 1.32f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_rockthrow" FileType:@"m4a" volume:1.0f numberOfLoopes:0 delay:1.1f completion:nil];
        [[SGAudioManager audioManager] playSoundEffectWithFilename:@"cdd_farmer_reggie_dig" FileType:@"m4a" volume:0.3f numberOfLoopes:6 delay:0.2f completion:nil];
        
        SKSpriteNode* dirtHole = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                              size:CGSizeMake(superCookie.size.width * 0.99f, superCookie.size.height * 0.2156f)];
        dirtHole.position = CGPointMake(superCookie.position.x, superCookie.position.y - (superCookie.size.height*0.5f));
        dirtHole.anchorPoint = CGPointMake(0.5f, 0);
        dirtHole.zPosition = superCookie.zPosition+1;
        
        [[SGGameManager gameManager].gameBoard addChild:dirtHole];
        
        [dirtHole runAction:[SKAction sequence:@[
                                                 [SKAction waitForDuration:0.3f],
                                                 _reginald_hero_Vert_Animations[2]
                                                 ]]];
        
        SKSpriteNode* rock = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor]
                                                              size:CGSizeMake((superCookie.size.width * 0.243f) * 2.5f,
                                                                              (superCookie.size.height * 0.2014f) * 2.5f)];
        rock.position = superCookie.position;
        rock.zPosition = superCookie.zPosition+1;
        
        [[SGGameManager gameManager].gameBoard addChild:rock];
        [rock runAction:[SKAction repeatActionForever:[SKAction rotateByAngle:6.2831844f duration:1]]];
        [rock runAction:[SKAction sequence:@[
                                             [SKAction waitForDuration:1.32f],
                                             _reginald_hero_Vert_Animations[3],
                                             [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                             [SKAction moveTo:downOffScreen duration:0],
                                             [SKAction moveTo:destination duration:secondPartDuration],
                                             [SKAction removeFromParent]
                                             ]]];
        
        if(didHitPretzel){
            
        }else{
            duration = 1.32f + firstPartDuration + secondPartDuration;
        }
        
        [rock runAction:[SKAction sequence:@[
                                             [SKAction waitForDuration:duration],
                                             [SKAction removeFromParent]
                                             ]]];

        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        SKAction* shielddeletion= [SKAction sequence:@[[SKAction waitForDuration:duration],
                                                       [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction runBlock:^{
            
            superCookie.alpha = 0.0f;
            
        }],[SKAction removeFromParent]]];
        
        
        [dirtHole runAction:shielddeletion];
        
        [superCookie runAction:[SKAction sequence:@[
                                                    _reginald_hero_Vert_Animations[0],
                                                    [SKAction repeatActionForever:_reginald_hero_Vert_Animations[1]]
                                                    ]]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 1.32f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

#pragma mark - Zombie methods

-(void)Zombie_Chip_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 0.25f;
    float columns = [SGGameManager gameManager].numColumns;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.54f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = ((column - superColumn) * timeBetweenColumns);
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                    }
                    
                    waitTime += 0.54f; // plus startupTime
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = ((column - superColumn) * timeBetweenColumns);
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                        }
                        
                        waitTime += 0.54f; // plus startupTime
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.54f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.54f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.54f; // plus startupTime
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    theSuper.zPosition+=2;
    
    [theSuper removeAllActions];
    
    [theSuper runAction:_chip_hero_Hor_Animations[0]];
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = 0.54f + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                 [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += 0.54f; // plus startupTime
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }

    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Chip_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 0.25f;
    float rows = [SGGameManager gameManager].numRows;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += 0.54f;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += 0.54f;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        
        if(didHitPretzel){
            
        }else{
            duration = 0.54f + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                       [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        [superCookie runAction:_chip_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += 0.54f;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

- (void)Zombie_Dustin_Hor:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.3f;
    float leftsideWait = 0.4f;
    float rightsideWait = 0.8f;
    
    float columns = [SGGameManager gameManager].numColumns;
    
    float laserLength = the_scene.size.width;
    float laser_duration = 0.5f;
    float superColumn = superCookie.column;
    
    // handle hero and laser
    {
        superCookie.zPosition += 2;
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    //left side
    for (int i=0; i<=superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn-i)];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        if(piece.column > superCookie.column){ // on the right 1.14f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:superCookie.position.x
                                                                       OldMax:(superCookie.position.x+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += rightsideWait;
                        }else{ // on the left 0.42f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:(superCookie.position.x-laserLength)
                                                                       OldMax:superCookie.position.x
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += leftsideWait;
                        }                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            if(piece.column > superCookie.column){ // on the right 1.14f
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:superCookie.position.x
                                                                           OldMax:(superCookie.position.x+laserLength)
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime += rightsideWait;
                            }else{ // on the left 0.42f
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:(superCookie.position.x-laserLength)
                                                                           OldMax:superCookie.position.x
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime = laser_duration - waitTime;
                                waitTime += leftsideWait;
                            }
                        }
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
            }
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    //right side
    for (int i=0; i<columns-superColumn; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(superCookie.row * columns) + (superColumn+i)];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        if(piece.column > superCookie.column){ // on the right 1.14f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:superCookie.position.x
                                                                       OldMax:(superCookie.position.x+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += rightsideWait;
                        }else{ // on the left 0.42f
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                       OldMin:(superCookie.position.x-laserLength)
                                                                       OldMax:superCookie.position.x
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += leftsideWait;
                        }
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            if(piece.column > superCookie.column){ // on the right 1.14f
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:superCookie.position.x
                                                                           OldMax:(superCookie.position.x+laserLength)
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime += rightsideWait;
                            }else{ // on the left 0.42f
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                                           OldMin:(superCookie.position.x-laserLength)
                                                                           OldMax:superCookie.position.x
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime = laser_duration - waitTime;
                                waitTime += leftsideWait;
                            }
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    
    // handle hero and laser
    {
    
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_dustin_hero_Hor_Animations[0]];
        
    }
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.column > superCookie.column){ // on the right 1.14f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:superCookie.position.x
                                                               OldMax:(superCookie.position.x+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += rightsideWait;
                }else{ // on the left 0.42f
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.x
                                                               OldMin:(superCookie.position.x-laserLength)
                                                               OldMax:superCookie.position.x
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += leftsideWait;
                }
                
                if(waitTime > 0.3f)
                    waitTime -= 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.25f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

- (void)Zombie_Dustin_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    float duration = 1.5f;
    float bottomsideWait = 0.4f; // 5x
    float topsideWait = 0.72f;// 9x
    
    float columns = [SGGameManager gameManager].numColumns;
    float rows = [SGGameManager gameManager].numRows;
    
    float laserLength = the_scene.size.height;
    float laser_duration = 0.75f;
    float superRow = superCookie.row;
    
    // handle hero and laser
    {
        superCookie.zPosition += 2;
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    //bottom side
    for (int i=0; i<=superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow-i) * columns) + superCookie.column];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        if(piece.row > superCookie.row){ // on the topside
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                       OldMin:superCookie.position.y
                                                                       OldMax:(superCookie.position.y+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += topsideWait;
                        }else{ // on the bottomside
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                       OldMin:(superCookie.position.y-laserLength)
                                                                       OldMax:superCookie.position.y
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += bottomsideWait;
                        }
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            if(piece.row > superCookie.row){ // on the topside
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                           OldMin:superCookie.position.y
                                                                           OldMax:(superCookie.position.y+laserLength)
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime += topsideWait;
                            }else{ // on the bottomside
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                           OldMin:(superCookie.position.y-laserLength)
                                                                           OldMax:superCookie.position.y
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime = laser_duration - waitTime;
                                waitTime += bottomsideWait;
                            }
                        }
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
            }
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    //top side
    for (int i=0; i<rows-superRow; i++) {
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:((superRow + i) * columns) + superCookie.column];
        if(piece.isLocked){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float waitTime = 0.5f;
                    // waitTime
                    {
                        if(piece.row > superCookie.row){ // on the topside
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                       OldMin:superCookie.position.y
                                                                       OldMax:(superCookie.position.y+laserLength)
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime += topsideWait;
                        }else{ // on the bottomside
                            waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                       OldMin:(superCookie.position.y-laserLength)
                                                                       OldMax:superCookie.position.y
                                                                       NewMin:0.0f NewMax:laser_duration];
                            waitTime = laser_duration - waitTime;
                            waitTime += bottomsideWait;
                        }
                    }
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float waitTime = 0.5f;
                        // waitTime
                        {
                            if(piece.row > superCookie.row){ // on the topside
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                           OldMin:superCookie.position.y
                                                                           OldMax:(superCookie.position.y+laserLength)
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime += topsideWait;
                            }else{ // on the bottomside
                                waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                                           OldMin:(superCookie.position.y-laserLength)
                                                                           OldMax:superCookie.position.y
                                                                           NewMin:0.0f NewMax:laser_duration];
                                waitTime = laser_duration - waitTime;
                                waitTime += bottomsideWait;
                            }
                        }
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
                
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            break;
        }
    }
    
    
    // handle hero and laser
    {
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],[SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        [superCookie runAction:_dustin_hero_Vert_Animations[0]];
        
    }
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float waitTime = 0.5f;
            // waitTime
            {
                if(piece.row > superCookie.row){ // on the topside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:superCookie.position.y
                                                               OldMax:(superCookie.position.y+laserLength)
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime += topsideWait;
                }else{ // on the bottomside
                    waitTime = [BLINDED_Math Value_from_another_Scope:piece.position.y
                                                               OldMin:(superCookie.position.y-laserLength)
                                                               OldMax:superCookie.position.y
                                                               NewMin:0.0f NewMax:laser_duration];
                    waitTime = laser_duration - waitTime;
                    waitTime += bottomsideWait;
                }
                
                if(waitTime > 0.3f)
                    waitTime -= 0.3f;
            }
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.25f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_JJ_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 1.0f;
    float columns = [SGGameManager gameManager].numColumns;
    float animationStartupTime = 0.48f;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    float secondPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex + i;
        if(index >= columns)
            index -= columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = ((column - superColumn) * timeBetweenColumns);
                        
                    }else{ // on the left
                        
                        waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                    }
                    
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = ((column - superColumn) * timeBetweenColumns);
                            
                        }else{ // on the left
                            
                            waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                        }
                        
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    theSuper.zPosition+=2;
    [theSuper removeAllActions];
    [theSuper runAction:_jj_hero_Hor_Animations[0]];
    
    SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:theSuper.size];
    icing.position = CGPointMake(theSuper.position.x,theSuper.position.y);
    icing.zPosition = theSuper.zPosition;
    icing.alpha = 0.0f;
    icing.xScale = -1.0f;
    
    [[SGGameManager gameManager].gameBoard addChild:icing];
    [icing runAction:_jj_hero_Hor_Animations[1]];
    
    SKAction* icingMovement = [SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                                    [SKAction fadeInWithDuration:0.0f],
                                                    [SKAction moveTo:rightOffScreen duration:firstPartDuration],
                                                    [SKAction moveTo:leftOffScreen duration:0],
                                                    [SKAction moveTo:destination duration:secondPartDuration],
                                                    ]];
    [icing runAction:icingMovement];
    
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = animationStartupTime + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                             [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        [icing removeAllActions];
        [icing removeFromParent];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = ((column - superColumn) * timeBetweenColumns);
                
            }else{ // on the left
                
                waitTime = secondPartDuration - (superColumn - column) * timeBetweenColumns;
                waitTime += firstPartDuration;
            }
            
            waitTime += animationStartupTime;
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            //(column/columns) * duration;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_JJ_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 1.0f;
    float rows = [SGGameManager gameManager].numRows;
    float animationStartupTime = 0.96f;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        icing.position = CGPointMake(superCookie.position.x,superCookie.position.y + (superCookie.size.height * 0.4f));
        icing.zPosition = superCookie.zPosition;
        icing.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:icing];
        [icing runAction:_jj_hero_Vert_Animations[1]];
        
        SKAction* icingMovement = [SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                       [SKAction moveTo:downOffScreen duration:0],
                                                       [SKAction moveTo:destination duration:secondPartDuration]
                                                       ]];
        [icing runAction:icingMovement];

        
        if(didHitPretzel){
            
        }else{
            duration = animationStartupTime + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            [icing removeAllActions];
            [icing removeFromParent];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        superCookie.position = CGPointMake(superCookie.position.x, superCookie.position.y + (superCookie.size.height * 0.1528f));
        superCookie.yScale = 1.3056f;
        [superCookie runAction:_jj_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Gerry_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    float animationStartupTime = 0.3f;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                        
                    }else{ // on the left
                        
                        waitTime = ((superColumn - column) * timeBetweenColumns);
                    }
                    
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = ((superColumn - column) * timeBetweenColumns);
                        }
                        
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    theSuper.zPosition+=2;
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_gerry_hero_Hor_Animations[0],[SKAction repeatActionForever:_gerry_hero_Hor_Animations[1]]]]];
   
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                                   [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                                   [SKAction moveTo:rightOffScreen duration:0],
                                                   [SKAction moveTo:destination duration:secondPartDuration],
                                                   ]]];
    
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = animationStartupTime + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                             [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Gerry_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    float animationStartupTime = 0.6f;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        icing.position = CGPointMake(superCookie.position.x,superCookie.position.y + (superCookie.size.height * 0.4f));
        icing.zPosition = superCookie.zPosition;
        icing.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:icing];
        [icing runAction:_gerry_hero_Vert_Animations[1]];
        
        SKAction* icingMovement = [SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                       [SKAction moveTo:downOffScreen duration:0],
                                                       [SKAction moveTo:destination duration:secondPartDuration],
                                                       ]];
        [icing runAction:icingMovement];
        
        
        if(didHitPretzel){
            
        }else{
            duration = animationStartupTime + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            [icing removeAllActions];
            [icing removeFromParent];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        [superCookie runAction:_gerry_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Luke_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    float animationStartupTime = 0.66f;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                        
                    }else{ // on the left
                        
                        waitTime = ((superColumn - column) * timeBetweenColumns);
                    }
                    
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = ((superColumn - column) * timeBetweenColumns);
                        }
                        
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    theSuper.zPosition+=2;
    [theSuper removeAllActions];
    
    [theSuper runAction:_luke_hero_Hor_Animations[0]];
    
    SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:theSuper.size];
    icing.position = CGPointMake(theSuper.position.x,theSuper.position.y);
    icing.zPosition = theSuper.zPosition;
    icing.alpha = 0.0f;
    icing.xScale = -1.0f;
    
    [[SGGameManager gameManager].gameBoard addChild:icing];
    [icing runAction:_luke_hero_Hor_Animations[1]];
    
    [icing runAction:[SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                          [SKAction fadeInWithDuration:0],
                                          [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                          [SKAction moveTo:rightOffScreen duration:0],
                                          [SKAction moveTo:destination duration:secondPartDuration],
                                         ]]];
    
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = animationStartupTime + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                             [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        [icing removeAllActions];
        [icing removeFromParent];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Luke_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    float animationStartupTime = 0.84f;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        icing.position = CGPointMake(superCookie.position.x,superCookie.position.y);
        icing.zPosition = superCookie.zPosition;
        icing.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:icing];
        [icing runAction:_luke_hero_Vert_Animations[1]];
        
        SKAction* icingMovement = [SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                                       [SKAction fadeInWithDuration:0.0f],
                                                       [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                       [SKAction moveTo:downOffScreen duration:0],
                                                       [SKAction moveTo:destination duration:secondPartDuration],
                                                       ]];
        [icing runAction:icingMovement];
        
        
        if(didHitPretzel){
            
        }else{
            duration = animationStartupTime + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            [icing removeAllActions];
            [icing removeFromParent];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        [superCookie runAction:_luke_hero_Vert_Animations[0]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Mikey_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    float animationStartupTime = 0.66f;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                        
                    }else{ // on the left
                        
                        waitTime = ((superColumn - column) * timeBetweenColumns);
                    }
                    
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = ((superColumn - column) * timeBetweenColumns);
                        }
                        
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    theSuper.zPosition+=2;
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_mikey_hero_Hor_Animations[0],[SKAction repeatActionForever:[SKAction rotateByAngle:6.2831844f duration:0.5f]]]]];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                             [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                             [SKAction moveTo:rightOffScreen duration:0],
                                             [SKAction moveTo:destination duration:secondPartDuration],
                                             ]]];
    
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = animationStartupTime + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                             [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Mikey_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    float animationStartupTime = 0.3f;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        icing.position = CGPointMake(superCookie.position.x,superCookie.position.y);
        icing.zPosition = superCookie.zPosition;
        icing.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:icing];
        [icing runAction:_mikey_hero_Vert_Animations[2]];
        [icing runAction:[SKAction sequence:@[
                                              [SKAction waitForDuration:animationStartupTime],
                                              [SKAction fadeInWithDuration:0.0f]
                                              ]]];
        
        
        if(didHitPretzel){
            
        }else{
            duration = animationStartupTime + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            [icing removeAllActions];
            [icing removeFromParent];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
    
        [superCookie runAction:[SKAction sequence:@[_mikey_hero_Vert_Animations[0], [SKAction repeatActionForever:_mikey_hero_Vert_Animations[1]]]]];
        [superCookie runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:animationStartupTime],
                                                             [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                                             [SKAction moveTo:downOffScreen duration:0],
                                                             [SKAction moveTo:destination duration:secondPartDuration]
                                                             ]]];
        
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Reginald_Hor:(CDGameBoardSpriteNode*)theSuper{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    theSuper.isVulnerable = NO;
    
    float duration = 2.0f;
    float columns = [SGGameManager gameManager].numColumns;
    float animationStartupTime = 0.42f;
    
    
    CGPoint rightOffScreen = [the_scene convertPoint:CGPointMake(the_scene.size.width + [SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint leftOffScreen = [the_scene convertPoint:CGPointMake(-[SGGameManager gameManager].cookieWidth*2, 0) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = theSuper.position;
    
    float totalDistance = rightOffScreen.x - leftOffScreen.x;
    float firstPartDuration = ((destination.x - leftOffScreen.x)/totalDistance) * duration;
    float secondPartDuration = ((rightOffScreen.x - destination.x)/totalDistance) * duration;
    
    rightOffScreen.y = theSuper.position.y;
    leftOffScreen.y = theSuper.position.y;
    
    float timeBetweenColumns = duration/(totalDistance/[SGGameManager gameManager].columnWidth);
    float superColumn = theSuper.column;
    
    BOOL didHitPretzel = NO;
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:theSuper];
    
    int superIndex = theSuper.column;
    
    for (int i=0; i<columns; i++) {
        
        int index = superIndex - i;
        if(index < 0)
            index += columns;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(theSuper.row * columns) + index];
        
        if(piece.isLocked){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float column = piece.column;
                    float waitTime = 0.5f;
                    
                    if(piece.column > theSuper.column){ // on the right
                        
                        waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                        waitTime += firstPartDuration;
                        
                    }else{ // on the left
                        
                        waitTime = ((superColumn - column) * timeBetweenColumns);
                    }
                    
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Vertical:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float column = piece.column;
                        float waitTime = 0.5f;
                        
                        if(piece.column > theSuper.column){ // on the right
                            
                            waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                            waitTime += firstPartDuration;
                            
                        }else{ // on the left
                            
                            waitTime = ((superColumn - column) * timeBetweenColumns);
                        }
                        
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:theSuper.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
            
        }
    }
    
    // make them go away one by one
    
    // starting with the super
    theSuper.zPosition+=2;
    [theSuper removeAllActions];
    
    [theSuper runAction:[SKAction sequence:@[_reginald_hero_Hor_Animations[0],[SKAction repeatActionForever:_reginald_hero_Hor_Animations[1]]]]];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:animationStartupTime],
                                             [SKAction moveTo:leftOffScreen duration:firstPartDuration],
                                             [SKAction moveTo:rightOffScreen duration:0],
                                             [SKAction moveTo:destination duration:secondPartDuration],
                                             ]]];
    
    
    if(didHitPretzel)
        duration += 0.0f;
    else
        duration = animationStartupTime + firstPartDuration + secondPartDuration;
    
    [[SGGameManager gameManager] Area_Effect:theSuper Multiplier:theSuper.scoreMultiplier];
    [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * theSuper.scoreMultiplier Piece:theSuper];
    
    [theSuper runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                             [SKAction runBlock:^{
        
        [[SGGameManager gameManager] Put_a_milk_splash:theSuper.position Size:theSuper.size];
        
    }],[SKAction fadeAlphaTo:0 duration:0]]]];
    
    // now for the rest
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != theSuper){
            
            float column = piece.column;
            float waitTime = 0.5f;
            
            if(piece.column > theSuper.column){ // on the right
                
                waitTime = secondPartDuration - (column - superColumn) * timeBetweenColumns;
                waitTime += firstPartDuration;
                
            }else{ // on the left
                
                waitTime = ((superColumn - column) * timeBetweenColumns);
            }
            
            waitTime += animationStartupTime;
            
            if(waitTime > 0.24f)
                waitTime -= 0.24f;
            
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],
                                                        [SKAction runBlock:^{
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:theSuper.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
            
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
            
        }];
        
    }else{
        
    }
    
}

-(void)Zombie_Reginald_Vert:(CDCookieSpriteNode*)superCookie{
    
    SGCookieDunkDunkScene* the_scene = (SGCookieDunkDunkScene*)[[SGGameManager gameManager] CurrentScene];
    
    
    float duration = 2.0f;
    float rows = [SGGameManager gameManager].numRows;
    float animationStartupTime = 0.42f;
    
    
    CGPoint upOffScreen = [the_scene convertPoint:CGPointMake(0, the_scene.size.height + [SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint downOffScreen = [the_scene convertPoint:CGPointMake(0, -[SGGameManager gameManager].cookieHeight*2) toNode:[SGGameManager gameManager].gameBoard];
    CGPoint destination = superCookie.position;
    
    float totalDistance = upOffScreen.y - downOffScreen.y;
    float firstPartDuration = ((upOffScreen.y - destination.y)/totalDistance) * duration;
    float secondPartDuration = ((destination.y - downOffScreen.y)/totalDistance) * duration;
    
    upOffScreen.x = superCookie.position.x;
    downOffScreen.x = superCookie.position.x;
    
    float timeBetweenRows = duration/(totalDistance/[SGGameManager gameManager].RowHeight);
    float superRow = superCookie.row;
    
    BOOL didHitPretzel = NO;
    
    // handle hero and shield
    {
        superCookie.isVulnerable = NO;
        [superCookie removeAllActions];
        superCookie.zPosition++;
    }
    
    NSMutableArray* list = [NSMutableArray new];
    
    [list addObject:superCookie];
    
    for (int i=0; i<rows; i++) {
        
        float index = superRow + i;
        if(index >= rows)
            index -= rows;
        
        CDGameBoardSpriteNode* piece = [[SGGameManager gameManager].theGameGrid objectAtIndex:(index * [SGGameManager gameManager].numColumns) + superCookie.column];
        if(piece.isLocked){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] LockBreak:piece];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.isVulnerable){
            if([piece isKindOfClass:[CDCookieSpriteNode class]]){
                
                piece.isVulnerable = NO;
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece]){
                    
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                    
                    float row = piece.row;
                    float waitTime = 0.5f;
                    
                    if(piece.row > superCookie.row){ // on top
                        
                        waitTime = (row-superRow) * timeBetweenRows;
                        
                    }else{ // below
                        
                        waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                        waitTime += firstPartDuration;
                    }
                    
                    // plus animation time
                    waitTime += animationStartupTime;
                    
                    [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                        
                        [[SGGameManager gameManager] Super_Horizontal:(CDCookieSpriteNode*)piece];
                        
                    }];
                    
                }else
                    if([[SGGameManager gameManager].WrappedCookies containsObject:piece]){
                        
                        [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                        
                        float row = piece.row;
                        float waitTime = 0.5f;
                        
                        if(piece.row > superCookie.row){ // on top
                            
                            waitTime = (row-superRow) * timeBetweenRows;
                            
                        }else{ // below
                            
                            waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                            waitTime += firstPartDuration;
                        }
                        
                        // plus animation time
                        waitTime += animationStartupTime;
                        
                        [piece runAction:[SKAction waitForDuration:waitTime] completion:^{
                            
                            [[SGGameManager gameManager] SingleWrapper:piece];
                            
                        }];
                        
                    }else
                    {
                        
                        [list addObject:piece];
                    }
                
            }
        }else if(piece.typeID == BLOCKER_ICECREAM){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtIcecream:(CDIcecreamSpriteNode*)piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_COOKIEDOUGH){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [[SGGameManager gameManager] HurtCookiedough:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
        }else if(piece.typeID == BLOCKER_PRETZEL && piece.shouldMilkSplash){
            
            piece.shouldMilkSplash = NO;
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                piece.shouldMilkSplash = YES;
                [[SGGameManager gameManager] HurtPretzel:piece Multiplier:superCookie.scoreMultiplier];
                
            }]]];
            
            [piece runAction:piecedeath];
            
            didHitPretzel = YES;
            
            duration = waitTime;
            
            break;
        }
    }
    
    
    // handle hero and shield
    {
        SKSpriteNode* icing = [SKSpriteNode spriteNodeWithColor:[SKColor clearColor] size:superCookie.size];
        icing.position = CGPointMake(superCookie.position.x,superCookie.position.y);
        icing.zPosition = superCookie.zPosition;
        icing.alpha = 0.0f;
        
        [[SGGameManager gameManager].gameBoard addChild:icing];
        [icing runAction:_reginald_hero_Vert_Animations[1]];
        [icing runAction:[SKAction sequence:@[
                                              [SKAction waitForDuration:animationStartupTime],
                                              [SKAction scaleTo:2 duration:timeBetweenRows * 2.0f]
                                              ]]];
        [icing runAction:[SKAction sequence:@[
                                              [SKAction waitForDuration:animationStartupTime],
                                              [SKAction fadeInWithDuration:0.0f],
                                              [SKAction moveTo:upOffScreen duration:firstPartDuration],
                                              [SKAction moveTo:downOffScreen duration:0],
                                              [SKAction moveTo:destination duration:secondPartDuration]
                                              ]]];
        
        
        if(didHitPretzel){
            
        }else{
            duration = animationStartupTime + firstPartDuration + secondPartDuration;
        }
        
        
        [[SGGameManager gameManager] Area_Effect:superCookie Multiplier:superCookie.scoreMultiplier];
        [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_super * superCookie.scoreMultiplier Piece:superCookie];
        
        [superCookie runAction:[SKAction sequence:@[[SKAction waitForDuration:duration],
                                                    [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Put_a_milk_splash:superCookie.position Size:superCookie.size];
            
            [icing removeAllActions];
            [icing removeFromParent];
            
            
        }],[SKAction fadeOutWithDuration:0]]]];
        
        
        
        [superCookie runAction:_reginald_hero_Vert_Animations[0]];
    }
    
    
    // make them go away one by one
    
    for (CDGameBoardSpriteNode* piece in list) {
        
        piece.shouldMilkSplash = NO;
        
        if(piece != superCookie){
            
            float row = piece.row;
            float waitTime = 0.5f;
            
            if(piece.row > superCookie.row){ // on top
                
                waitTime = (row-superRow) * timeBetweenRows;
                
            }else{ // below
                
                waitTime = secondPartDuration - ((superRow - row) * timeBetweenRows);
                waitTime += firstPartDuration;
            }
            
            // plus animation time
            waitTime += animationStartupTime;
            
            if(waitTime > 0.3f)
                waitTime -= 0.3f;
            
            SKAction* piecedeath = [SKAction sequence:@[[SKAction waitForDuration:waitTime],
                                                        [SKAction runBlock:^{
                
                [self PlayDeleteAnimation:piece];
                
            }],
                                                        [SKAction waitForDuration:0.24],[SKAction runBlock:^{
                
                //[[SGAudioManager audioManager] playSoundEffectWithFilename:@"ShieldHit" FileType:@"m4a" volume:1.0f];
                
                // hurt plates
                [[SGGameManager gameManager] Area_Effect:piece Multiplier:superCookie.scoreMultiplier];
                [[SGGameManager gameManager] Put_a_milk_splash:piece.position Size:piece.size];
                [[SGGameManager gameManager] Add_to_Score:[SGGameManager gameManager].score_Per_powerupVictim Piece:piece];
                
                
            }], [SKAction waitForDuration:0.1f],[SKAction fadeAlphaTo:0 duration:0]]];
            
            [piece runAction:piecedeath];
        }
        
    }
    
    
    if(list.count > 0){
        
        [[SGGameManager gameManager].powerUpVictims addObjectsFromArray:list];
        
        [SGGameManager gameManager].numActivePowerUps++;
        
        [[SGGameManager gameManager].gameBoard runAction:[SKAction waitForDuration:duration+0.1f] completion:^{
            
            [SGGameManager gameManager].numActivePowerUps--;
            
            if([SGGameManager gameManager].numActivePowerUps <= 0)
            {
                [SGGameManager gameManager].numActivePowerUps = 0;
                
                [[SGGameManager gameManager] Powerup_deletion];
            }
        }];
        
    }else{
        
    }
    
}


#pragma mark - Radioactive Sprinkle methods

-(void)Radiate_up:(CDGameBoardSpriteNode*)sprinkle OtherPiece:(CDGameBoardSpriteNode*)OtherPiece
{
    
    [sprinkle runAction:[SKAction fadeOutWithDuration:0.5]];
    
    [[SGGameManager gameManager].powerUpVictims addObject:sprinkle];
    
    float superCreation_Pause = 0.2f;
    
    NSMutableArray* theNewSupers = [NSMutableArray new];
    
    for (int i=sprinkle.row+1; i<[SGGameManager gameManager].numRows; i++) {
        
        CDGameBoardSpriteNode* piece = [SGGameManager gameManager].theGameGrid[(i * [SGGameManager gameManager].numColumns) + sprinkle.column];
    
        if([piece isKindOfClass:[CDCookieSpriteNode class]] && piece.typeID != BOOSTER_RADSPRINKLE && piece.typeID != BOOSTER_SLOTMACHINE && piece.typeID != POWERUP_SMORE){
            
            if([[SGGameManager gameManager].SuperCookies containsObject:piece])
                [[SGGameManager gameManager].SuperCookies removeObject:piece];
            
            if([[SGGameManager gameManager].WrappedCookies containsObject:piece])
                [[SGGameManager gameManager].WrappedCookies removeObject:piece];
           
            [theNewSupers addObject:piece];
        }
    }
    
    for(int i=0; i<theNewSupers.count; i++) {
        
        CDCookieSpriteNode* superCookie = theNewSupers[i];
        
        [self runAction:[SKAction sequence:@[
                                                    [SKAction waitForDuration:i*superCreation_Pause],
                                                    [SKAction runBlock:^{
        
            [[SGGameManager gameManager] SuperSizeThatCookie:superCookie];
        }],
                                                    [SKAction waitForDuration:superCreation_Pause],
                                                    [SKAction runBlock:^{
        
            [[SGGameManager gameManager] Super_Horizontal:superCookie];
        }]
                                                    
                                                    ]]];
        
    }
    
}

-(void)Radiate_down:(CDGameBoardSpriteNode*)sprinkle OtherPiece:(CDGameBoardSpriteNode*)piece
{[sprinkle runAction:[SKAction fadeOutWithDuration:0.5]];
    
    [[SGGameManager gameManager].powerUpVictims addObject:sprinkle];
    
    float superCreation_Pause = 0.2f;
    
    NSMutableArray* theNewSupers = [NSMutableArray new];
    
    for (int i=sprinkle.row-1; i>-1; i--) {
        
        CDGameBoardSpriteNode* piece = [SGGameManager gameManager].theGameGrid[(i * [SGGameManager gameManager].numColumns) + sprinkle.column];
        
        if([piece isKindOfClass:[CDCookieSpriteNode class]] && piece.typeID != BOOSTER_RADSPRINKLE && piece.typeID != BOOSTER_SLOTMACHINE && piece.typeID != POWERUP_SMORE){
            
            if([[SGGameManager gameManager].SuperCookies containsObject:piece])
                [[SGGameManager gameManager].SuperCookies removeObject:piece];
            
            if([[SGGameManager gameManager].WrappedCookies containsObject:piece])
                [[SGGameManager gameManager].WrappedCookies removeObject:piece];
            
            [theNewSupers addObject:piece];
        }
    }
    
    for(int i=0; i<theNewSupers.count; i++) {
        
        CDCookieSpriteNode* superCookie = theNewSupers[i];
        
        [self runAction:[SKAction sequence:@[
                                             [SKAction waitForDuration:i*superCreation_Pause],
                                             [SKAction runBlock:^{
            
            [[SGGameManager gameManager] SuperSizeThatCookie:superCookie];
        }],
                                             [SKAction waitForDuration:superCreation_Pause],
                                             [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Super_Horizontal:superCookie];
        }]
                                             
                                             ]]];
        
    }
}

-(void)Radiate_left:(CDGameBoardSpriteNode*)sprinkle OtherPiece:(CDGameBoardSpriteNode*)piece
{
    [sprinkle runAction:[SKAction fadeOutWithDuration:0.5]];
    
    [[SGGameManager gameManager].powerUpVictims addObject:sprinkle];
    
    float superCreation_Pause = 0.2f;
    
    NSMutableArray* theNewSupers = [NSMutableArray new];
    
    for (int i=sprinkle.column-1; i>-1; i--) {
        
        CDGameBoardSpriteNode* piece = [SGGameManager gameManager].theGameGrid[(sprinkle.row * [SGGameManager gameManager].numColumns) + i];
        
        if([piece isKindOfClass:[CDCookieSpriteNode class]] && piece.typeID != BOOSTER_RADSPRINKLE && piece.typeID != BOOSTER_SLOTMACHINE && piece.typeID != POWERUP_SMORE){
            
            if([[SGGameManager gameManager].SuperCookies containsObject:piece])
                [[SGGameManager gameManager].SuperCookies removeObject:piece];
            
            if([[SGGameManager gameManager].WrappedCookies containsObject:piece])
                [[SGGameManager gameManager].WrappedCookies removeObject:piece];
            
            [theNewSupers addObject:piece];
        }
    }
    
    for(int i=0; i<theNewSupers.count; i++) {
        
        CDCookieSpriteNode* superCookie = theNewSupers[i];
        
        [self runAction:[SKAction sequence:@[
                                             [SKAction waitForDuration:i*superCreation_Pause],
                                             [SKAction runBlock:^{
            
            [[SGGameManager gameManager] SuperSizeThatCookie:superCookie];
        }],
                                             [SKAction waitForDuration:superCreation_Pause],
                                             [SKAction runBlock:^{
            
            [[SGGameManager gameManager] Super_Vertical:superCookie];
        }]
                                             
                                             ]]];
        
    }

}

-(void)Radiate_right:(CDGameBoardSpriteNode*)sprinkle OtherPiece:(CDGameBoardSpriteNode*)piece
{
    
    {
        [sprinkle runAction:[SKAction fadeOutWithDuration:0.5]];
        
        [[SGGameManager gameManager].powerUpVictims addObject:sprinkle];
        
        float superCreation_Pause = 0.2f;
        
        NSMutableArray* theNewSupers = [NSMutableArray new];
        
        for (int i=sprinkle.column+1; i<[SGGameManager gameManager].numColumns; i++) {
            
            CDGameBoardSpriteNode* piece = [SGGameManager gameManager].theGameGrid[(sprinkle.row * [SGGameManager gameManager].numColumns) + i];
            
            if([piece isKindOfClass:[CDCookieSpriteNode class]] && piece.typeID != BOOSTER_RADSPRINKLE && piece.typeID != BOOSTER_SLOTMACHINE && piece.typeID != POWERUP_SMORE){
                
                if([[SGGameManager gameManager].SuperCookies containsObject:piece])
                    [[SGGameManager gameManager].SuperCookies removeObject:piece];
                
                if([[SGGameManager gameManager].WrappedCookies containsObject:piece])
                    [[SGGameManager gameManager].WrappedCookies removeObject:piece];
                
                [theNewSupers addObject:piece];
            }
        }
        
        for(int i=0; i<theNewSupers.count; i++) {
            
            CDCookieSpriteNode* superCookie = theNewSupers[i];
            
            [self runAction:[SKAction sequence:@[
                                                 [SKAction waitForDuration:i*superCreation_Pause],
                                                 [SKAction runBlock:^{
                
                [[SGGameManager gameManager] SuperSizeThatCookie:superCookie];
            }],
                                                 [SKAction waitForDuration:superCreation_Pause],
                                                 [SKAction runBlock:^{
                
                [[SGGameManager gameManager] Super_Vertical:superCookie];
            }]
                                                 
                                                 ]]];
            
        }
        
    }
    
}

#pragma mark - Other methods

- (void)SuperSizing:(CDGameBoardSpriteNode*)theSuper
{
    
    if(theSuper == nil)
        return;
    
    if([SGGameManager gameManager] == nil)
        return;
    
    if([SGPlayerPreferencesManager preferenceManager] == nil)
        return;
    
    float scaling = 1.0f;
    float cookieWidth = [SGGameManager gameManager].cookieWidth;
    
    int kind = theSuper.typeID;
    NSString* superTheme = @"";
    
    switch (kind) {
        case COOKIE_CHIP:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].brownSuperLooks;
            break;
        }
        case COOKIE_BLUE:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].blueSuperLooks;
            break;
        }
        case COOKIE_ORANGE:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].orangeSuperLooks;
            break;
        }
        case COOKIE_YELLOW:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].yellowSuperLooks;
            break;
        }
        case COOKIE_GREEN:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].greenSuperLooks;
            break;
        }
        case COOKIE_PURPLE:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].purpleSuperLooks;
            break;
        }
        case COOKIE_RED:{
            superTheme = [SGPlayerPreferencesManager preferenceManager].redSuperLooks;
            break;
        }
            
        default:
            break;
    }

    if([superTheme isEqualToString:KeyThemeDefault])
    {
        scaling = 1.5f;
        
    }else if([superTheme isEqualToString:KeyThemeChef])
    {
        scaling = 1.25f;
        
    }else if([superTheme isEqualToString:KeyThemeSuperHero])
    {
        scaling = 1.2f;
        
    }else if([superTheme isEqualToString:KeyThemeFarmer])
    {
        scaling = 1.2f;
        
    }else if([superTheme isEqualToString:KeyThemeZombie])
    {
        scaling = 1.2f;
    }
    
    float width = cookieWidth * scaling;
    float height = (width/theSuper.texture.size.width) * theSuper.texture.size.height;
    
    theSuper.size = CGSizeMake(width, height);
    
}

-(void)CleanOutSuperStuff
{
    
    _chip_Animation_hero_Idle = nil;
    _chip_Animation_hero_PickMe = nil;
    _chip_Animation_hero_Switch = nil;
    _chip_Animation_hero_SwitchBack = nil;
    
    _chip_hero_Vert_Animations = nil;
    _chip_hero_Hor_Animations = nil;
    
    
    _mikey_Animation_hero_Idle = nil;
    _mikey_Animation_hero_PickMe = nil;
    _mikey_Animation_hero_Switch = nil;
    _mikey_Animation_hero_SwitchBack = nil;

    _mikey_hero_Vert_Animations = nil;
    _mikey_hero_Hor_Animations = nil;
    
    
    _reginald_Animation_hero_Idle = nil;
    _reginald_Animation_hero_PickMe = nil;
    _reginald_Animation_hero_Switch = nil;
    _reginald_Animation_hero_SwitchBack = nil;
    
    _reginald_hero_Vert_Animations = nil;
    _reginald_hero_Hor_Animations = nil;

    _reginald_hero_Particles = nil;
    
    
    _luke_Animation_hero_Idle = nil;
    _luke_Animation_hero_PickMe = nil;
    _luke_Animation_hero_Switch = nil;
    _luke_Animation_hero_SwitchBack = nil;
    
    _luke_hero_Vert_Animations = nil;
    _luke_hero_Hor_Animations = nil;
    

    _dustin_Animation_hero_Idle = nil;
    _dustin_Animation_hero_PickMe = nil;
    _dustin_Animation_hero_Switch = nil;
    _dustin_Animation_hero_SwitchBack = nil;
    
    _dustin_hero_Vert_Animations = nil;
    _dustin_hero_Hor_Animations = nil;
    
    _gerry_Animation_hero_Idle = nil;
    _gerry_Animation_hero_PickMe = nil;
    _gerry_Animation_hero_Switch = nil;
    _gerry_Animation_hero_SwitchBack = nil;
    
    _gerry_hero_Vert_Animations = nil;
    _gerry_hero_Hor_Animations = nil;
    
       
     _jj_Animation_hero_Idle = nil;
     _jj_Animation_hero_PickMe = nil;
     _jj_Animation_hero_Switch = nil;
     _jj_Animation_hero_SwitchBack = nil;
   
     _jj_hero_Vert_Animations = nil;
     _jj_hero_Hor_Animations = nil;
    
    _superCookieTextures = nil;
   
}

@end
